/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ILayerZeroUltraLightNodeV2 {
  export type ApplicationConfigurationStruct = {
    inboundProofLibraryVersion: PromiseOrValue<BigNumberish>;
    inboundBlockConfirmations: PromiseOrValue<BigNumberish>;
    relayer: PromiseOrValue<string>;
    outboundProofType: PromiseOrValue<BigNumberish>;
    outboundBlockConfirmations: PromiseOrValue<BigNumberish>;
    oracle: PromiseOrValue<string>;
  };

  export type ApplicationConfigurationStructOutput = [
    number,
    BigNumber,
    string,
    number,
    BigNumber,
    string
  ] & {
    inboundProofLibraryVersion: number;
    inboundBlockConfirmations: BigNumber;
    relayer: string;
    outboundProofType: number;
    outboundBlockConfirmations: BigNumber;
    oracle: string;
  };
}

export interface UltraLightNodeV2Interface extends utils.Interface {
  functions: {
    "CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS()": FunctionFragment;
    "CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION()": FunctionFragment;
    "CONFIG_TYPE_ORACLE()": FunctionFragment;
    "CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS()": FunctionFragment;
    "CONFIG_TYPE_OUTBOUND_PROOF_TYPE()": FunctionFragment;
    "CONFIG_TYPE_RELAYER()": FunctionFragment;
    "accruedNativeFee(address)": FunctionFragment;
    "addInboundProofLibraryForChain(uint16,address)": FunctionFragment;
    "appConfig(address,uint16)": FunctionFragment;
    "chainAddressSizeMap(uint16)": FunctionFragment;
    "defaultAdapterParams(uint16,uint16)": FunctionFragment;
    "defaultAppConfig(uint16)": FunctionFragment;
    "enableSupportedOutboundProof(uint16,uint16)": FunctionFragment;
    "endpoint()": FunctionFragment;
    "estimateFees(uint16,address,bytes,bool,bytes)": FunctionFragment;
    "getAppConfig(uint16,address)": FunctionFragment;
    "getConfig(uint16,address,uint256)": FunctionFragment;
    "getOutboundNonce(uint16,bytes)": FunctionFragment;
    "hashLookup(address,uint16,bytes32,bytes32)": FunctionFragment;
    "inboundProofLibrary(uint16,uint16)": FunctionFragment;
    "layerZeroToken()": FunctionFragment;
    "localChainId()": FunctionFragment;
    "maxInboundProofLibrary(uint16)": FunctionFragment;
    "nativeFees(address)": FunctionFragment;
    "nonceContract()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "send(address,uint64,uint16,bytes,bytes,address,address,bytes)": FunctionFragment;
    "setChainAddressSize(uint16,uint256)": FunctionFragment;
    "setConfig(uint16,address,uint256,bytes)": FunctionFragment;
    "setDefaultAdapterParamsForChainId(uint16,uint16,bytes)": FunctionFragment;
    "setDefaultConfigForChainId(uint16,uint16,uint64,address,uint16,uint64,address)": FunctionFragment;
    "setLayerZeroToken(address)": FunctionFragment;
    "setRemoteUln(uint16,bytes32)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "supportedOutboundProof(uint16,uint16)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryContract()": FunctionFragment;
    "treasuryZROFees()": FunctionFragment;
    "ulnLookup(uint16)": FunctionFragment;
    "updateHash(uint16,bytes32,uint256,bytes32)": FunctionFragment;
    "validateTransactionProof(uint16,address,uint256,bytes32,bytes32,bytes)": FunctionFragment;
    "withdrawNative(address,uint256)": FunctionFragment;
    "withdrawZRO(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS"
      | "CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION"
      | "CONFIG_TYPE_ORACLE"
      | "CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS"
      | "CONFIG_TYPE_OUTBOUND_PROOF_TYPE"
      | "CONFIG_TYPE_RELAYER"
      | "accruedNativeFee"
      | "addInboundProofLibraryForChain"
      | "appConfig"
      | "chainAddressSizeMap"
      | "defaultAdapterParams"
      | "defaultAppConfig"
      | "enableSupportedOutboundProof"
      | "endpoint"
      | "estimateFees"
      | "getAppConfig"
      | "getConfig"
      | "getOutboundNonce"
      | "hashLookup"
      | "inboundProofLibrary"
      | "layerZeroToken"
      | "localChainId"
      | "maxInboundProofLibrary"
      | "nativeFees"
      | "nonceContract"
      | "owner"
      | "renounceOwnership"
      | "send"
      | "setChainAddressSize"
      | "setConfig"
      | "setDefaultAdapterParamsForChainId"
      | "setDefaultConfigForChainId"
      | "setLayerZeroToken"
      | "setRemoteUln"
      | "setTreasury"
      | "supportedOutboundProof"
      | "transferOwnership"
      | "treasuryContract"
      | "treasuryZROFees"
      | "ulnLookup"
      | "updateHash"
      | "validateTransactionProof"
      | "withdrawNative"
      | "withdrawZRO"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONFIG_TYPE_ORACLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONFIG_TYPE_OUTBOUND_PROOF_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONFIG_TYPE_RELAYER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accruedNativeFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addInboundProofLibraryForChain",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "appConfig",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "chainAddressSizeMap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultAdapterParams",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultAppConfig",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableSupportedOutboundProof",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "estimateFees",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAppConfig",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfig",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutboundNonce",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hashLookup",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "inboundProofLibrary",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "layerZeroToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "localChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxInboundProofLibrary",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nativeFees",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonceContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainAddressSize",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultAdapterParamsForChainId",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultConfigForChainId",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setLayerZeroToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRemoteUln",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedOutboundProof",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryZROFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ulnLookup",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateHash",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTransactionProof",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNative",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawZRO",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CONFIG_TYPE_ORACLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CONFIG_TYPE_OUTBOUND_PROOF_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CONFIG_TYPE_RELAYER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accruedNativeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addInboundProofLibraryForChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chainAddressSizeMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultAdapterParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultAppConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableSupportedOutboundProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "estimateFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAppConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOutboundNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashLookup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inboundProofLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "layerZeroToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "localChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxInboundProofLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nativeFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonceContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setChainAddressSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultAdapterParamsForChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultConfigForChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLayerZeroToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRemoteUln",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedOutboundProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryZROFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ulnLookup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateTransactionProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawZRO",
    data: BytesLike
  ): Result;

  events: {
    "AddInboundProofLibraryForChain(uint16,address)": EventFragment;
    "AppConfigUpdated(address,uint256,bytes)": EventFragment;
    "EnableSupportedOutboundProof(uint16,uint16)": EventFragment;
    "HashReceived(uint16,address,bytes32,bytes32,uint256)": EventFragment;
    "InvalidDst(uint16,bytes,address,uint64,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Packet(bytes)": EventFragment;
    "PacketReceived(uint16,bytes,address,uint64,bytes32)": EventFragment;
    "RelayerParams(bytes,uint16)": EventFragment;
    "SetChainAddressSize(uint16,uint256)": EventFragment;
    "SetDefaultAdapterParamsForChainId(uint16,uint16,bytes)": EventFragment;
    "SetDefaultConfigForChainId(uint16,uint16,uint64,address,uint16,uint64,address)": EventFragment;
    "SetLayerZeroToken(address)": EventFragment;
    "SetRemoteUln(uint16,bytes32)": EventFragment;
    "SetTreasury(address)": EventFragment;
    "WithdrawNative(address,address,uint256)": EventFragment;
    "WithdrawZRO(address,address,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AddInboundProofLibraryForChain"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AppConfigUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EnableSupportedOutboundProof"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HashReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InvalidDst"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Packet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PacketReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerParams"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetChainAddressSize"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetDefaultAdapterParamsForChainId"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDefaultConfigForChainId"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLayerZeroToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRemoteUln"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTreasury"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawNative"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawZRO"): EventFragment;
}

export interface AddInboundProofLibraryForChainEventObject {
  chainId: number;
  lib: string;
}
export type AddInboundProofLibraryForChainEvent = TypedEvent<
  [number, string],
  AddInboundProofLibraryForChainEventObject
>;

export type AddInboundProofLibraryForChainEventFilter =
  TypedEventFilter<AddInboundProofLibraryForChainEvent>;

export interface AppConfigUpdatedEventObject {
  userApplication: string;
  configType: BigNumber;
  newConfig: string;
}
export type AppConfigUpdatedEvent = TypedEvent<
  [string, BigNumber, string],
  AppConfigUpdatedEventObject
>;

export type AppConfigUpdatedEventFilter =
  TypedEventFilter<AppConfigUpdatedEvent>;

export interface EnableSupportedOutboundProofEventObject {
  chainId: number;
  proofType: number;
}
export type EnableSupportedOutboundProofEvent = TypedEvent<
  [number, number],
  EnableSupportedOutboundProofEventObject
>;

export type EnableSupportedOutboundProofEventFilter =
  TypedEventFilter<EnableSupportedOutboundProofEvent>;

export interface HashReceivedEventObject {
  srcChainId: number;
  oracle: string;
  lookupHash: string;
  blockData: string;
  confirmations: BigNumber;
}
export type HashReceivedEvent = TypedEvent<
  [number, string, string, string, BigNumber],
  HashReceivedEventObject
>;

export type HashReceivedEventFilter = TypedEventFilter<HashReceivedEvent>;

export interface InvalidDstEventObject {
  srcChainId: number;
  srcAddress: string;
  dstAddress: string;
  nonce: BigNumber;
  payloadHash: string;
}
export type InvalidDstEvent = TypedEvent<
  [number, string, string, BigNumber, string],
  InvalidDstEventObject
>;

export type InvalidDstEventFilter = TypedEventFilter<InvalidDstEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PacketEventObject {
  payload: string;
}
export type PacketEvent = TypedEvent<[string], PacketEventObject>;

export type PacketEventFilter = TypedEventFilter<PacketEvent>;

export interface PacketReceivedEventObject {
  srcChainId: number;
  srcAddress: string;
  dstAddress: string;
  nonce: BigNumber;
  payloadHash: string;
}
export type PacketReceivedEvent = TypedEvent<
  [number, string, string, BigNumber, string],
  PacketReceivedEventObject
>;

export type PacketReceivedEventFilter = TypedEventFilter<PacketReceivedEvent>;

export interface RelayerParamsEventObject {
  adapterParams: string;
  outboundProofType: number;
}
export type RelayerParamsEvent = TypedEvent<
  [string, number],
  RelayerParamsEventObject
>;

export type RelayerParamsEventFilter = TypedEventFilter<RelayerParamsEvent>;

export interface SetChainAddressSizeEventObject {
  chainId: number;
  size: BigNumber;
}
export type SetChainAddressSizeEvent = TypedEvent<
  [number, BigNumber],
  SetChainAddressSizeEventObject
>;

export type SetChainAddressSizeEventFilter =
  TypedEventFilter<SetChainAddressSizeEvent>;

export interface SetDefaultAdapterParamsForChainIdEventObject {
  chainId: number;
  proofType: number;
  adapterParams: string;
}
export type SetDefaultAdapterParamsForChainIdEvent = TypedEvent<
  [number, number, string],
  SetDefaultAdapterParamsForChainIdEventObject
>;

export type SetDefaultAdapterParamsForChainIdEventFilter =
  TypedEventFilter<SetDefaultAdapterParamsForChainIdEvent>;

export interface SetDefaultConfigForChainIdEventObject {
  chainId: number;
  inboundProofLib: number;
  inboundBlockConfirm: BigNumber;
  relayer: string;
  outboundProofType: number;
  outboundBlockConfirm: BigNumber;
  oracle: string;
}
export type SetDefaultConfigForChainIdEvent = TypedEvent<
  [number, number, BigNumber, string, number, BigNumber, string],
  SetDefaultConfigForChainIdEventObject
>;

export type SetDefaultConfigForChainIdEventFilter =
  TypedEventFilter<SetDefaultConfigForChainIdEvent>;

export interface SetLayerZeroTokenEventObject {
  tokenAddress: string;
}
export type SetLayerZeroTokenEvent = TypedEvent<
  [string],
  SetLayerZeroTokenEventObject
>;

export type SetLayerZeroTokenEventFilter =
  TypedEventFilter<SetLayerZeroTokenEvent>;

export interface SetRemoteUlnEventObject {
  chainId: number;
  uln: string;
}
export type SetRemoteUlnEvent = TypedEvent<
  [number, string],
  SetRemoteUlnEventObject
>;

export type SetRemoteUlnEventFilter = TypedEventFilter<SetRemoteUlnEvent>;

export interface SetTreasuryEventObject {
  treasuryAddress: string;
}
export type SetTreasuryEvent = TypedEvent<[string], SetTreasuryEventObject>;

export type SetTreasuryEventFilter = TypedEventFilter<SetTreasuryEvent>;

export interface WithdrawNativeEventObject {
  msgSender: string;
  to: string;
  amount: BigNumber;
}
export type WithdrawNativeEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawNativeEventObject
>;

export type WithdrawNativeEventFilter = TypedEventFilter<WithdrawNativeEvent>;

export interface WithdrawZROEventObject {
  msgSender: string;
  to: string;
  amount: BigNumber;
}
export type WithdrawZROEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawZROEventObject
>;

export type WithdrawZROEventFilter = TypedEventFilter<WithdrawZROEvent>;

export interface UltraLightNodeV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UltraLightNodeV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    CONFIG_TYPE_ORACLE(overrides?: CallOverrides): Promise<[BigNumber]>;

    CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    CONFIG_TYPE_OUTBOUND_PROOF_TYPE(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    CONFIG_TYPE_RELAYER(overrides?: CallOverrides): Promise<[BigNumber]>;

    accruedNativeFee(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addInboundProofLibraryForChain(
      _chainId: PromiseOrValue<BigNumberish>,
      _library: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    appConfig(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, string, number, BigNumber, string] & {
        inboundProofLibraryVersion: number;
        inboundBlockConfirmations: BigNumber;
        relayer: string;
        outboundProofType: number;
        outboundBlockConfirmations: BigNumber;
        oracle: string;
      }
    >;

    chainAddressSizeMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    defaultAdapterParams(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    defaultAppConfig(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, string, number, BigNumber, string] & {
        inboundProofLibraryVersion: number;
        inboundBlockConfirmations: BigNumber;
        relayer: string;
        outboundProofType: number;
        outboundBlockConfirmations: BigNumber;
        oracle: string;
      }
    >;

    enableSupportedOutboundProof(
      _chainId: PromiseOrValue<BigNumberish>,
      _proofType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endpoint(overrides?: CallOverrides): Promise<[string]>;

    estimateFees(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _ua: PromiseOrValue<string>,
      _payload: PromiseOrValue<BytesLike>,
      _payInZRO: PromiseOrValue<boolean>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }
    >;

    getAppConfig(
      _remoteChainId: PromiseOrValue<BigNumberish>,
      _ua: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [ILayerZeroUltraLightNodeV2.ApplicationConfigurationStructOutput]
    >;

    getConfig(
      _remoteChainId: PromiseOrValue<BigNumberish>,
      _ua: PromiseOrValue<string>,
      _configType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOutboundNonce(
      _chainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashLookup(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    inboundProofLibrary(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    layerZeroToken(overrides?: CallOverrides): Promise<[string]>;

    localChainId(overrides?: CallOverrides): Promise<[number]>;

    maxInboundProofLibrary(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    nativeFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nonceContract(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    send(
      _ua: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      _payload: PromiseOrValue<BytesLike>,
      _refundAddress: PromiseOrValue<string>,
      _zroPaymentAddress: PromiseOrValue<string>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setChainAddressSize(
      _chainId: PromiseOrValue<BigNumberish>,
      _size: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConfig(
      _remoteChainId: PromiseOrValue<BigNumberish>,
      _ua: PromiseOrValue<string>,
      _configType: PromiseOrValue<BigNumberish>,
      _config: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefaultAdapterParamsForChainId(
      _chainId: PromiseOrValue<BigNumberish>,
      _proofType: PromiseOrValue<BigNumberish>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefaultConfigForChainId(
      _chainId: PromiseOrValue<BigNumberish>,
      _inboundProofLibraryVersion: PromiseOrValue<BigNumberish>,
      _inboundBlockConfirmations: PromiseOrValue<BigNumberish>,
      _relayer: PromiseOrValue<string>,
      _outboundProofType: PromiseOrValue<BigNumberish>,
      _outboundBlockConfirmations: PromiseOrValue<BigNumberish>,
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLayerZeroToken(
      _layerZeroToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRemoteUln(
      _remoteChainId: PromiseOrValue<BigNumberish>,
      _remoteUln: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportedOutboundProof(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasuryContract(overrides?: CallOverrides): Promise<[string]>;

    treasuryZROFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    ulnLookup(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    updateHash(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _lookupHash: PromiseOrValue<BytesLike>,
      _confirmations: PromiseOrValue<BigNumberish>,
      _blockData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateTransactionProof(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _dstAddress: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _lookupHash: PromiseOrValue<BytesLike>,
      _blockData: PromiseOrValue<BytesLike>,
      _transactionProof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawNative(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawZRO(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  CONFIG_TYPE_ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

  CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  CONFIG_TYPE_OUTBOUND_PROOF_TYPE(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  CONFIG_TYPE_RELAYER(overrides?: CallOverrides): Promise<BigNumber>;

  accruedNativeFee(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addInboundProofLibraryForChain(
    _chainId: PromiseOrValue<BigNumberish>,
    _library: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  appConfig(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, string, number, BigNumber, string] & {
      inboundProofLibraryVersion: number;
      inboundBlockConfirmations: BigNumber;
      relayer: string;
      outboundProofType: number;
      outboundBlockConfirmations: BigNumber;
      oracle: string;
    }
  >;

  chainAddressSizeMap(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  defaultAdapterParams(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  defaultAppConfig(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, string, number, BigNumber, string] & {
      inboundProofLibraryVersion: number;
      inboundBlockConfirmations: BigNumber;
      relayer: string;
      outboundProofType: number;
      outboundBlockConfirmations: BigNumber;
      oracle: string;
    }
  >;

  enableSupportedOutboundProof(
    _chainId: PromiseOrValue<BigNumberish>,
    _proofType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endpoint(overrides?: CallOverrides): Promise<string>;

  estimateFees(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _ua: PromiseOrValue<string>,
    _payload: PromiseOrValue<BytesLike>,
    _payInZRO: PromiseOrValue<boolean>,
    _adapterParams: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }
  >;

  getAppConfig(
    _remoteChainId: PromiseOrValue<BigNumberish>,
    _ua: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ILayerZeroUltraLightNodeV2.ApplicationConfigurationStructOutput>;

  getConfig(
    _remoteChainId: PromiseOrValue<BigNumberish>,
    _ua: PromiseOrValue<string>,
    _configType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getOutboundNonce(
    _chainId: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashLookup(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BytesLike>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  inboundProofLibrary(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  layerZeroToken(overrides?: CallOverrides): Promise<string>;

  localChainId(overrides?: CallOverrides): Promise<number>;

  maxInboundProofLibrary(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  nativeFees(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nonceContract(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  send(
    _ua: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    _dstChainId: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<BytesLike>,
    _payload: PromiseOrValue<BytesLike>,
    _refundAddress: PromiseOrValue<string>,
    _zroPaymentAddress: PromiseOrValue<string>,
    _adapterParams: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setChainAddressSize(
    _chainId: PromiseOrValue<BigNumberish>,
    _size: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConfig(
    _remoteChainId: PromiseOrValue<BigNumberish>,
    _ua: PromiseOrValue<string>,
    _configType: PromiseOrValue<BigNumberish>,
    _config: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefaultAdapterParamsForChainId(
    _chainId: PromiseOrValue<BigNumberish>,
    _proofType: PromiseOrValue<BigNumberish>,
    _adapterParams: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefaultConfigForChainId(
    _chainId: PromiseOrValue<BigNumberish>,
    _inboundProofLibraryVersion: PromiseOrValue<BigNumberish>,
    _inboundBlockConfirmations: PromiseOrValue<BigNumberish>,
    _relayer: PromiseOrValue<string>,
    _outboundProofType: PromiseOrValue<BigNumberish>,
    _outboundBlockConfirmations: PromiseOrValue<BigNumberish>,
    _oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLayerZeroToken(
    _layerZeroToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRemoteUln(
    _remoteChainId: PromiseOrValue<BigNumberish>,
    _remoteUln: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportedOutboundProof(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasuryContract(overrides?: CallOverrides): Promise<string>;

  treasuryZROFees(overrides?: CallOverrides): Promise<BigNumber>;

  ulnLookup(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  updateHash(
    _srcChainId: PromiseOrValue<BigNumberish>,
    _lookupHash: PromiseOrValue<BytesLike>,
    _confirmations: PromiseOrValue<BigNumberish>,
    _blockData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateTransactionProof(
    _srcChainId: PromiseOrValue<BigNumberish>,
    _dstAddress: PromiseOrValue<string>,
    _gasLimit: PromiseOrValue<BigNumberish>,
    _lookupHash: PromiseOrValue<BytesLike>,
    _blockData: PromiseOrValue<BytesLike>,
    _transactionProof: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawNative(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawZRO(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CONFIG_TYPE_ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CONFIG_TYPE_OUTBOUND_PROOF_TYPE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CONFIG_TYPE_RELAYER(overrides?: CallOverrides): Promise<BigNumber>;

    accruedNativeFee(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addInboundProofLibraryForChain(
      _chainId: PromiseOrValue<BigNumberish>,
      _library: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    appConfig(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, string, number, BigNumber, string] & {
        inboundProofLibraryVersion: number;
        inboundBlockConfirmations: BigNumber;
        relayer: string;
        outboundProofType: number;
        outboundBlockConfirmations: BigNumber;
        oracle: string;
      }
    >;

    chainAddressSizeMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultAdapterParams(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    defaultAppConfig(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, string, number, BigNumber, string] & {
        inboundProofLibraryVersion: number;
        inboundBlockConfirmations: BigNumber;
        relayer: string;
        outboundProofType: number;
        outboundBlockConfirmations: BigNumber;
        oracle: string;
      }
    >;

    enableSupportedOutboundProof(
      _chainId: PromiseOrValue<BigNumberish>,
      _proofType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    endpoint(overrides?: CallOverrides): Promise<string>;

    estimateFees(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _ua: PromiseOrValue<string>,
      _payload: PromiseOrValue<BytesLike>,
      _payInZRO: PromiseOrValue<boolean>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }
    >;

    getAppConfig(
      _remoteChainId: PromiseOrValue<BigNumberish>,
      _ua: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ILayerZeroUltraLightNodeV2.ApplicationConfigurationStructOutput>;

    getConfig(
      _remoteChainId: PromiseOrValue<BigNumberish>,
      _ua: PromiseOrValue<string>,
      _configType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getOutboundNonce(
      _chainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashLookup(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inboundProofLibrary(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    layerZeroToken(overrides?: CallOverrides): Promise<string>;

    localChainId(overrides?: CallOverrides): Promise<number>;

    maxInboundProofLibrary(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    nativeFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonceContract(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    send(
      _ua: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      _payload: PromiseOrValue<BytesLike>,
      _refundAddress: PromiseOrValue<string>,
      _zroPaymentAddress: PromiseOrValue<string>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setChainAddressSize(
      _chainId: PromiseOrValue<BigNumberish>,
      _size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setConfig(
      _remoteChainId: PromiseOrValue<BigNumberish>,
      _ua: PromiseOrValue<string>,
      _configType: PromiseOrValue<BigNumberish>,
      _config: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultAdapterParamsForChainId(
      _chainId: PromiseOrValue<BigNumberish>,
      _proofType: PromiseOrValue<BigNumberish>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultConfigForChainId(
      _chainId: PromiseOrValue<BigNumberish>,
      _inboundProofLibraryVersion: PromiseOrValue<BigNumberish>,
      _inboundBlockConfirmations: PromiseOrValue<BigNumberish>,
      _relayer: PromiseOrValue<string>,
      _outboundProofType: PromiseOrValue<BigNumberish>,
      _outboundBlockConfirmations: PromiseOrValue<BigNumberish>,
      _oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLayerZeroToken(
      _layerZeroToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRemoteUln(
      _remoteChainId: PromiseOrValue<BigNumberish>,
      _remoteUln: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedOutboundProof(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryContract(overrides?: CallOverrides): Promise<string>;

    treasuryZROFees(overrides?: CallOverrides): Promise<BigNumber>;

    ulnLookup(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    updateHash(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _lookupHash: PromiseOrValue<BytesLike>,
      _confirmations: PromiseOrValue<BigNumberish>,
      _blockData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateTransactionProof(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _dstAddress: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _lookupHash: PromiseOrValue<BytesLike>,
      _blockData: PromiseOrValue<BytesLike>,
      _transactionProof: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNative(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawZRO(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddInboundProofLibraryForChain(uint16,address)"(
      chainId?: PromiseOrValue<BigNumberish> | null,
      lib?: null
    ): AddInboundProofLibraryForChainEventFilter;
    AddInboundProofLibraryForChain(
      chainId?: PromiseOrValue<BigNumberish> | null,
      lib?: null
    ): AddInboundProofLibraryForChainEventFilter;

    "AppConfigUpdated(address,uint256,bytes)"(
      userApplication?: PromiseOrValue<string> | null,
      configType?: PromiseOrValue<BigNumberish> | null,
      newConfig?: null
    ): AppConfigUpdatedEventFilter;
    AppConfigUpdated(
      userApplication?: PromiseOrValue<string> | null,
      configType?: PromiseOrValue<BigNumberish> | null,
      newConfig?: null
    ): AppConfigUpdatedEventFilter;

    "EnableSupportedOutboundProof(uint16,uint16)"(
      chainId?: PromiseOrValue<BigNumberish> | null,
      proofType?: null
    ): EnableSupportedOutboundProofEventFilter;
    EnableSupportedOutboundProof(
      chainId?: PromiseOrValue<BigNumberish> | null,
      proofType?: null
    ): EnableSupportedOutboundProofEventFilter;

    "HashReceived(uint16,address,bytes32,bytes32,uint256)"(
      srcChainId?: PromiseOrValue<BigNumberish> | null,
      oracle?: PromiseOrValue<string> | null,
      lookupHash?: null,
      blockData?: null,
      confirmations?: null
    ): HashReceivedEventFilter;
    HashReceived(
      srcChainId?: PromiseOrValue<BigNumberish> | null,
      oracle?: PromiseOrValue<string> | null,
      lookupHash?: null,
      blockData?: null,
      confirmations?: null
    ): HashReceivedEventFilter;

    "InvalidDst(uint16,bytes,address,uint64,bytes32)"(
      srcChainId?: PromiseOrValue<BigNumberish> | null,
      srcAddress?: null,
      dstAddress?: PromiseOrValue<string> | null,
      nonce?: null,
      payloadHash?: null
    ): InvalidDstEventFilter;
    InvalidDst(
      srcChainId?: PromiseOrValue<BigNumberish> | null,
      srcAddress?: null,
      dstAddress?: PromiseOrValue<string> | null,
      nonce?: null,
      payloadHash?: null
    ): InvalidDstEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Packet(bytes)"(payload?: null): PacketEventFilter;
    Packet(payload?: null): PacketEventFilter;

    "PacketReceived(uint16,bytes,address,uint64,bytes32)"(
      srcChainId?: PromiseOrValue<BigNumberish> | null,
      srcAddress?: null,
      dstAddress?: PromiseOrValue<string> | null,
      nonce?: null,
      payloadHash?: null
    ): PacketReceivedEventFilter;
    PacketReceived(
      srcChainId?: PromiseOrValue<BigNumberish> | null,
      srcAddress?: null,
      dstAddress?: PromiseOrValue<string> | null,
      nonce?: null,
      payloadHash?: null
    ): PacketReceivedEventFilter;

    "RelayerParams(bytes,uint16)"(
      adapterParams?: null,
      outboundProofType?: null
    ): RelayerParamsEventFilter;
    RelayerParams(
      adapterParams?: null,
      outboundProofType?: null
    ): RelayerParamsEventFilter;

    "SetChainAddressSize(uint16,uint256)"(
      chainId?: PromiseOrValue<BigNumberish> | null,
      size?: null
    ): SetChainAddressSizeEventFilter;
    SetChainAddressSize(
      chainId?: PromiseOrValue<BigNumberish> | null,
      size?: null
    ): SetChainAddressSizeEventFilter;

    "SetDefaultAdapterParamsForChainId(uint16,uint16,bytes)"(
      chainId?: PromiseOrValue<BigNumberish> | null,
      proofType?: PromiseOrValue<BigNumberish> | null,
      adapterParams?: null
    ): SetDefaultAdapterParamsForChainIdEventFilter;
    SetDefaultAdapterParamsForChainId(
      chainId?: PromiseOrValue<BigNumberish> | null,
      proofType?: PromiseOrValue<BigNumberish> | null,
      adapterParams?: null
    ): SetDefaultAdapterParamsForChainIdEventFilter;

    "SetDefaultConfigForChainId(uint16,uint16,uint64,address,uint16,uint64,address)"(
      chainId?: PromiseOrValue<BigNumberish> | null,
      inboundProofLib?: null,
      inboundBlockConfirm?: null,
      relayer?: null,
      outboundProofType?: null,
      outboundBlockConfirm?: null,
      oracle?: null
    ): SetDefaultConfigForChainIdEventFilter;
    SetDefaultConfigForChainId(
      chainId?: PromiseOrValue<BigNumberish> | null,
      inboundProofLib?: null,
      inboundBlockConfirm?: null,
      relayer?: null,
      outboundProofType?: null,
      outboundBlockConfirm?: null,
      oracle?: null
    ): SetDefaultConfigForChainIdEventFilter;

    "SetLayerZeroToken(address)"(
      tokenAddress?: PromiseOrValue<string> | null
    ): SetLayerZeroTokenEventFilter;
    SetLayerZeroToken(
      tokenAddress?: PromiseOrValue<string> | null
    ): SetLayerZeroTokenEventFilter;

    "SetRemoteUln(uint16,bytes32)"(
      chainId?: PromiseOrValue<BigNumberish> | null,
      uln?: null
    ): SetRemoteUlnEventFilter;
    SetRemoteUln(
      chainId?: PromiseOrValue<BigNumberish> | null,
      uln?: null
    ): SetRemoteUlnEventFilter;

    "SetTreasury(address)"(
      treasuryAddress?: PromiseOrValue<string> | null
    ): SetTreasuryEventFilter;
    SetTreasury(
      treasuryAddress?: PromiseOrValue<string> | null
    ): SetTreasuryEventFilter;

    "WithdrawNative(address,address,uint256)"(
      msgSender?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawNativeEventFilter;
    WithdrawNative(
      msgSender?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawNativeEventFilter;

    "WithdrawZRO(address,address,uint256)"(
      msgSender?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawZROEventFilter;
    WithdrawZRO(
      msgSender?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawZROEventFilter;
  };

  estimateGas: {
    CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CONFIG_TYPE_ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CONFIG_TYPE_OUTBOUND_PROOF_TYPE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CONFIG_TYPE_RELAYER(overrides?: CallOverrides): Promise<BigNumber>;

    accruedNativeFee(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addInboundProofLibraryForChain(
      _chainId: PromiseOrValue<BigNumberish>,
      _library: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    appConfig(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainAddressSizeMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultAdapterParams(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultAppConfig(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enableSupportedOutboundProof(
      _chainId: PromiseOrValue<BigNumberish>,
      _proofType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endpoint(overrides?: CallOverrides): Promise<BigNumber>;

    estimateFees(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _ua: PromiseOrValue<string>,
      _payload: PromiseOrValue<BytesLike>,
      _payInZRO: PromiseOrValue<boolean>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAppConfig(
      _remoteChainId: PromiseOrValue<BigNumberish>,
      _ua: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfig(
      _remoteChainId: PromiseOrValue<BigNumberish>,
      _ua: PromiseOrValue<string>,
      _configType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutboundNonce(
      _chainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashLookup(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inboundProofLibrary(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    layerZeroToken(overrides?: CallOverrides): Promise<BigNumber>;

    localChainId(overrides?: CallOverrides): Promise<BigNumber>;

    maxInboundProofLibrary(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nativeFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonceContract(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    send(
      _ua: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      _payload: PromiseOrValue<BytesLike>,
      _refundAddress: PromiseOrValue<string>,
      _zroPaymentAddress: PromiseOrValue<string>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setChainAddressSize(
      _chainId: PromiseOrValue<BigNumberish>,
      _size: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConfig(
      _remoteChainId: PromiseOrValue<BigNumberish>,
      _ua: PromiseOrValue<string>,
      _configType: PromiseOrValue<BigNumberish>,
      _config: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefaultAdapterParamsForChainId(
      _chainId: PromiseOrValue<BigNumberish>,
      _proofType: PromiseOrValue<BigNumberish>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefaultConfigForChainId(
      _chainId: PromiseOrValue<BigNumberish>,
      _inboundProofLibraryVersion: PromiseOrValue<BigNumberish>,
      _inboundBlockConfirmations: PromiseOrValue<BigNumberish>,
      _relayer: PromiseOrValue<string>,
      _outboundProofType: PromiseOrValue<BigNumberish>,
      _outboundBlockConfirmations: PromiseOrValue<BigNumberish>,
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLayerZeroToken(
      _layerZeroToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRemoteUln(
      _remoteChainId: PromiseOrValue<BigNumberish>,
      _remoteUln: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportedOutboundProof(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasuryContract(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryZROFees(overrides?: CallOverrides): Promise<BigNumber>;

    ulnLookup(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateHash(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _lookupHash: PromiseOrValue<BytesLike>,
      _confirmations: PromiseOrValue<BigNumberish>,
      _blockData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateTransactionProof(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _dstAddress: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _lookupHash: PromiseOrValue<BytesLike>,
      _blockData: PromiseOrValue<BytesLike>,
      _transactionProof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawNative(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawZRO(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CONFIG_TYPE_ORACLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CONFIG_TYPE_OUTBOUND_PROOF_TYPE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CONFIG_TYPE_RELAYER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accruedNativeFee(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addInboundProofLibraryForChain(
      _chainId: PromiseOrValue<BigNumberish>,
      _library: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    appConfig(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainAddressSizeMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultAdapterParams(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultAppConfig(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enableSupportedOutboundProof(
      _chainId: PromiseOrValue<BigNumberish>,
      _proofType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    estimateFees(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _ua: PromiseOrValue<string>,
      _payload: PromiseOrValue<BytesLike>,
      _payInZRO: PromiseOrValue<boolean>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAppConfig(
      _remoteChainId: PromiseOrValue<BigNumberish>,
      _ua: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfig(
      _remoteChainId: PromiseOrValue<BigNumberish>,
      _ua: PromiseOrValue<string>,
      _configType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutboundNonce(
      _chainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashLookup(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inboundProofLibrary(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    layerZeroToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    localChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxInboundProofLibrary(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nativeFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonceContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    send(
      _ua: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      _payload: PromiseOrValue<BytesLike>,
      _refundAddress: PromiseOrValue<string>,
      _zroPaymentAddress: PromiseOrValue<string>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setChainAddressSize(
      _chainId: PromiseOrValue<BigNumberish>,
      _size: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConfig(
      _remoteChainId: PromiseOrValue<BigNumberish>,
      _ua: PromiseOrValue<string>,
      _configType: PromiseOrValue<BigNumberish>,
      _config: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultAdapterParamsForChainId(
      _chainId: PromiseOrValue<BigNumberish>,
      _proofType: PromiseOrValue<BigNumberish>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultConfigForChainId(
      _chainId: PromiseOrValue<BigNumberish>,
      _inboundProofLibraryVersion: PromiseOrValue<BigNumberish>,
      _inboundBlockConfirmations: PromiseOrValue<BigNumberish>,
      _relayer: PromiseOrValue<string>,
      _outboundProofType: PromiseOrValue<BigNumberish>,
      _outboundBlockConfirmations: PromiseOrValue<BigNumberish>,
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLayerZeroToken(
      _layerZeroToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRemoteUln(
      _remoteChainId: PromiseOrValue<BigNumberish>,
      _remoteUln: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportedOutboundProof(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasuryContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryZROFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ulnLookup(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateHash(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _lookupHash: PromiseOrValue<BytesLike>,
      _confirmations: PromiseOrValue<BigNumberish>,
      _blockData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateTransactionProof(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _dstAddress: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _lookupHash: PromiseOrValue<BytesLike>,
      _blockData: PromiseOrValue<BytesLike>,
      _transactionProof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNative(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawZRO(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

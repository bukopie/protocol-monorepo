/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface RelayerInterface extends utils.Interface {
  functions: {
    "approvedAddresses(address)": FunctionFragment;
    "dstConfigLookup(uint16,uint16)": FunctionFragment;
    "dstPriceLookup(uint16)": FunctionFragment;
    "getPrice(uint16,uint16,address,uint256,bytes)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isApproved(address)": FunctionFragment;
    "notifyRelayer(uint16,uint16,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setApprovedAddress(address,bool)": FunctionFragment;
    "setDstConfig(uint16,uint16,uint128,uint64,uint64)": FunctionFragment;
    "setDstPrice(uint16,uint128,uint128)": FunctionFragment;
    "setPause(bool)": FunctionFragment;
    "stargateBridgeAddress()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uln()": FunctionFragment;
    "validateTransactionProofV1(uint16,address,uint256,bytes32,bytes)": FunctionFragment;
    "validateTransactionProofV2(uint16,address,uint256,bytes32,bytes,address)": FunctionFragment;
    "withdrawQuotedFromULN(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approvedAddresses"
      | "dstConfigLookup"
      | "dstPriceLookup"
      | "getPrice"
      | "initialize"
      | "isApproved"
      | "notifyRelayer"
      | "owner"
      | "paused"
      | "renounceOwnership"
      | "setApprovedAddress"
      | "setDstConfig"
      | "setDstPrice"
      | "setPause"
      | "stargateBridgeAddress"
      | "transferOwnership"
      | "uln"
      | "validateTransactionProofV1"
      | "validateTransactionProofV2"
      | "withdrawQuotedFromULN"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approvedAddresses",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "dstConfigLookup",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "dstPriceLookup",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApproved",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyRelayer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovedAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDstConfig",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDstPrice",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPause",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "stargateBridgeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "uln", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validateTransactionProofV1",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTransactionProofV2",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawQuotedFromULN",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "approvedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dstConfigLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dstPriceLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isApproved", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDstConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDstPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stargateBridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uln", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateTransactionProofV1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTransactionProofV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawQuotedFromULN",
    data: BytesLike
  ): Result;

  events: {
    "ApproveAddress(address,bool)": EventFragment;
    "AssignJob(uint16,uint16,address,uint256)": EventFragment;
    "InvalidPayloadSize(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Ulnv2Set(address)": EventFragment;
    "ValueTransferFailed(address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
    "WithdrawTokens(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApproveAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssignJob"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InvalidPayloadSize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Ulnv2Set"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValueTransferFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawTokens"): EventFragment;
}

export interface ApproveAddressEventObject {
  addr: string;
  approved: boolean;
}
export type ApproveAddressEvent = TypedEvent<
  [string, boolean],
  ApproveAddressEventObject
>;

export type ApproveAddressEventFilter = TypedEventFilter<ApproveAddressEvent>;

export interface AssignJobEventObject {
  dstChainId: number;
  outboundProofType: number;
  userApplication: string;
  totalFee: BigNumber;
}
export type AssignJobEvent = TypedEvent<
  [number, number, string, BigNumber],
  AssignJobEventObject
>;

export type AssignJobEventFilter = TypedEventFilter<AssignJobEvent>;

export interface InvalidPayloadSizeEventObject {
  payloadSize: BigNumber;
}
export type InvalidPayloadSizeEvent = TypedEvent<
  [BigNumber],
  InvalidPayloadSizeEventObject
>;

export type InvalidPayloadSizeEventFilter =
  TypedEventFilter<InvalidPayloadSizeEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Ulnv2SetEventObject {
  ulnv2: string;
}
export type Ulnv2SetEvent = TypedEvent<[string], Ulnv2SetEventObject>;

export type Ulnv2SetEventFilter = TypedEventFilter<Ulnv2SetEvent>;

export interface ValueTransferFailedEventObject {
  to: string;
  quantity: BigNumber;
}
export type ValueTransferFailedEvent = TypedEvent<
  [string, BigNumber],
  ValueTransferFailedEventObject
>;

export type ValueTransferFailedEventFilter =
  TypedEventFilter<ValueTransferFailedEvent>;

export interface WithdrawEventObject {
  to: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawTokensEventObject {
  token: string;
  to: string;
  amount: BigNumber;
}
export type WithdrawTokensEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawTokensEventObject
>;

export type WithdrawTokensEventFilter = TypedEventFilter<WithdrawTokensEvent>;

export interface Relayer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RelayerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approvedAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    dstConfigLookup(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dstNativeAmtCap: BigNumber;
        baseGas: BigNumber;
        gasPerByte: BigNumber;
      }
    >;

    dstPriceLookup(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        dstPriceRatio: BigNumber;
        dstGasPriceInWei: BigNumber;
      }
    >;

    getPrice(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _outboundProofType: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      payloadSize: PromiseOrValue<BigNumberish>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _uln: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isApproved(
      _relayerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    notifyRelayer(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _outboundProofType: PromiseOrValue<BigNumberish>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovedAddress(
      _relayerAddress: PromiseOrValue<string>,
      _approve: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDstConfig(
      _chainId: PromiseOrValue<BigNumberish>,
      _outboundProofType: PromiseOrValue<BigNumberish>,
      _dstNativeAmtCap: PromiseOrValue<BigNumberish>,
      _baseGas: PromiseOrValue<BigNumberish>,
      _gasPerByte: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDstPrice(
      _chainId: PromiseOrValue<BigNumberish>,
      _dstPriceRatio: PromiseOrValue<BigNumberish>,
      _dstGasPriceInWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPause(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stargateBridgeAddress(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uln(overrides?: CallOverrides): Promise<[string]>;

    validateTransactionProofV1(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _dstAddress: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _blockHash: PromiseOrValue<BytesLike>,
      _transactionProof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateTransactionProofV2(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _dstAddress: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _blockHash: PromiseOrValue<BytesLike>,
      _transactionProof: PromiseOrValue<BytesLike>,
      _to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawQuotedFromULN(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  approvedAddresses(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  dstConfigLookup(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      dstNativeAmtCap: BigNumber;
      baseGas: BigNumber;
      gasPerByte: BigNumber;
    }
  >;

  dstPriceLookup(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      dstPriceRatio: BigNumber;
      dstGasPriceInWei: BigNumber;
    }
  >;

  getPrice(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _outboundProofType: PromiseOrValue<BigNumberish>,
    _userApplication: PromiseOrValue<string>,
    payloadSize: PromiseOrValue<BigNumberish>,
    _adapterParams: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _uln: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isApproved(
    _relayerAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  notifyRelayer(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _outboundProofType: PromiseOrValue<BigNumberish>,
    _adapterParams: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovedAddress(
    _relayerAddress: PromiseOrValue<string>,
    _approve: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDstConfig(
    _chainId: PromiseOrValue<BigNumberish>,
    _outboundProofType: PromiseOrValue<BigNumberish>,
    _dstNativeAmtCap: PromiseOrValue<BigNumberish>,
    _baseGas: PromiseOrValue<BigNumberish>,
    _gasPerByte: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDstPrice(
    _chainId: PromiseOrValue<BigNumberish>,
    _dstPriceRatio: PromiseOrValue<BigNumberish>,
    _dstGasPriceInWei: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPause(
    _paused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stargateBridgeAddress(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uln(overrides?: CallOverrides): Promise<string>;

  validateTransactionProofV1(
    _srcChainId: PromiseOrValue<BigNumberish>,
    _dstAddress: PromiseOrValue<string>,
    _gasLimit: PromiseOrValue<BigNumberish>,
    _blockHash: PromiseOrValue<BytesLike>,
    _transactionProof: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateTransactionProofV2(
    _srcChainId: PromiseOrValue<BigNumberish>,
    _dstAddress: PromiseOrValue<string>,
    _gasLimit: PromiseOrValue<BigNumberish>,
    _blockHash: PromiseOrValue<BytesLike>,
    _transactionProof: PromiseOrValue<BytesLike>,
    _to: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawQuotedFromULN(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approvedAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dstConfigLookup(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dstNativeAmtCap: BigNumber;
        baseGas: BigNumber;
        gasPerByte: BigNumber;
      }
    >;

    dstPriceLookup(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        dstPriceRatio: BigNumber;
        dstGasPriceInWei: BigNumber;
      }
    >;

    getPrice(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _outboundProofType: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      payloadSize: PromiseOrValue<BigNumberish>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _uln: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isApproved(
      _relayerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    notifyRelayer(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _outboundProofType: PromiseOrValue<BigNumberish>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setApprovedAddress(
      _relayerAddress: PromiseOrValue<string>,
      _approve: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDstConfig(
      _chainId: PromiseOrValue<BigNumberish>,
      _outboundProofType: PromiseOrValue<BigNumberish>,
      _dstNativeAmtCap: PromiseOrValue<BigNumberish>,
      _baseGas: PromiseOrValue<BigNumberish>,
      _gasPerByte: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDstPrice(
      _chainId: PromiseOrValue<BigNumberish>,
      _dstPriceRatio: PromiseOrValue<BigNumberish>,
      _dstGasPriceInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPause(
      _paused: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    stargateBridgeAddress(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uln(overrides?: CallOverrides): Promise<string>;

    validateTransactionProofV1(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _dstAddress: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _blockHash: PromiseOrValue<BytesLike>,
      _transactionProof: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateTransactionProofV2(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _dstAddress: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _blockHash: PromiseOrValue<BytesLike>,
      _transactionProof: PromiseOrValue<BytesLike>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawQuotedFromULN(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ApproveAddress(address,bool)"(
      addr?: null,
      approved?: null
    ): ApproveAddressEventFilter;
    ApproveAddress(addr?: null, approved?: null): ApproveAddressEventFilter;

    "AssignJob(uint16,uint16,address,uint256)"(
      dstChainId?: null,
      outboundProofType?: null,
      userApplication?: null,
      totalFee?: null
    ): AssignJobEventFilter;
    AssignJob(
      dstChainId?: null,
      outboundProofType?: null,
      userApplication?: null,
      totalFee?: null
    ): AssignJobEventFilter;

    "InvalidPayloadSize(uint256)"(
      payloadSize?: PromiseOrValue<BigNumberish> | null
    ): InvalidPayloadSizeEventFilter;
    InvalidPayloadSize(
      payloadSize?: PromiseOrValue<BigNumberish> | null
    ): InvalidPayloadSizeEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Ulnv2Set(address)"(ulnv2?: null): Ulnv2SetEventFilter;
    Ulnv2Set(ulnv2?: null): Ulnv2SetEventFilter;

    "ValueTransferFailed(address,uint256)"(
      to?: PromiseOrValue<string> | null,
      quantity?: PromiseOrValue<BigNumberish> | null
    ): ValueTransferFailedEventFilter;
    ValueTransferFailed(
      to?: PromiseOrValue<string> | null,
      quantity?: PromiseOrValue<BigNumberish> | null
    ): ValueTransferFailedEventFilter;

    "Withdraw(address,uint256)"(to?: null, amount?: null): WithdrawEventFilter;
    Withdraw(to?: null, amount?: null): WithdrawEventFilter;

    "WithdrawTokens(address,address,uint256)"(
      token?: null,
      to?: null,
      amount?: null
    ): WithdrawTokensEventFilter;
    WithdrawTokens(
      token?: null,
      to?: null,
      amount?: null
    ): WithdrawTokensEventFilter;
  };

  estimateGas: {
    approvedAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dstConfigLookup(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dstPriceLookup(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _outboundProofType: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      payloadSize: PromiseOrValue<BigNumberish>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _uln: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isApproved(
      _relayerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    notifyRelayer(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _outboundProofType: PromiseOrValue<BigNumberish>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovedAddress(
      _relayerAddress: PromiseOrValue<string>,
      _approve: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDstConfig(
      _chainId: PromiseOrValue<BigNumberish>,
      _outboundProofType: PromiseOrValue<BigNumberish>,
      _dstNativeAmtCap: PromiseOrValue<BigNumberish>,
      _baseGas: PromiseOrValue<BigNumberish>,
      _gasPerByte: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDstPrice(
      _chainId: PromiseOrValue<BigNumberish>,
      _dstPriceRatio: PromiseOrValue<BigNumberish>,
      _dstGasPriceInWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPause(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stargateBridgeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uln(overrides?: CallOverrides): Promise<BigNumber>;

    validateTransactionProofV1(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _dstAddress: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _blockHash: PromiseOrValue<BytesLike>,
      _transactionProof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateTransactionProofV2(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _dstAddress: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _blockHash: PromiseOrValue<BytesLike>,
      _transactionProof: PromiseOrValue<BytesLike>,
      _to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawQuotedFromULN(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approvedAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dstConfigLookup(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dstPriceLookup(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _outboundProofType: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      payloadSize: PromiseOrValue<BigNumberish>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _uln: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isApproved(
      _relayerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    notifyRelayer(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _outboundProofType: PromiseOrValue<BigNumberish>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovedAddress(
      _relayerAddress: PromiseOrValue<string>,
      _approve: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDstConfig(
      _chainId: PromiseOrValue<BigNumberish>,
      _outboundProofType: PromiseOrValue<BigNumberish>,
      _dstNativeAmtCap: PromiseOrValue<BigNumberish>,
      _baseGas: PromiseOrValue<BigNumberish>,
      _gasPerByte: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDstPrice(
      _chainId: PromiseOrValue<BigNumberish>,
      _dstPriceRatio: PromiseOrValue<BigNumberish>,
      _dstGasPriceInWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPause(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stargateBridgeAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uln(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validateTransactionProofV1(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _dstAddress: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _blockHash: PromiseOrValue<BytesLike>,
      _transactionProof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateTransactionProofV2(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _dstAddress: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _blockHash: PromiseOrValue<BytesLike>,
      _transactionProof: PromiseOrValue<BytesLike>,
      _to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawQuotedFromULN(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

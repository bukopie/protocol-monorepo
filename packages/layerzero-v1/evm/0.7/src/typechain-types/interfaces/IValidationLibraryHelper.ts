/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace LayerZeroPacket {
  export type PacketStruct = {
    srcChainId: PromiseOrValue<BigNumberish>;
    dstChainId: PromiseOrValue<BigNumberish>;
    nonce: PromiseOrValue<BigNumberish>;
    dstAddress: PromiseOrValue<string>;
    srcAddress: PromiseOrValue<BytesLike>;
    ulnAddress: PromiseOrValue<BytesLike>;
    payload: PromiseOrValue<BytesLike>;
  };

  export type PacketStructOutput = [
    number,
    number,
    BigNumber,
    string,
    string,
    string,
    string
  ] & {
    srcChainId: number;
    dstChainId: number;
    nonce: BigNumber;
    dstAddress: string;
    srcAddress: string;
    ulnAddress: string;
    payload: string;
  };
}

export declare namespace IValidationLibraryHelper {
  export type ULNLogStruct = {
    contractAddress: PromiseOrValue<BytesLike>;
    topicZeroSig: PromiseOrValue<BytesLike>;
    data: PromiseOrValue<BytesLike>;
  };

  export type ULNLogStructOutput = [string, string, string] & {
    contractAddress: string;
    topicZeroSig: string;
    data: string;
  };
}

export interface IValidationLibraryHelperInterface extends utils.Interface {
  functions: {
    "getPacket(bytes,uint16,uint256,bytes32)": FunctionFragment;
    "getUtilsVersion()": FunctionFragment;
    "getVerifyLog(bytes32,uint256[],uint256,bytes[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getPacket" | "getUtilsVersion" | "getVerifyLog"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPacket",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUtilsVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifyLog",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "getPacket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUtilsVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifyLog",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IValidationLibraryHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IValidationLibraryHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPacket(
      data: PromiseOrValue<BytesLike>,
      srcChain: PromiseOrValue<BigNumberish>,
      sizeOfSrcAddress: PromiseOrValue<BigNumberish>,
      ulnAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[LayerZeroPacket.PacketStructOutput]>;

    getUtilsVersion(overrides?: CallOverrides): Promise<[number]>;

    getVerifyLog(
      hashRoot: PromiseOrValue<BytesLike>,
      receiptSlotIndex: PromiseOrValue<BigNumberish>[],
      logIndex: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[IValidationLibraryHelper.ULNLogStructOutput]>;
  };

  getPacket(
    data: PromiseOrValue<BytesLike>,
    srcChain: PromiseOrValue<BigNumberish>,
    sizeOfSrcAddress: PromiseOrValue<BigNumberish>,
    ulnAddress: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<LayerZeroPacket.PacketStructOutput>;

  getUtilsVersion(overrides?: CallOverrides): Promise<number>;

  getVerifyLog(
    hashRoot: PromiseOrValue<BytesLike>,
    receiptSlotIndex: PromiseOrValue<BigNumberish>[],
    logIndex: PromiseOrValue<BigNumberish>,
    proof: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<IValidationLibraryHelper.ULNLogStructOutput>;

  callStatic: {
    getPacket(
      data: PromiseOrValue<BytesLike>,
      srcChain: PromiseOrValue<BigNumberish>,
      sizeOfSrcAddress: PromiseOrValue<BigNumberish>,
      ulnAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<LayerZeroPacket.PacketStructOutput>;

    getUtilsVersion(overrides?: CallOverrides): Promise<number>;

    getVerifyLog(
      hashRoot: PromiseOrValue<BytesLike>,
      receiptSlotIndex: PromiseOrValue<BigNumberish>[],
      logIndex: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<IValidationLibraryHelper.ULNLogStructOutput>;
  };

  filters: {};

  estimateGas: {
    getPacket(
      data: PromiseOrValue<BytesLike>,
      srcChain: PromiseOrValue<BigNumberish>,
      sizeOfSrcAddress: PromiseOrValue<BigNumberish>,
      ulnAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUtilsVersion(overrides?: CallOverrides): Promise<BigNumber>;

    getVerifyLog(
      hashRoot: PromiseOrValue<BytesLike>,
      receiptSlotIndex: PromiseOrValue<BigNumberish>[],
      logIndex: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getPacket(
      data: PromiseOrValue<BytesLike>,
      srcChain: PromiseOrValue<BigNumberish>,
      sizeOfSrcAddress: PromiseOrValue<BigNumberish>,
      ulnAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUtilsVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVerifyLog(
      hashRoot: PromiseOrValue<BytesLike>,
      receiptSlotIndex: PromiseOrValue<BigNumberish>[],
      logIndex: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

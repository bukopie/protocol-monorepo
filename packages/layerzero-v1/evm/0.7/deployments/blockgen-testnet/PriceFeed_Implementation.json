{
  "address": "0xb23b28012ee92E8dE39DEb57Af31722223034747",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ARBITRUM_COMPRESSION_PERCENT",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_RATIO_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitrumPriceExt",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "gasPerL2Tx",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "gasPerL1CallDataByte",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "defaultModelPrice",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "priceRatio",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "gasPriceInUnit",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "gasPerByte",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_callDataSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gas",
          "type": "uint256"
        }
      ],
      "name": "estimateFeeByChain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "priceRatio",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_callDataSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gas",
          "type": "uint256"
        }
      ],
      "name": "estimateFeeWithArbitrumModel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "priceRatio",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_callDataSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gas",
          "type": "uint256"
        }
      ],
      "name": "estimateFeeWithDefaultModel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "priceRatio",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_callDataSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gas",
          "type": "uint256"
        }
      ],
      "name": "estimateFeeWithOptimismModel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "priceRatio",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "priceRatio",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "gasPriceInUnit",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "gasPerByte",
              "type": "uint32"
            }
          ],
          "internalType": "struct ILayerZeroPriceFeed.Price",
          "name": "price",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceRatioDenominator",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceUpdater",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeTokenPriceUSD",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "priceUpdater",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_compressionPercent",
          "type": "uint128"
        }
      ],
      "name": "setArbitrumCompressionPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_nativeTokenPriceUSD",
          "type": "uint128"
        }
      ],
      "name": "setNativeTokenPriceUSD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "chainId",
              "type": "uint16"
            },
            {
              "components": [
                {
                  "internalType": "uint128",
                  "name": "priceRatio",
                  "type": "uint128"
                },
                {
                  "internalType": "uint64",
                  "name": "gasPriceInUnit",
                  "type": "uint64"
                },
                {
                  "internalType": "uint32",
                  "name": "gasPerByte",
                  "type": "uint32"
                }
              ],
              "internalType": "struct ILayerZeroPriceFeed.Price",
              "name": "price",
              "type": "tuple"
            }
          ],
          "internalType": "struct ILayerZeroPriceFeed.UpdatePrice[]",
          "name": "_price",
          "type": "tuple[]"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "chainId",
              "type": "uint16"
            },
            {
              "components": [
                {
                  "internalType": "uint128",
                  "name": "priceRatio",
                  "type": "uint128"
                },
                {
                  "internalType": "uint64",
                  "name": "gasPriceInUnit",
                  "type": "uint64"
                },
                {
                  "internalType": "uint32",
                  "name": "gasPerByte",
                  "type": "uint32"
                }
              ],
              "internalType": "struct ILayerZeroPriceFeed.Price",
              "name": "price",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "gasPerL2Tx",
                  "type": "uint64"
                },
                {
                  "internalType": "uint32",
                  "name": "gasPerL1CallDataByte",
                  "type": "uint32"
                }
              ],
              "internalType": "struct ILayerZeroPriceFeed.ArbitrumPriceExt",
              "name": "extend",
              "type": "tuple"
            }
          ],
          "internalType": "struct ILayerZeroPriceFeed.UpdatePriceExt[]",
          "name": "_price",
          "type": "tuple[]"
        }
      ],
      "name": "setPriceForArbitrum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_denominator",
          "type": "uint128"
        }
      ],
      "name": "setPriceRatioDenominator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "setPriceUpdater",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x05262e4a0e03685283712a956ab4040420c781e18fb13c25d868794c71604b47",
  "receipt": {
    "to": null,
    "from": "0xc13b65f7c53Cd6db2EA205a4b574b4a0858720A6",
    "contractAddress": "0xb23b28012ee92E8dE39DEb57Af31722223034747",
    "transactionIndex": 0,
    "gasUsed": "1423866",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x647275487c718990d47c36cf9a1fc67c099612199134847cf8f4c982dcdba8ea",
    "transactionHash": "0x05262e4a0e03685283712a956ab4040420c781e18fb13c25d868794c71604b47",
    "logs": [],
    "blockNumber": 208497,
    "cumulativeGasUsed": "1423866",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a2843b8df13e498a9443a167db46d2a3",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ARBITRUM_COMPRESSION_PERCENT\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_RATIO_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrumPriceExt\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gasPerL2Tx\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasPerL1CallDataByte\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"defaultModelPrice\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"priceRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"gasPriceInUnit\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasPerByte\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_callDataSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"estimateFeeByChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"priceRatio\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_callDataSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"estimateFeeWithArbitrumModel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"priceRatio\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_callDataSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"estimateFeeWithDefaultModel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"priceRatio\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_callDataSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"estimateFeeWithOptimismModel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"priceRatio\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"}],\"name\":\"getPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"priceRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"gasPriceInUnit\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasPerByte\",\"type\":\"uint32\"}],\"internalType\":\"struct ILayerZeroPriceFeed.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceRatioDenominator\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceUpdater\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeTokenPriceUSD\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceUpdater\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_compressionPercent\",\"type\":\"uint128\"}],\"name\":\"setArbitrumCompressionPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_nativeTokenPriceUSD\",\"type\":\"uint128\"}],\"name\":\"setNativeTokenPriceUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"priceRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"gasPriceInUnit\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasPerByte\",\"type\":\"uint32\"}],\"internalType\":\"struct ILayerZeroPriceFeed.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"internalType\":\"struct ILayerZeroPriceFeed.UpdatePrice[]\",\"name\":\"_price\",\"type\":\"tuple[]\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"priceRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"gasPriceInUnit\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasPerByte\",\"type\":\"uint32\"}],\"internalType\":\"struct ILayerZeroPriceFeed.Price\",\"name\":\"price\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"gasPerL2Tx\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasPerL1CallDataByte\",\"type\":\"uint32\"}],\"internalType\":\"struct ILayerZeroPriceFeed.ArbitrumPriceExt\",\"name\":\"extend\",\"type\":\"tuple\"}],\"internalType\":\"struct ILayerZeroPriceFeed.UpdatePriceExt[]\",\"name\":\"_price\",\"type\":\"tuple[]\"}],\"name\":\"setPriceForArbitrum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_denominator\",\"type\":\"uint128\"}],\"name\":\"setPriceRatioDenominator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setPriceUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceFeed.sol\":\"PriceFeed\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":400},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xba7ba5b188c0b27489bad1efee8d8b1dcebb502785192b22e3d69824a802983d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1fd568d8b8ca285c801fbd1d3f40f848434d850a682c0273786cada3e0b84057\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"contracts/PriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"hardhat-deploy/solc_0.7/proxy/Proxied.sol\\\";\\nimport \\\"./interfaces/ILayerZeroPriceFeed.sol\\\";\\n\\ncontract PriceFeed is ILayerZeroPriceFeed, OwnableUpgradeable, Proxied {\\n    using SafeMath for uint;\\n\\n    uint128 public PRICE_RATIO_DENOMINATOR;\\n\\n    // sets pricing\\n    mapping(address => bool) public priceUpdater;\\n\\n    // [_chainId]\\n    mapping(uint16 => Price) public defaultModelPrice;\\n    ArbitrumPriceExt public arbitrumPriceExt;\\n\\n    uint128 public override nativeTokenPriceUSD; // uses PRICE_RATIO_DENOMINATOR\\n\\n    // upgrade: arbitrum compression - percentage of callDataSize after brotli compression\\n    uint128 public ARBITRUM_COMPRESSION_PERCENT;\\n\\n    // ============================ Constructor ===================================\\n\\n    function initialize(address _priceUpdater) public proxied initializer {\\n        __Ownable_init();\\n        priceUpdater[_priceUpdater] = true;\\n        PRICE_RATIO_DENOMINATOR = 1e10; // gas optimization: if you change this, you also need to change the RelayerV2\\n        ARBITRUM_COMPRESSION_PERCENT = 47;\\n    }\\n\\n    function onUpgrade() public proxied {\\n        PRICE_RATIO_DENOMINATOR = 1e10; // gas optimization: if you change this, you also need to change the RelayerV2\\n        ARBITRUM_COMPRESSION_PERCENT = 47;\\n    }\\n\\n    // ============================ Modifier ======================================\\n\\n    // owner is always approved\\n    modifier onlyPriceUpdater() {\\n        if (owner() != msg.sender) {\\n            require(priceUpdater[msg.sender], \\\"PriceFeed: not price updater\\\");\\n        }\\n        _;\\n    }\\n\\n    // ============================ OnlyOwner =====================================\\n\\n    function setPriceUpdater(address _addr, bool _active) external onlyOwner {\\n        priceUpdater[_addr] = _active;\\n    }\\n\\n    function setPriceRatioDenominator(uint128 _denominator) external onlyOwner {\\n        PRICE_RATIO_DENOMINATOR = _denominator;\\n    }\\n\\n    function setArbitrumCompressionPercent(uint128 _compressionPercent) external onlyOwner {\\n        ARBITRUM_COMPRESSION_PERCENT = _compressionPercent;\\n    }\\n\\n    // ============================ OnlyPriceUpdater =====================================\\n\\n    function setPrice(UpdatePrice[] calldata _price) external onlyPriceUpdater {\\n        for (uint i = 0; i < _price.length; i++) {\\n            UpdatePrice calldata _update = _price[i];\\n            _setPrice(_update.chainId, _update.price);\\n        }\\n    }\\n\\n    function setPriceForArbitrum(UpdatePriceExt[] calldata _price) external onlyPriceUpdater {\\n        for (uint i = 0; i < _price.length; i++) {\\n            UpdatePriceExt calldata _update = _price[i];\\n\\n            _setPrice(_update.chainId, _update.price);\\n\\n            uint64 gasPerL2Tx = _update.extend.gasPerL2Tx;\\n            uint32 gasPerL1CalldataByte = _update.extend.gasPerL1CallDataByte;\\n\\n            arbitrumPriceExt.gasPerL2Tx = gasPerL2Tx;\\n            arbitrumPriceExt.gasPerL1CallDataByte = gasPerL1CalldataByte;\\n        }\\n    }\\n\\n    function setNativeTokenPriceUSD(uint128 _nativeTokenPriceUSD) external onlyPriceUpdater {\\n        nativeTokenPriceUSD = _nativeTokenPriceUSD;\\n    }\\n\\n    // ============================ Internal ==========================================\\n    function _setPrice(uint16 chainId, Price memory _price) internal {\\n        uint128 priceRatio = _price.priceRatio;\\n        uint64 gasPriceInUnit = _price.gasPriceInUnit;\\n        uint32 gasPerByte = _price.gasPerByte;\\n        defaultModelPrice[chainId] = Price(priceRatio, gasPriceInUnit, gasPerByte);\\n    }\\n\\n    // For optimism l1 gas price lookup\\n    function _getL1LookupId(uint16 _l2ChainId) internal pure returns (uint16) {\\n        if (_l2ChainId == 111) {\\n            return 101;\\n        } else if (_l2ChainId == 10132) {\\n            return 10121; // ethereum-goerli\\n        } else if (_l2ChainId == 20132) {\\n            return 20121; // ethereum-goerli\\n        } else {\\n            revert(\\\"PriceFeed: unknown l2 chain id\\\");\\n        }\\n    }\\n\\n    // ============================ View ==========================================\\n\\n    function getPrice(uint16 _dstChainId) external view override returns (Price memory price) {\\n        price = defaultModelPrice[_dstChainId];\\n    }\\n\\n    function getPriceRatioDenominator() external view override returns (uint128) {\\n        return PRICE_RATIO_DENOMINATOR;\\n    }\\n\\n    function estimateFeeByChain(\\n        uint16 _dstChainId,\\n        uint _callDataSize,\\n        uint _gas\\n    ) external view override returns (uint fee, uint128 priceRatio) {\\n        if (_dstChainId == 110 || _dstChainId == 10143 || _dstChainId == 20143) {\\n            return estimateFeeWithArbitrumModel(_dstChainId, _callDataSize, _gas);\\n        } else if (_dstChainId == 111 || _dstChainId == 10132 || _dstChainId == 20132) {\\n            return estimateFeeWithOptimismModel(_dstChainId, _callDataSize, _gas);\\n        } else {\\n            return estimateFeeWithDefaultModel(_dstChainId, _callDataSize, _gas);\\n        }\\n    }\\n\\n    function estimateFeeWithDefaultModel(\\n        uint16 _dstChainId,\\n        uint _callDataSize,\\n        uint _gas\\n    ) public view returns (uint fee, uint128 priceRatio) {\\n        Price storage remotePrice = defaultModelPrice[_dstChainId];\\n\\n        // assuming the _gas includes (1) the 21,000 overhead and (2) not the calldata gas\\n        uint gasForCallData = _callDataSize.mul(remotePrice.gasPerByte);\\n        uint remoteFee = (gasForCallData.add(_gas)).mul(remotePrice.gasPriceInUnit);\\n        return ((remoteFee.mul(remotePrice.priceRatio)).div(PRICE_RATIO_DENOMINATOR), remotePrice.priceRatio);\\n    }\\n\\n    function estimateFeeWithOptimismModel(\\n        uint16 _dstChainId,\\n        uint _callDataSize,\\n        uint _gas\\n    ) public view returns (uint fee, uint128 priceRatio) {\\n        uint16 ethereumId = _getL1LookupId(_dstChainId);\\n\\n        // L1 fee\\n        Price storage ethereumPrice = defaultModelPrice[ethereumId];\\n        uint gasForL1CallData = _callDataSize.mul(ethereumPrice.gasPerByte).add(3188); // 2100 + 68 * 16\\n        uint l1Fee = gasForL1CallData.mul(ethereumPrice.gasPriceInUnit);\\n\\n        // L2 fee\\n        Price storage optimismPrice = defaultModelPrice[_dstChainId];\\n        uint gasForL2CallData = _callDataSize.mul(optimismPrice.gasPerByte);\\n        uint l2Fee = (gasForL2CallData.add(_gas)).mul(optimismPrice.gasPriceInUnit);\\n\\n        uint l1FeeInSrcPrice = l1Fee.mul(ethereumPrice.priceRatio).div(PRICE_RATIO_DENOMINATOR);\\n        uint l2FeeInSrcPrice = l2Fee.mul(optimismPrice.priceRatio).div(PRICE_RATIO_DENOMINATOR);\\n        uint gasFee = l1FeeInSrcPrice.add(l2FeeInSrcPrice);\\n        return (gasFee, optimismPrice.priceRatio);\\n    }\\n\\n    function estimateFeeWithArbitrumModel(\\n        uint16 _dstChainId,\\n        uint _callDataSize,\\n        uint _gas\\n    ) public view returns (uint fee, uint128 priceRatio) {\\n        Price storage arbitrumPrice = defaultModelPrice[_dstChainId];\\n\\n        // L1 fee\\n        uint gasForL1CallData = _callDataSize.mul(ARBITRUM_COMPRESSION_PERCENT).div(100).mul(\\n            arbitrumPriceExt.gasPerL1CallDataByte\\n        );\\n        // L2 Fee\\n        uint gasForL2CallData = _callDataSize.mul(arbitrumPrice.gasPerByte);\\n        uint gasFee = (_gas.add(arbitrumPriceExt.gasPerL2Tx).add(gasForL1CallData).add(gasForL2CallData)).mul(\\n            arbitrumPrice.gasPriceInUnit\\n        );\\n\\n        return ((gasFee.mul(arbitrumPrice.priceRatio)).div(PRICE_RATIO_DENOMINATOR), arbitrumPrice.priceRatio);\\n    }\\n}\\n\",\"keccak256\":\"0x7154927cf3bc0148f4e27ce0ad3401358d42e350fa0cd1a227e88b42d740c781\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\ninterface ILayerZeroPriceFeed {\\n    /**\\n     * @dev\\n     * priceRatio: (USD price of 1 unit of remote native token in unit of local native token) * PRICE_RATIO_DENOMINATOR\\n     */\\n\\n    struct Price {\\n        uint128 priceRatio; // float value * 10 ^ 10, decimal awared. for aptos to evm, the basis would be (10^18 / 10^8) * 10 ^10 = 10 ^ 20.\\n        uint64 gasPriceInUnit; // for evm, it is in wei, for aptos, it is in octas.\\n        uint32 gasPerByte;\\n    }\\n\\n    struct UpdatePrice {\\n        uint16 chainId;\\n        Price price;\\n    }\\n\\n    /**\\n     * @dev\\n     *    ArbGasInfo.go:GetPricesInArbGas\\n     *\\n     */\\n    struct ArbitrumPriceExt {\\n        uint64 gasPerL2Tx; // L2 overhead\\n        uint32 gasPerL1CallDataByte;\\n    }\\n\\n    struct UpdatePriceExt {\\n        uint16 chainId;\\n        Price price;\\n        ArbitrumPriceExt extend;\\n    }\\n\\n    function getPrice(uint16 _dstChainId) external view returns (Price memory);\\n\\n    function getPriceRatioDenominator() external view returns (uint128);\\n\\n    function estimateFeeByChain(\\n        uint16 _dstChainId,\\n        uint _callDataSize,\\n        uint _gas\\n    ) external view returns (uint fee, uint128 priceRatio);\\n\\n    function nativeTokenPriceUSD() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0x4f339e20ed31d0d8ee7426bb2bd6fe6d5fa5ee3282af2a94438f6d06bd10fae1\",\"license\":\"BUSL-1.1\"},\"hardhat-deploy/solc_0.7/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x760a00cd889372a2358732403723d8a13cb8b02bb82450a9bf5488177828aa79\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506118ca806100206000396000f3fe608060405234801561001057600080fd5b506004361061017d5760003560e01c80638da5cb5b116100e3578063cd68b79b1161008c578063e15d16e811610066578063e15d16e814610310578063f2fde38b14610323578063ff37b496146103365761017d565b8063cd68b79b146102d5578063d350ad25146102dd578063e0ad121a146102f05761017d565b8063ab1518ab116100bd578063ab1518ab146102a7578063c1840327146102ba578063c4d66de8146102c25761017d565b80638da5cb5b146102685780638f7002d21461027d57806392807f581461029f5761017d565b806352a7251011610145578063715018a61161011f578063715018a61461021f5780637bc3c9ab146102275780638ca2fb08146102485761017d565b806352a72510146101e65780635d6d7ccb146101f9578063711746e21461020c5761017d565b806315527af6146101825780631824a46b146101975780632f7cb0b41461019f57806336a5beba146101b25780633c04741e146101d1575b600080fd5b61019561019036600461150f565b610349565b005b61019561045c565b6101956101ad366004611642565b6104eb565b6101ba61057e565b6040516101c89291906117ff565b60405180910390f35b6101d961059d565b6040516101c891906117a3565b6101956101f43660046114d5565b6105ac565b610195610207366004611642565b61064b565b61019561021a36600461157f565b6106b3565b610195610735565b61023a610235366004611676565b6107f3565b6040516101c89291906117e8565b61025b6102563660046114b4565b610882565b6040516101c891906116f0565b610270610897565b6040516101c891906116dc565b61029061028b36600461165c565b6108a6565b6040516101c8939291906117b7565b6101d96108e2565b61023a6102b5366004611676565b6108f1565b6101d9610a4c565b6101956102d03660046114b4565b610a5b565b6101d9610bb6565b6101956102eb366004611642565b610bcc565b6103036102fe36600461165c565b610c62565b6040516101c89190611769565b61023a61031e366004611676565b610cc7565b6101956103313660046114b4565b610d63565b61023a610344366004611676565b610e78565b33610352610897565b6001600160a01b031614610398573360009081526066602052604090205460ff166103985760405162461bcd60e51b815260040161038f906116fb565b60405180910390fd5b60005b8181101561045757368383838181106103b057fe5b60c0029190910191506103e290506103cb602083018361165c565b6103dd368490038401602085016115dd565b610f6b565b60006103f460a08301608084016116c2565b9050600061040860c0840160a085016116a8565b6068805463ffffffff909216600160401b026bffffffff00000000000000001967ffffffffffffffff90951667ffffffffffffffff19909316929092179390931617909155505060010161039b565b505050565b6000610466611018565b90506001600160a01b0381166104a5576001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103556104ba565b336001600160a01b038216146104ba57600080fd5b50606580546402540be4006001600160801b0319909116179055606980546001600160801b0316602f60801b179055565b6104f361103d565b6001600160a01b0316610504610897565b6001600160a01b03161461055f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b606980546001600160801b03928316600160801b029216919091179055565b60685467ffffffffffffffff811690600160401b900463ffffffff1682565b6065546001600160801b031681565b6105b461103d565b6001600160a01b03166105c5610897565b6001600160a01b031614610620576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03919091166000908152606660205260409020805460ff1916911515919091179055565b33610654610897565b6001600160a01b031614610691573360009081526066602052604090205460ff166106915760405162461bcd60e51b815260040161038f906116fb565b606980546001600160801b0319166001600160801b0392909216919091179055565b336106bc610897565b6001600160a01b0316146106f9573360009081526066602052604090205460ff166106f95760405162461bcd60e51b815260040161038f906116fb565b60005b81811015610457573683838381811061071157fe5b60800291909101915061072c90506103cb602083018361165c565b506001016106fc565b61073d61103d565b6001600160a01b031661074e610897565b6001600160a01b0316146107a9576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6000808461ffff16606e148061080e57508461ffff1661279f145b8061081e57508461ffff16614eaf145b156108375761082e858585610e78565b9150915061087a565b8461ffff16606f148061084f57508461ffff16612794145b8061085f57508461ffff16614ea4145b1561086f5761082e8585856108f1565b61082e858585610cc7565b935093915050565b60666020526000908152604090205460ff1681565b6033546001600160a01b031690565b6067602052600090815260409020546001600160801b03811690600160801b810467ffffffffffffffff1690600160c01b900463ffffffff1683565b6069546001600160801b031681565b60008060006108ff86611041565b61ffff8116600090815260676020526040812080549293509161094290610c749061093c908a9063ffffffff600160c01b9091048116906110a316565b90611105565b8254909150600090610966908390600160801b900467ffffffffffffffff166110a3565b61ffff8a16600090815260676020526040812080549293509161099b908b9063ffffffff600160c01b9091048116906110a316565b82549091506000906109c890600160801b900467ffffffffffffffff166109c2848d611105565b906110a3565b60655487549192506000916109f5916001600160801b03908116916109ef918991166110a3565b9061115f565b6065548554919250600091610a1c916001600160801b03908116916109ef918791166110a3565b90506000610a2a8383611105565b9554959f6001600160801b039096169e50949c50505050505050505050505050565b6065546001600160801b031690565b6000610a65611018565b90506001600160a01b038116610aa4576001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355610ab9565b336001600160a01b03821614610ab957600080fd5b600054610100900460ff1680610ad25750610ad26111c6565b80610ae0575060005460ff16155b610b1b5760405162461bcd60e51b815260040180806020018281038252602e815260200180611846602e913960400191505060405180910390fd5b600054610100900460ff16158015610b46576000805460ff1961ff0019909116610100171660011790555b610b4e6111d7565b6001600160a01b0383166000908152606660205260409020805460ff19166001179055606580546001600160801b0319166402540be40017905560698054602f60801b6001600160801b03919091161790558015610457576000805461ff0019169055505050565b606954600160801b90046001600160801b031681565b610bd461103d565b6001600160a01b0316610be5610897565b6001600160a01b031614610c40576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b606580546001600160801b0319166001600160801b0392909216919091179055565b610c6a611428565b5061ffff16600090815260676020908152604091829020825160608101845290546001600160801b0381168252600160801b810467ffffffffffffffff1692820192909252600160c01b90910463ffffffff169181019190915290565b61ffff8316600090815260676020526040812080548291908290610cfd90879063ffffffff600160c01b9091048116906110a316565b8254909150600090610d2490600160801b900467ffffffffffffffff166109c28489611105565b6065548454919250610d48916001600160801b03918216916109ef918591166110a3565b925492986001600160801b0390931697509195505050505050565b610d6b61103d565b6001600160a01b0316610d7c610897565b6001600160a01b031614610dd7576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610e1c5760405162461bcd60e51b81526004018080602001828103825260268152602001806118206026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b61ffff831660009081526067602052604081206068546069548392918391610ece91600160401b900463ffffffff908116916109c2916064916109ef918c91600160801b90046001600160801b0316906110a316565b8254909150600090610ef290889063ffffffff600160c01b9091048116906110a316565b8354606854919250600091610f2b9167ffffffffffffffff600160801b9091048116916109c291869161093c91899183918f9116611105565b6065548554919250610f4f916001600160801b03918216916109ef918591166110a3565b935493996001600160801b039094169850929650505050505050565b805160208083015160409384015184516060810186526001600160801b03948516815267ffffffffffffffff92831681850190815263ffffffff92831682880190815261ffff90981660009081526067909552959093209251835495519651909116600160c01b0263ffffffff60c01b1996909216600160801b0267ffffffffffffffff60801b19919094166001600160801b031990951694909417939093169190911792909216179055565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b3390565b60008161ffff16606f14156110585750606561109e565b8161ffff16612794141561106f575061278961109e565b8161ffff16614ea414156110865750614e9961109e565b60405162461bcd60e51b815260040161038f90611732565b919050565b6000826110b2575060006110ff565b828202828482816110bf57fe5b04146110fc5760405162461bcd60e51b81526004018080602001828103825260218152602001806118746021913960400191505060405180910390fd5b90505b92915050565b6000828201838110156110fc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008082116111b5576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816111be57fe5b049392505050565b60006111d130611289565b15905090565b600054610100900460ff16806111f057506111f06111c6565b806111fe575060005460ff16155b6112395760405162461bcd60e51b815260040180806020018281038252602e815260200180611846602e913960400191505060405180910390fd5b600054610100900460ff16158015611264576000805460ff1961ff0019909116610100171660011790555b61126c61128f565b61127461132f565b8015611286576000805461ff00191690555b50565b3b151590565b600054610100900460ff16806112a857506112a86111c6565b806112b6575060005460ff16155b6112f15760405162461bcd60e51b815260040180806020018281038252602e815260200180611846602e913960400191505060405180910390fd5b600054610100900460ff16158015611274576000805460ff1961ff0019909116610100171660011790558015611286576000805461ff001916905550565b600054610100900460ff168061134857506113486111c6565b80611356575060005460ff16155b6113915760405162461bcd60e51b815260040180806020018281038252602e815260200180611846602e913960400191505060405180910390fd5b600054610100900460ff161580156113bc576000805460ff1961ff0019909116610100171660011790555b60006113c661103d565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611286576000805461ff001916905550565b604080516060810182526000808252602082018190529181019190915290565b80356001600160a01b038116811461109e57600080fd5b80356001600160801b038116811461109e57600080fd5b803561ffff8116811461109e57600080fd5b803563ffffffff8116811461109e57600080fd5b803567ffffffffffffffff8116811461109e57600080fd5b6000602082840312156114c5578081fd5b6114ce82611448565b9392505050565b600080604083850312156114e7578081fd5b6114f083611448565b915060208301358015158114611504578182fd5b809150509250929050565b60008060208385031215611521578182fd5b823567ffffffffffffffff80821115611538578384fd5b818501915085601f83011261154b578384fd5b813581811115611559578485fd5b86602060c08302850101111561156d578485fd5b60209290920196919550909350505050565b60008060208385031215611591578182fd5b823567ffffffffffffffff808211156115a8578384fd5b818501915085601f8301126115bb578384fd5b8135818111156115c9578485fd5b86602060808302850101111561156d578485fd5b6000606082840312156115ee578081fd5b6040516060810181811067ffffffffffffffff8211171561160b57fe5b6040526116178361145f565b81526116256020840161149c565b602082015261163660408401611488565b60408201529392505050565b600060208284031215611653578081fd5b6114ce8261145f565b60006020828403121561166d578081fd5b6114ce82611476565b60008060006060848603121561168a578081fd5b61169384611476565b95602085013595506040909401359392505050565b6000602082840312156116b9578081fd5b6114ce82611488565b6000602082840312156116d3578081fd5b6114ce8261149c565b6001600160a01b0391909116815260200190565b901515815260200190565b6020808252601c908201527f5072696365466565643a206e6f74207072696365207570646174657200000000604082015260600190565b6020808252601e908201527f5072696365466565643a20756e6b6e6f776e206c3220636861696e2069640000604082015260600190565b81516001600160801b0316815260208083015167ffffffffffffffff169082015260409182015163ffffffff169181019190915260600190565b6001600160801b0391909116815260200190565b6001600160801b0393909316835267ffffffffffffffff91909116602083015263ffffffff16604082015260600190565b9182526001600160801b0316602082015260400190565b67ffffffffffffffff92909216825263ffffffff1660208201526040019056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212208e3824c845c3f009e7b7a0dcd086b356fe766d91ed92b50a449c4facbca2218264736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061017d5760003560e01c80638da5cb5b116100e3578063cd68b79b1161008c578063e15d16e811610066578063e15d16e814610310578063f2fde38b14610323578063ff37b496146103365761017d565b8063cd68b79b146102d5578063d350ad25146102dd578063e0ad121a146102f05761017d565b8063ab1518ab116100bd578063ab1518ab146102a7578063c1840327146102ba578063c4d66de8146102c25761017d565b80638da5cb5b146102685780638f7002d21461027d57806392807f581461029f5761017d565b806352a7251011610145578063715018a61161011f578063715018a61461021f5780637bc3c9ab146102275780638ca2fb08146102485761017d565b806352a72510146101e65780635d6d7ccb146101f9578063711746e21461020c5761017d565b806315527af6146101825780631824a46b146101975780632f7cb0b41461019f57806336a5beba146101b25780633c04741e146101d1575b600080fd5b61019561019036600461150f565b610349565b005b61019561045c565b6101956101ad366004611642565b6104eb565b6101ba61057e565b6040516101c89291906117ff565b60405180910390f35b6101d961059d565b6040516101c891906117a3565b6101956101f43660046114d5565b6105ac565b610195610207366004611642565b61064b565b61019561021a36600461157f565b6106b3565b610195610735565b61023a610235366004611676565b6107f3565b6040516101c89291906117e8565b61025b6102563660046114b4565b610882565b6040516101c891906116f0565b610270610897565b6040516101c891906116dc565b61029061028b36600461165c565b6108a6565b6040516101c8939291906117b7565b6101d96108e2565b61023a6102b5366004611676565b6108f1565b6101d9610a4c565b6101956102d03660046114b4565b610a5b565b6101d9610bb6565b6101956102eb366004611642565b610bcc565b6103036102fe36600461165c565b610c62565b6040516101c89190611769565b61023a61031e366004611676565b610cc7565b6101956103313660046114b4565b610d63565b61023a610344366004611676565b610e78565b33610352610897565b6001600160a01b031614610398573360009081526066602052604090205460ff166103985760405162461bcd60e51b815260040161038f906116fb565b60405180910390fd5b60005b8181101561045757368383838181106103b057fe5b60c0029190910191506103e290506103cb602083018361165c565b6103dd368490038401602085016115dd565b610f6b565b60006103f460a08301608084016116c2565b9050600061040860c0840160a085016116a8565b6068805463ffffffff909216600160401b026bffffffff00000000000000001967ffffffffffffffff90951667ffffffffffffffff19909316929092179390931617909155505060010161039b565b505050565b6000610466611018565b90506001600160a01b0381166104a5576001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103556104ba565b336001600160a01b038216146104ba57600080fd5b50606580546402540be4006001600160801b0319909116179055606980546001600160801b0316602f60801b179055565b6104f361103d565b6001600160a01b0316610504610897565b6001600160a01b03161461055f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b606980546001600160801b03928316600160801b029216919091179055565b60685467ffffffffffffffff811690600160401b900463ffffffff1682565b6065546001600160801b031681565b6105b461103d565b6001600160a01b03166105c5610897565b6001600160a01b031614610620576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03919091166000908152606660205260409020805460ff1916911515919091179055565b33610654610897565b6001600160a01b031614610691573360009081526066602052604090205460ff166106915760405162461bcd60e51b815260040161038f906116fb565b606980546001600160801b0319166001600160801b0392909216919091179055565b336106bc610897565b6001600160a01b0316146106f9573360009081526066602052604090205460ff166106f95760405162461bcd60e51b815260040161038f906116fb565b60005b81811015610457573683838381811061071157fe5b60800291909101915061072c90506103cb602083018361165c565b506001016106fc565b61073d61103d565b6001600160a01b031661074e610897565b6001600160a01b0316146107a9576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6000808461ffff16606e148061080e57508461ffff1661279f145b8061081e57508461ffff16614eaf145b156108375761082e858585610e78565b9150915061087a565b8461ffff16606f148061084f57508461ffff16612794145b8061085f57508461ffff16614ea4145b1561086f5761082e8585856108f1565b61082e858585610cc7565b935093915050565b60666020526000908152604090205460ff1681565b6033546001600160a01b031690565b6067602052600090815260409020546001600160801b03811690600160801b810467ffffffffffffffff1690600160c01b900463ffffffff1683565b6069546001600160801b031681565b60008060006108ff86611041565b61ffff8116600090815260676020526040812080549293509161094290610c749061093c908a9063ffffffff600160c01b9091048116906110a316565b90611105565b8254909150600090610966908390600160801b900467ffffffffffffffff166110a3565b61ffff8a16600090815260676020526040812080549293509161099b908b9063ffffffff600160c01b9091048116906110a316565b82549091506000906109c890600160801b900467ffffffffffffffff166109c2848d611105565b906110a3565b60655487549192506000916109f5916001600160801b03908116916109ef918991166110a3565b9061115f565b6065548554919250600091610a1c916001600160801b03908116916109ef918791166110a3565b90506000610a2a8383611105565b9554959f6001600160801b039096169e50949c50505050505050505050505050565b6065546001600160801b031690565b6000610a65611018565b90506001600160a01b038116610aa4576001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355610ab9565b336001600160a01b03821614610ab957600080fd5b600054610100900460ff1680610ad25750610ad26111c6565b80610ae0575060005460ff16155b610b1b5760405162461bcd60e51b815260040180806020018281038252602e815260200180611846602e913960400191505060405180910390fd5b600054610100900460ff16158015610b46576000805460ff1961ff0019909116610100171660011790555b610b4e6111d7565b6001600160a01b0383166000908152606660205260409020805460ff19166001179055606580546001600160801b0319166402540be40017905560698054602f60801b6001600160801b03919091161790558015610457576000805461ff0019169055505050565b606954600160801b90046001600160801b031681565b610bd461103d565b6001600160a01b0316610be5610897565b6001600160a01b031614610c40576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b606580546001600160801b0319166001600160801b0392909216919091179055565b610c6a611428565b5061ffff16600090815260676020908152604091829020825160608101845290546001600160801b0381168252600160801b810467ffffffffffffffff1692820192909252600160c01b90910463ffffffff169181019190915290565b61ffff8316600090815260676020526040812080548291908290610cfd90879063ffffffff600160c01b9091048116906110a316565b8254909150600090610d2490600160801b900467ffffffffffffffff166109c28489611105565b6065548454919250610d48916001600160801b03918216916109ef918591166110a3565b925492986001600160801b0390931697509195505050505050565b610d6b61103d565b6001600160a01b0316610d7c610897565b6001600160a01b031614610dd7576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610e1c5760405162461bcd60e51b81526004018080602001828103825260268152602001806118206026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b61ffff831660009081526067602052604081206068546069548392918391610ece91600160401b900463ffffffff908116916109c2916064916109ef918c91600160801b90046001600160801b0316906110a316565b8254909150600090610ef290889063ffffffff600160c01b9091048116906110a316565b8354606854919250600091610f2b9167ffffffffffffffff600160801b9091048116916109c291869161093c91899183918f9116611105565b6065548554919250610f4f916001600160801b03918216916109ef918591166110a3565b935493996001600160801b039094169850929650505050505050565b805160208083015160409384015184516060810186526001600160801b03948516815267ffffffffffffffff92831681850190815263ffffffff92831682880190815261ffff90981660009081526067909552959093209251835495519651909116600160c01b0263ffffffff60c01b1996909216600160801b0267ffffffffffffffff60801b19919094166001600160801b031990951694909417939093169190911792909216179055565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b3390565b60008161ffff16606f14156110585750606561109e565b8161ffff16612794141561106f575061278961109e565b8161ffff16614ea414156110865750614e9961109e565b60405162461bcd60e51b815260040161038f90611732565b919050565b6000826110b2575060006110ff565b828202828482816110bf57fe5b04146110fc5760405162461bcd60e51b81526004018080602001828103825260218152602001806118746021913960400191505060405180910390fd5b90505b92915050565b6000828201838110156110fc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008082116111b5576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816111be57fe5b049392505050565b60006111d130611289565b15905090565b600054610100900460ff16806111f057506111f06111c6565b806111fe575060005460ff16155b6112395760405162461bcd60e51b815260040180806020018281038252602e815260200180611846602e913960400191505060405180910390fd5b600054610100900460ff16158015611264576000805460ff1961ff0019909116610100171660011790555b61126c61128f565b61127461132f565b8015611286576000805461ff00191690555b50565b3b151590565b600054610100900460ff16806112a857506112a86111c6565b806112b6575060005460ff16155b6112f15760405162461bcd60e51b815260040180806020018281038252602e815260200180611846602e913960400191505060405180910390fd5b600054610100900460ff16158015611274576000805460ff1961ff0019909116610100171660011790558015611286576000805461ff001916905550565b600054610100900460ff168061134857506113486111c6565b80611356575060005460ff16155b6113915760405162461bcd60e51b815260040180806020018281038252602e815260200180611846602e913960400191505060405180910390fd5b600054610100900460ff161580156113bc576000805460ff1961ff0019909116610100171660011790555b60006113c661103d565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611286576000805461ff001916905550565b604080516060810182526000808252602082018190529181019190915290565b80356001600160a01b038116811461109e57600080fd5b80356001600160801b038116811461109e57600080fd5b803561ffff8116811461109e57600080fd5b803563ffffffff8116811461109e57600080fd5b803567ffffffffffffffff8116811461109e57600080fd5b6000602082840312156114c5578081fd5b6114ce82611448565b9392505050565b600080604083850312156114e7578081fd5b6114f083611448565b915060208301358015158114611504578182fd5b809150509250929050565b60008060208385031215611521578182fd5b823567ffffffffffffffff80821115611538578384fd5b818501915085601f83011261154b578384fd5b813581811115611559578485fd5b86602060c08302850101111561156d578485fd5b60209290920196919550909350505050565b60008060208385031215611591578182fd5b823567ffffffffffffffff808211156115a8578384fd5b818501915085601f8301126115bb578384fd5b8135818111156115c9578485fd5b86602060808302850101111561156d578485fd5b6000606082840312156115ee578081fd5b6040516060810181811067ffffffffffffffff8211171561160b57fe5b6040526116178361145f565b81526116256020840161149c565b602082015261163660408401611488565b60408201529392505050565b600060208284031215611653578081fd5b6114ce8261145f565b60006020828403121561166d578081fd5b6114ce82611476565b60008060006060848603121561168a578081fd5b61169384611476565b95602085013595506040909401359392505050565b6000602082840312156116b9578081fd5b6114ce82611488565b6000602082840312156116d3578081fd5b6114ce8261149c565b6001600160a01b0391909116815260200190565b901515815260200190565b6020808252601c908201527f5072696365466565643a206e6f74207072696365207570646174657200000000604082015260600190565b6020808252601e908201527f5072696365466565643a20756e6b6e6f776e206c3220636861696e2069640000604082015260600190565b81516001600160801b0316815260208083015167ffffffffffffffff169082015260409182015163ffffffff169181019190915260600190565b6001600160801b0391909116815260200190565b6001600160801b0393909316835267ffffffffffffffff91909116602083015263ffffffff16604082015260600190565b9182526001600160801b0316602082015260400190565b67ffffffffffffffff92909216825263ffffffff1660208201526040019056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212208e3824c845c3f009e7b7a0dcd086b356fe766d91ed92b50a449c4facbca2218264736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 137,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 140,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 484,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4869,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "PRICE_RATIO_DENOMINATOR",
        "offset": 0,
        "slot": "101",
        "type": "t_uint128"
      },
      {
        "astId": 4873,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "priceUpdater",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4877,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "defaultModelPrice",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint16,t_struct(Price)16701_storage)"
      },
      {
        "astId": 4879,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "arbitrumPriceExt",
        "offset": 0,
        "slot": "104",
        "type": "t_struct(ArbitrumPriceExt)16711_storage"
      },
      {
        "astId": 4882,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "nativeTokenPriceUSD",
        "offset": 0,
        "slot": "105",
        "type": "t_uint128"
      },
      {
        "astId": 4884,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "ARBITRUM_COMPRESSION_PERCENT",
        "offset": 16,
        "slot": "105",
        "type": "t_uint128"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint16,t_struct(Price)16701_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct ILayerZeroPriceFeed.Price)",
        "numberOfBytes": "32",
        "value": "t_struct(Price)16701_storage"
      },
      "t_struct(ArbitrumPriceExt)16711_storage": {
        "encoding": "inplace",
        "label": "struct ILayerZeroPriceFeed.ArbitrumPriceExt",
        "members": [
          {
            "astId": 16708,
            "contract": "contracts/PriceFeed.sol:PriceFeed",
            "label": "gasPerL2Tx",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 16710,
            "contract": "contracts/PriceFeed.sol:PriceFeed",
            "label": "gasPerL1CallDataByte",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Price)16701_storage": {
        "encoding": "inplace",
        "label": "struct ILayerZeroPriceFeed.Price",
        "members": [
          {
            "astId": 16696,
            "contract": "contracts/PriceFeed.sol:PriceFeed",
            "label": "priceRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 16698,
            "contract": "contracts/PriceFeed.sol:PriceFeed",
            "label": "gasPriceInUnit",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 16700,
            "contract": "contracts/PriceFeed.sol:PriceFeed",
            "label": "gasPerByte",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
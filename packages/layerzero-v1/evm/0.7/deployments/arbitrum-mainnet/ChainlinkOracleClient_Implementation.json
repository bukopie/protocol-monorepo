{
  "address": "0x9aD0958902A56729f139805C7378Ff13E88eCcA7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "result",
          "type": "bytes32"
        }
      ],
      "name": "Result",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawTokens",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "LINK",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbSys",
      "outputs": [
        {
          "internalType": "contract ArbSys",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calledInBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "chainPriceLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "deliveryAddressLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpointId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_result",
          "type": "bytes32"
        }
      ],
      "name": "fulfillNotificationOfBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockForOracleJob",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_destinationChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_outboundProofType",
          "type": "uint16"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_linkAddress",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_endpointId",
          "type": "uint16"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "int2str",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relayerAddress",
          "type": "address"
        }
      ],
      "name": "isApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isArbitrumChain",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "jobs",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calledInBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_outboundProofType",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "_outboundBlockConfirmations",
          "type": "uint64"
        }
      ],
      "name": "notifyOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_outboundProofType",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "_outboundBlockConfirmations",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "targetBlockNum",
          "type": "uint256"
        }
      ],
      "name": "notifyOracleOfBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approve",
          "type": "bool"
        }
      ],
      "name": "setApprovedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_deliveryAddress",
          "type": "address"
        }
      ],
      "name": "setDeliveryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_endpointId",
          "type": "uint16"
        }
      ],
      "name": "setEndpointId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chain",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setJob",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_destinationChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_outboundProofType",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ulnAddress",
          "type": "address"
        }
      ],
      "name": "setUln",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "toHexString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uln",
      "outputs": [
        {
          "internalType": "contract ILayerZeroUltraLightNodeV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_blockHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_confirmations",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "updateHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawOracleQuotedFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x919954788d11dfb2081e4141f1c46a39f8ee1448a1c5397721cc381ba2f21801",
  "receipt": {
    "to": null,
    "from": "0x9F403140Bc0574D7d36eA472b82DAa1Bbd4eF327",
    "contractAddress": "0x9aD0958902A56729f139805C7378Ff13E88eCcA7",
    "transactionIndex": 1,
    "gasUsed": "8056771",
    "logsBloom": "0x
    "blockHash": "0x5de1873e280761c87f525cc13f5e3b9b94cca44cf2ddfeceaf2d31996d8c197b",
    "transactionHash": "0x919954788d11dfb2081e4141f1c46a39f8ee1448a1c5397721cc381ba2f21801",
    "logs": [],
    "blockNumber": 25358689,
    "cumulativeGasUsed": "8056771",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "6b7ae16ff2b4aed952b186ab68462c3d",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"name\":\"Result\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawTokens\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"LINK\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbSys\",\"outputs\":[{\"internalType\":\"contract ArbSys\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calledInBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"chainPriceLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"deliveryAddressLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpointId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_result\",\"type\":\"bytes32\"}],\"name\":\"fulfillNotificationOfBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockForOracleJob\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_destinationChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_outboundProofType\",\"type\":\"uint16\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_linkAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_endpointId\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"int2str\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayerAddress\",\"type\":\"address\"}],\"name\":\"isApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isArbitrumChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"jobs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calledInBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_outboundProofType\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"_outboundBlockConfirmations\",\"type\":\"uint64\"}],\"name\":\"notifyOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_outboundProofType\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"_outboundBlockConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"targetBlockNum\",\"type\":\"uint256\"}],\"name\":\"notifyOracleOfBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approve\",\"type\":\"bool\"}],\"name\":\"setApprovedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_deliveryAddress\",\"type\":\"address\"}],\"name\":\"setDeliveryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_endpointId\",\"type\":\"uint16\"}],\"name\":\"setEndpointId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_destinationChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_outboundProofType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ulnAddress\",\"type\":\"address\"}],\"name\":\"setUln\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"toHexString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uln\",\"outputs\":[{\"internalType\":\"contract ILayerZeroUltraLightNodeV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_confirmations\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"updateHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawOracleQuotedFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"int2str(uint256)\":{\"details\":\"Converts a `uint256` to its ASCII `string` decimal representation.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"toHexString(uint256)\":{\"details\":\"Converts a `uint256` to its ASCII `string` hexadecimal representation.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chainlink/ChainlinkOracleClient.sol\":\"ChainlinkOracleClient\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":30000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.7/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport { CBORChainlink } from \\\"./vendor/CBORChainlink.sol\\\";\\nimport { BufferChainlink } from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  )\\n    internal\\n    pure\\n    returns (\\n      Chainlink.Request memory\\n    )\\n  {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(\\n    Request memory self,\\n    bytes memory data\\n  )\\n    internal\\n    pure\\n  {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x4ab273e532f6be401324ca7b6357a6fdfec7c4022eaa2436a93c3005759abf01\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport { ENSResolver as ENSResolver_Chainlink } from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\ncontract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 constant internal LINK_DIVISIBILITY = 10**18;\\n  uint256 constant private AMOUNT_OVERRIDE = 0;\\n  address constant private SENDER_OVERRIDE = address(0);\\n  uint256 constant private ORACLE_ARGS_VERSION = 1;\\n  uint256 constant private OPERATOR_ARGS_VERSION = 2;\\n  bytes32 constant private ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 constant private ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address constant private LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private ens;\\n  bytes32 private ensNode;\\n  LinkTokenInterface private link;\\n  OperatorInterface private oracle;\\n  uint256 private requestCount = 1;\\n  mapping(bytes32 => address) private pendingRequests;\\n\\n  event ChainlinkRequested(\\n    bytes32 indexed id\\n  );\\n  event ChainlinkFulfilled(\\n    bytes32 indexed id\\n  );\\n  event ChainlinkCancelled(\\n    bytes32 indexed id\\n  );\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddress The callback address that the response will be sent to\\n   * @param callbackFunctionSignature The callback function signature to use for the callback address\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddress,\\n    bytes4 callbackFunctionSignature\\n  )\\n    internal\\n    pure\\n    returns (\\n      Chainlink.Request memory\\n    )\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddress, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  )\\n    internal\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return sendChainlinkRequestTo(address(oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    return rawRequest(oracleAddress, req, payment, ORACLE_ARGS_VERSION, oracle.oracleRequest.selector);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `requestOracleDataFrom` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function requestOracleData(\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  )\\n    internal\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return requestOracleDataFrom(address(oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function requestOracleDataFrom(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    return rawRequest(oracleAddress, req, payment, OPERATOR_ARGS_VERSION, oracle.requestOracleData.selector);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @param argsVersion The version of data support (single word, multi word)\\n   * @return requestId The request ID\\n   */\\n  function rawRequest(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment,\\n    uint256 argsVersion,\\n    bytes4 funcSelector\\n  )\\n    private\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    requestId = keccak256(abi.encodePacked(this, requestCount));\\n    req.nonce = requestCount;\\n    pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    bytes memory encodedData = abi.encodeWithSelector(\\n      funcSelector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackAddress,\\n      req.callbackFunctionId,\\n      req.nonce,\\n      argsVersion,\\n      req.buf.buf);\\n    require(link.transferAndCall(oracleAddress, payment, encodedData), \\\"unable to transferAndCall to oracle\\\");\\n    requestCount += 1;\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  )\\n    internal\\n  {\\n    OperatorInterface requested = OperatorInterface(pendingRequests[requestId]);\\n    delete pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(\\n    address oracleAddress\\n  )\\n    internal\\n  {\\n    oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(\\n    address linkAddress\\n  )\\n    internal\\n  {\\n    link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() \\n    internal\\n  {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress()\\n    internal\\n    view\\n    returns (\\n      address\\n    )\\n  {\\n    return address(link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress()\\n    internal\\n    view\\n    returns (\\n      address\\n    )\\n  {\\n    return address(oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(\\n    address oracleAddress,\\n    bytes32 requestId\\n  )\\n    internal\\n    notPendingRequest(requestId)\\n  {\\n    pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(\\n    address ensAddress,\\n    bytes32 node\\n  )\\n    internal\\n  {\\n    ens = ENSInterface(ensAddress);\\n    ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS()\\n    internal\\n  {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(\\n    bytes32 requestId\\n  )\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n    // solhint-disable-next-line no-empty-blocks\\n  {}\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(\\n    bytes32 requestId\\n  )\\n  {\\n    require(msg.sender == pendingRequests[requestId],\\n            \\\"Source must be the oracle of the request\\\");\\n    delete pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(\\n    bytes32 requestId\\n  )\\n  {\\n    require(pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x507efc1aa7d0f902ba635c055b479dc3d748fe59ec16e30b53765a3fe0bc861f\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0x5461aa441a5578fdb7181169e0060b8cb3e7eb96441140e8353424deae730073\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface ENSInterface {\\n\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(\\n    bytes32 indexed node,\\n    bytes32 indexed label,\\n    address owner\\n  );\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(\\n    bytes32 indexed node,\\n    address owner\\n  );\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(\\n    bytes32 indexed node,\\n    address resolver\\n  );\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(\\n    bytes32 indexed node,\\n    uint64 ttl\\n  );\\n\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(\\n    bytes32 node,\\n    address resolver\\n  ) external;\\n\\n  function setOwner(\\n    bytes32 node,\\n    address owner\\n  ) external;\\n\\n  function setTTL(\\n    bytes32 node,\\n    uint64 ttl\\n  ) external;\\n\\n  function owner(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (\\n      address\\n    );\\n\\n  function resolver(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (\\n      address\\n    );\\n\\n  function ttl(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (\\n      uint64\\n    );\\n\\n}\\n\",\"keccak256\":\"0xf88323c9018ea9eb0b175aed507e06c05537d6eafb8d31b7850cf5f3b3a8f361\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\",\"keccak256\":\"0xfa5c9db0efdd0fc8659b3d973929645883282e9a3e0bd3a95e625d06eded8cbc\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\nimport \\\"./OracleInterface.sol\\\";\\n\\ninterface OperatorInterface is\\n  ChainlinkRequestInterface,\\n  OracleInterface\\n{\\n\\n  function requestOracleData(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  )\\n    external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool\\n    );\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\",\"keccak256\":\"0x120e5c9c58e4c0fac6e3ed977dd8dffe09b377bebdbdee3fd10478f9251867e2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  )\\n    external\\n    returns (\\n      bool\\n    );\\n\\n  function withdraw(\\n    address recipient,\\n    uint256 amount\\n  ) external;\\n\\n  function withdrawable()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n}\\n\",\"keccak256\":\"0xaed6dd4b2d459742adac17f25eab467d840c8c6ea9d92f07c10a2c0ab3bb9768\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface PointerInterface {\\n  \\n  function getAddress()\\n    external\\n    view\\n    returns (\\n      address\\n    );\\n}\\n\",\"keccak256\":\"0x79adfb74c71599154293d4bd301f2fb4ca50944c96643c2918e01d730eb46034\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for writing to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary BufferChainlink {\\n  /**\\n  * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n  *      a capacity. The capacity may be longer than the current value, in\\n  *      which case it can be extended without the need to allocate more memory.\\n  */\\n  struct buffer {\\n    bytes buf;\\n    uint capacity;\\n  }\\n\\n  /**\\n  * @dev Initializes a buffer with an initial capacity.\\n  * @param buf The buffer to initialize.\\n  * @param capacity The number of bytes of space to allocate the buffer.\\n  * @return The buffer, for chaining.\\n  */\\n  function init(\\n    buffer memory buf,\\n    uint capacity\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Initializes a new buffer from an existing bytes object.\\n  *      Changes to the buffer may mutate the original value.\\n  * @param b The bytes object to initialize the buffer with.\\n  * @return A new buffer.\\n  */\\n  function fromBytes(\\n    bytes memory b\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(\\n    buffer memory buf,\\n    uint capacity\\n  )\\n    private\\n    pure\\n  {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(\\n    uint a,\\n    uint b\\n  )\\n    private\\n    pure\\n    returns(\\n      uint\\n    )\\n  {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n  * @dev Sets buffer length to 0.\\n  * @param buf The buffer to truncate.\\n  * @return The original buffer, for chaining..\\n  */\\n  function truncate(\\n    buffer memory buf\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The start offset to write to.\\n  * @param data The data to append.\\n  * @param len The number of bytes to copy.\\n  * @return The original buffer, for chaining.\\n  */\\n  function write(\\n    buffer memory buf,\\n    uint off,\\n    bytes memory data,\\n    uint len\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint dest;\\n    uint src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint mask = 256 ** (32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @param len The number of bytes to copy.\\n  * @return The original buffer, for chaining.\\n  */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint len\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n  * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write the byte at.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint off,\\n    uint8 data\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function appendUint8(\\n    buffer memory buf,\\n    uint8 data\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n  * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n  *      exceed the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @param len The number of bytes to write (left-aligned).\\n  * @return The original buffer, for chaining.\\n  */\\n  function write(\\n    buffer memory buf,\\n    uint off,\\n    bytes32 data,\\n    uint len\\n  )\\n    private\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint mask = 256 ** len - 1;\\n    // Right-align data\\n    data = data >> (8 * (32 - len));\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + off + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint off,\\n    bytes20 data\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n  * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chhaining.\\n  */\\n  function appendBytes20(\\n    buffer memory buf,\\n    bytes20 data\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n  * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function appendBytes32(\\n    buffer memory buf,\\n    bytes32 data\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n  * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @param len The number of bytes to write (right-aligned).\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeInt(\\n    buffer memory buf,\\n    uint off,\\n    uint data,\\n    uint len\\n  )\\n    private\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint mask = 256 ** len - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n    * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n    * exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer.\\n    */\\n  function appendInt(\\n    buffer memory buf,\\n    uint data,\\n    uint len\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0xf8da02f65937c8e5ba0f9d6d2d3b0121b525966bc9389e733fd029114b865eb5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.19;\\n\\nimport { BufferChainlink } from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeType(\\n    BufferChainlink.buffer memory buf,\\n    uint8 major,\\n    uint value\\n  )\\n    private\\n    pure\\n  {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if(value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if(value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if(value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else if(value <= 0xFFFFFFFFFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(\\n    BufferChainlink.buffer memory buf,\\n    uint8 major\\n  )\\n    private\\n    pure\\n  {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(\\n    BufferChainlink.buffer memory buf,\\n    uint value\\n  )\\n    internal\\n    pure\\n  {\\n    encodeType(buf, MAJOR_TYPE_INT, value);\\n  }\\n\\n  function encodeInt(\\n    BufferChainlink.buffer memory buf,\\n    int value\\n  )\\n    internal\\n    pure\\n  {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else if(value >= 0) {\\n      encodeType(buf, MAJOR_TYPE_INT, uint(value));\\n    } else {\\n      encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));\\n    }\\n  }\\n\\n  function encodeBytes(\\n    BufferChainlink.buffer memory buf,\\n    bytes memory value\\n  )\\n    internal\\n    pure\\n  {\\n    encodeType(buf, MAJOR_TYPE_BYTES, value.length);\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(\\n    BufferChainlink.buffer memory buf,\\n    int value\\n  )\\n    internal\\n    pure\\n  {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint(value)));\\n  }\\n\\n  function encodeSignedBigNum(\\n    BufferChainlink.buffer memory buf,\\n    int input\\n  )\\n    internal\\n    pure\\n  {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint(-1 - input)));\\n  }\\n\\n  function encodeString(\\n    BufferChainlink.buffer memory buf,\\n    string memory value\\n  )\\n    internal\\n    pure\\n  {\\n    encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(\\n    BufferChainlink.buffer memory buf\\n  )\\n    internal\\n    pure\\n  {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(\\n    BufferChainlink.buffer memory buf\\n  )\\n    internal\\n    pure\\n  {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(\\n    BufferChainlink.buffer memory buf\\n  )\\n    internal\\n    pure\\n  {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0xe7c6e4290ac2a41a138e6bd89d89a2779f66847a5ee6fb5a6f2a3386e5ce589d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nabstract contract ENSResolver {\\n  function addr(\\n    bytes32 node\\n  )\\n    public\\n    view\\n    virtual\\n    returns (\\n      address\\n    );\\n}\\n\",\"keccak256\":\"0x4c7ac22fe48972e9c1d982e98ec3e788ec6bc63f3e38114311b974f521613d2b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xba7ba5b188c0b27489bad1efee8d8b1dcebb502785192b22e3d69824a802983d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1fd568d8b8ca285c801fbd1d3f40f848434d850a682c0273786cada3e0b84057\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1153f6dd334c01566417b8c551122450542a2b75a2bbb379d59a8c320ed6da28\",\"license\":\"MIT\"},\"contracts/arbitrum/interfaces/ArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n* @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface ArbSys {\\n    /**\\n    * @notice Get internal version number identifying an ArbOS build\\n    * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint);\\n\\n    function arbChainID() external view returns(uint);\\n\\n    /**\\n    * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n    * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint);\\n\\n    /**\\n    * @notice Send given amount of Eth to dest from sender.\\n    * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n    * @param destination recipient address on L1\\n    * @return unique identifier for this L2-to-L1 transaction.\\n    */\\n    function withdrawEth(address destination) external payable returns(uint);\\n\\n    /**\\n    * @notice Send a transaction to L1\\n    * @param destination recipient address on L1\\n    * @param calldataForL1 (optional) calldata for L1 contract call\\n    * @return a unique identifier for this L2-to-L1 transaction.\\n    */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns(uint);\\n\\n    /**\\n    * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n    * @param account target account\\n    * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n    */\\n    function getTransactionCount(address account) external view returns(uint256);\\n\\n    /**\\n    * @notice get the value of target L2 storage slot\\n    * This function is only callable from address 0 to prevent contracts from being able to call it\\n    * @param account target account\\n    * @param index target index of storage slot\\n    * @return stotage value for the given account at the given index\\n    */\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\n\\n    /**\\n    * @notice check if current call is coming from l1\\n    * @return true if the caller of this was called directly from L1\\n    */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param dest destination address\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns(address);\\n\\n    /**\\n     * @notice get the caller's amount of available storage gas\\n     * @return amount of storage gas available to the caller\\n     */\\n    function getStorageGasAvailable() external view returns(uint);\\n\\n    event L2ToL1Transaction(address caller, address indexed destination, uint indexed uniqueId,\\n        uint indexed batchNumber, uint indexInBatch,\\n        uint arbBlockNum, uint ethBlockNum, uint timestamp,\\n        uint callvalue, bytes data);\\n}\",\"keccak256\":\"0x3734a6569914711c4aedff165e0338717dd7bbdeb324928c954626046cf0b1ba\",\"license\":\"BUSL-1.1\"},\"contracts/chainlink/ChainlinkOracleClient.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"hardhat-deploy/solc_0.7/proxy/Proxied.sol\\\";\\n\\nimport \\\"@chainlink/contracts/src/v0.7/ChainlinkClient.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/ILayerZeroOracle.sol\\\";\\nimport \\\"../interfaces/ILayerZeroUltraLightNodeV1.sol\\\";\\nimport \\\"../arbitrum/interfaces/ArbSys.sol\\\";\\n\\ncontract ChainlinkOracleClient is ILayerZeroOracle, ChainlinkClient, ReentrancyGuard, OwnableUpgradeable, Proxied {\\n    using SafeERC20 for IERC20;\\n\\n    struct Job {\\n        address oracle;\\n        bytes32 id;\\n        uint fee;\\n        uint calledInBlock;\\n    }\\n\\n    uint public calledInBlock;\\n    mapping(uint16 => Job) public jobs; // dstChainId => Job()\\n    uint16 public endpointId; // local lz endpointId\\n    ILayerZeroUltraLightNodeV1 public uln;\\n    mapping(address => bool) public approvedAddresses;\\n    mapping(uint16 => mapping(uint16 => uint)) public chainPriceLookup;\\n    mapping(uint16 => bytes) public deliveryAddressLookup;\\n    ArbSys public arbSys; // to retrieve Arbitrum L2 block number\\n    address public LINK; // the LINK token address on the local chain\\n\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    event Result(bytes32 requestId, bytes32 result);\\n    event WithdrawTokens(address token, address to, uint amount);\\n    event Withdraw(address to, uint amount);\\n\\n    modifier onlyULN() {\\n        require(msg.sender == address(uln), \\\"OracleClient: caller must be LayerZero.\\\");\\n        _;\\n    }\\n\\n    function initialize(address _linkAddress, uint16 _endpointId) public proxied initializer {\\n        __Ownable_init();\\n\\n        setChainlinkToken(_linkAddress);\\n        LINK = _linkAddress;\\n        endpointId = _endpointId;\\n        approvedAddresses[msg.sender] = true;\\n\\n        if (isArbitrumChain()) {\\n            arbSys = ArbSys(0x0000000000000000000000000000000000000064);\\n        }\\n    }\\n\\n    // not doing 0 cost\\n    function getPrice(uint16 _destinationChainId, uint16 _outboundProofType) external view override returns (uint price) {\\n        price = chainPriceLookup[_outboundProofType][_destinationChainId];\\n        require(price > 0, \\\"Chainlink Oracle: not supporting the (dstChain, libraryVersion)\\\");\\n    }\\n\\n    function isApproved(address _relayerAddress) public view override returns (bool) {\\n        return approvedAddresses[_relayerAddress];\\n    }\\n\\n    function isArbitrumChain() public view returns (bool) {\\n        uint cid;\\n        assembly {\\n            cid := chainid()\\n        }\\n        return cid == 42161 || cid == 421611;\\n    }\\n\\n    function getBlockForOracleJob() public view returns (uint) {\\n        if (isArbitrumChain()) {\\n            return arbSys.arbBlockNumber();\\n        }\\n        return block.number;\\n    }\\n\\n    // only approved\\n    function updateHash(uint16 _remoteChainId, bytes32 _blockHash, uint _confirmations, bytes32 _data) external {\\n        require(approvedAddresses[msg.sender], \\\"Oracle: caller must be approved\\\");\\n        uln.updateHash(_remoteChainId, _blockHash, _confirmations, _data);\\n    }\\n\\n    // pay to initiate oracle and specify the targetBlock to move the header for\\n    function notifyOracleOfBlock(uint16 _dstChainId, uint16 _outboundProofType, uint64 _outboundBlockConfirmations, uint targetBlockNum) external {\\n        require(targetBlockNum <= getBlockForOracleJob(), \\\"target block number cannot be in the future\\\");\\n\\n        Job storage job = jobs[_dstChainId];\\n        require(IERC20(LINK).allowance(msg.sender, address(this)) >= job.fee, \\\"sender requires more LINK allowance to perform call\\\");\\n\\n        // sender must pay this contract in LINK for the job being requested\\n        IERC20(LINK).transferFrom(msg.sender, address(this), job.fee);\\n\\n        // instruct chainlink oracle to move the block header, for the target block\\n        sendOracleRequest(_dstChainId, _outboundProofType, _outboundBlockConfirmations, targetBlockNum, true);\\n    }\\n\\n    // LayerZero will call this function to initiate the Chainlink oracle\\n    function notifyOracle(uint16 _dstChainId, uint16 _outboundProofType, uint64 _outboundBlockConfirmations) external override onlyULN {\\n        sendOracleRequest(_dstChainId, _outboundProofType, _outboundBlockConfirmations, getBlockForOracleJob(), false);\\n    }\\n\\n    // function to handle building and sending the chainlink request for a target block\\n    function sendOracleRequest(uint16 _dstChainId, uint16 _outboundProofType, uint64 _outboundBlockConfirmations, uint targetBlockNum, bool _override) internal {\\n        Job storage job = jobs[_dstChainId];\\n        if (_override || job.calledInBlock < targetBlockNum) {\\n            Chainlink.Request memory req = buildChainlinkRequest(job.id, address(this), this.fulfillNotificationOfBlock.selector);\\n            // send this source sides endpointId. when cl delivers it on the remote,\\n            // it makes sense they use the variable named \\\"remoteChainId\\\" from that side.\\n            Chainlink.addUint(req, \\\"remoteChainId\\\", endpointId);\\n            Chainlink.addUint(req, \\\"libraryVersion\\\", uint(_outboundProofType));\\n            Chainlink.addBytes(req, \\\"contractAddress\\\", deliveryAddressLookup[_dstChainId]);\\n            Chainlink.addUint(req, \\\"confirmations\\\", _outboundBlockConfirmations);\\n            Chainlink.add(req, \\\"blockNum\\\", toHexString(targetBlockNum));\\n\\n            sendChainlinkRequestTo(job.oracle, req, job.fee);\\n            job.calledInBlock = targetBlockNum;\\n        }\\n    }\\n\\n    // chainlink callback function\\n    function fulfillNotificationOfBlock(bytes32 _requestId, bytes32 _result) public recordChainlinkFulfillment(_requestId) {\\n        emit Result(_requestId, _result);\\n    }\\n\\n    // owner can approve a token spender\\n    function approveToken(address _token, address _spender, uint _amount) external onlyOwner {\\n        IERC20 token = IERC20(_token);\\n        token.safeApprove(_spender, _amount);\\n    }\\n\\n    // owner can withdraw native\\n    function withdraw(address payable _to, uint _amount) external onlyOwner nonReentrant {\\n        (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"OracleClient: failed to withdraw\\\");\\n        emit Withdraw(_to, _amount);\\n    }\\n\\n    // owner can set uln\\n    function setUln(address ulnAddress) external onlyOwner {\\n        uln = ILayerZeroUltraLightNodeV1(ulnAddress);\\n    }\\n\\n    // owner can withdraw tokens\\n    function withdrawTokens(address _token, address _to, uint _amount) public onlyOwner {\\n        IERC20(_token).safeTransfer(_to, _amount);\\n        emit WithdrawTokens(_token, _to, _amount);\\n    }\\n\\n    // quoted fee refers to the fee the oracle clock\\n    function withdrawOracleQuotedFee(uint amount) external onlyOwner {\\n        uln.withdrawNative(1, address(this), address(this), amount);\\n    }\\n\\n    // set/update chainlink jobid data\\n    function setJob(uint16 _chain, address _oracle, bytes32 _id, uint _fee) public onlyOwner {\\n        jobs[_chain] = Job(_oracle, _id, _fee, getBlockForOracleJob() - 1);\\n    }\\n\\n    // store the dstChainId and delivery address\\n    function setDeliveryAddress(uint16 _dstChainId, address _deliveryAddress) public onlyOwner {\\n        deliveryAddressLookup[_dstChainId] = abi.encodePacked(_deliveryAddress);\\n    }\\n\\n    function setPrice(uint16 _destinationChainId, uint16 _outboundProofType, uint _price) external onlyOwner {\\n        chainPriceLookup[_outboundProofType][_destinationChainId] = _price;\\n    }\\n\\n    // approve a signing address\\n    function setApprovedAddress(address _oracleAddress, bool _approve) external onlyOwner {\\n        approvedAddresses[_oracleAddress] = _approve;\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function int2str(uint value) public pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint temp = value;\\n        uint digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint value) public view returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x0\\\";\\n        }\\n        uint temp = value;\\n        uint length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint value, uint length) internal view returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n\\n        for (uint i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n\\n        if (buffer[2] == \\\"0\\\") {\\n            bytes memory bufferOdd = new bytes(buffer.length - 1);\\n            bufferOdd[0] = \\\"0\\\";\\n            bufferOdd[1] = \\\"x\\\";\\n\\n            for (uint i = 3; i < buffer.length; i++) {\\n                bufferOdd[i - 1] = buffer[i];\\n            }\\n\\n            require(value == 0, \\\"Strings: hex length insufficient\\\");\\n            return string(bufferOdd);\\n        }\\n\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    // endpointId\\n    function setEndpointId(uint16 _endpointId) external onlyOwner {\\n        endpointId = _endpointId;\\n    }\\n\\n    // be able to receive ether\\n    fallback() external payable {}\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x01a737dd46e5c6cc1c8da6108f2c328d4adbbb0f6284d8f959cd5909d42f7efd\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\n\\ninterface ILayerZeroOracle {\\n    // @notice query the oracle price for relaying block information to the destination chain\\n    // @param _dstChainId the destination endpoint identifier\\n    // @param _outboundProofType the proof type identifier to specify the data to be relayed\\n    function getPrice(uint16 _dstChainId, uint16 _outboundProofType) external view returns (uint price);\\n\\n    // @notice Ultra-Light Node notifies the Oracle of a new block information relaying request\\n    // @param _dstChainId the destination endpoint identifier\\n    // @param _outboundProofType the proof type identifier to specify the data to be relayed\\n    // @param _outboundBlockConfirmations the number of source chain block confirmation needed\\n    function notifyOracle(uint16 _dstChainId, uint16 _outboundProofType, uint64 _outboundBlockConfirmations) external;\\n\\n    // @notice query if the address is an approved actor for privileges like data submission and fee withdrawal etc.\\n    // @param _address the address to be checked\\n    function isApproved(address _address) external view returns (bool approved);\\n}\\n\",\"keccak256\":\"0x441295e1bc5d3c4bb021458b45f5e98d7f5a7c79ed53ba72932a261f857c4709\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroUltraLightNodeV1.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\n\\ninterface ILayerZeroUltraLightNodeV1 {\\n    // a Relayer can execute the validateTransactionProof()\\n    function validateTransactionProof(uint16 _srcChainId, address _dstAddress, uint _gasLimit, bytes32 _lookupHash, bytes calldata _transactionProof) external;\\n\\n    // an Oracle delivers the block data using updateHash()\\n    function updateHash(uint16 _remoteChainId, bytes32 _lookupHash, uint _confirmations, bytes32 _data) external;\\n\\n    // can only withdraw the receivable of the msg.sender\\n    function withdrawNative(uint8 _type, address _owner, address payable _to, uint _amount) external;\\n\\n    function withdrawZRO(address _to, uint _amount) external;\\n\\n    // view functions\\n    function oracleQuotedAmount(address _oracle) external view returns (uint);\\n\\n    function relayerQuotedAmount(address _relayer) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x8bc6333668c9595072a5e51e69261c75baff87717a16b35a5a8841eafd012cfa\",\"license\":\"BUSL-1.1\"},\"hardhat-deploy/solc_0.7/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x760a00cd889372a2358732403723d8a13cb8b02bb82450a9bf5488177828aa79\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600160045534801561001557600080fd5b5060016006556140378061002a6000396000f3fe6080604052600436106102025760003560e01c8063704316e51161011d578063adb86f1a116100b0578063da3e33971161007f578063f2fde38b11610064578063f2fde38b146108e1578063f39e69a414610921578063f3fef3a31461096b57610209565b8063da3e339714610851578063f136a874146108a157610209565b8063adb86f1a1461076f578063bccc96d51461079d578063c758b017146107db578063cd84b89d1461081157610209565b80638ec5656d116100ec5780638ec5656d146106d65780638fba8d5c146107005780639642c1e61461072a5780639c1b1c361461073f57610209565b8063704316e514610640578063715018a61461068057806377e20df8146106955780638da5cb5b146106c157610209565b8063421a7f561161019557806366530579116101645780636653057914610540578063673448dd146105895780636c473aff146105dd5780636e66e976146105f257610209565b8063421a7f5614610428578063575765e2146104935780635e35359e146104db5780636183e86a1461052b57610209565b80631b570c25116101d15780631b570c25146103865780631b6b6d231461039b5780631c783a81146103b05780632ca4a5b0146103de57610209565b8063059416441461020b5780630b4d5107146102615780631057d40f146102a957806313d821f4146102e757610209565b3661020957005b005b34801561021757600080fd5b506102096004803603608081101561022e57600080fd5b5061ffff8135169073ffffffffffffffffffffffffffffffffffffffff60208201351690604081013590606001356109b1565b34801561026d57600080fd5b506102976004803603604081101561028457600080fd5b5061ffff81358116916020013516610b19565b60408051918252519081900360200190f35b3480156102b557600080fd5b506102be610b96565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156102f357600080fd5b506103116004803603602081101561030a57600080fd5b5035610bb2565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561034b578181015183820152602001610333565b50505050905090810190601f1680156103785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561039257600080fd5b50610297610cd8565b3480156103a757600080fd5b506102be610cde565b3480156103bc57600080fd5b50610311600480360360208110156103d357600080fd5b503561ffff16610cfa565b3480156103ea57600080fd5b506102096004803603604081101561040157600080fd5b50803561ffff16906020013573ffffffffffffffffffffffffffffffffffffffff16610db3565b34801561043457600080fd5b506104566004803603602081101561044b57600080fd5b503561ffff16610ec8565b6040805173ffffffffffffffffffffffffffffffffffffffff90951685526020850193909352838301919091526060830152519081900360800190f35b34801561049f57600080fd5b50610209600480360360408110156104b657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515610f06565b3480156104e757600080fd5b50610209600480360360608110156104fe57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135611004565b34801561053757600080fd5b50610297611129565b34801561054c57600080fd5b506102096004803603606081101561056357600080fd5b50803561ffff908116916020810135909116906040013567ffffffffffffffff166111d9565b34801561059557600080fd5b506105c9600480360360208110156105ac57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611264565b604080519115158252519081900360200190f35b3480156105e957600080fd5b506102be61128f565b3480156105fe57600080fd5b506102096004803603608081101561061557600080fd5b5061ffff813581169160208101359091169067ffffffffffffffff60408201351690606001356112b1565b34801561064c57600080fd5b506102096004803603608081101561066357600080fd5b5061ffff81351690602081013590604081013590606001356114ec565b34801561068c57600080fd5b50610209611618565b3480156106a157600080fd5b506106aa61172f565b6040805161ffff9092168252519081900360200190f35b3480156106cd57600080fd5b506102be611739565b3480156106e257600080fd5b50610209600480360360208110156106f957600080fd5b5035611755565b34801561070c57600080fd5b506103116004803603602081101561072357600080fd5b503561189d565b34801561073657600080fd5b506105c9611901565b34801561074b57600080fd5b506102096004803603604081101561076257600080fd5b508035906020013561191c565b34801561077b57600080fd5b506102096004803603602081101561079257600080fd5b503561ffff16611a35565b3480156107a957600080fd5b50610209600480360360608110156107c057600080fd5b5061ffff813581169160208101359091169060400135611b12565b3480156107e757600080fd5b50610297600480360360408110156107fe57600080fd5b5061ffff81358116916020013516611be0565b34801561081d57600080fd5b506102096004803603602081101561083457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611bfd565b34801561085d57600080fd5b506102096004803603606081101561087457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135611cf2565b3480156108ad57600080fd5b506105c9600480360360208110156108c457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611dc2565b3480156108ed57600080fd5b506102096004803603602081101561090457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611dd7565b34801561092d57600080fd5b506102096004803603604081101561094457600080fd5b50803573ffffffffffffffffffffffffffffffffffffffff16906020013561ffff16611f79565b34801561097757600080fd5b506102096004803603604081101561098e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135612204565b6109b961244b565b73ffffffffffffffffffffffffffffffffffffffff166109d7611739565b73ffffffffffffffffffffffffffffffffffffffff1614610a5957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60405180608001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020016001610a96611129565b03905261ffff949094166000908152606d6020908152604091829020865181547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178155908601516001820155908501516002820155606090940151600390940193909355505050565b61ffff80821660009081526070602090815260408083209386168352929052205480610b90576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603f815260200180613f8d603f913960400191505060405180910390fd5b92915050565b60725473ffffffffffffffffffffffffffffffffffffffff1681565b606081610bf3575060408051808201909152600181527f30000000000000000000000000000000000000000000000000000000000000006020820152610cd3565b8160005b8115610c0b57600101600a82049150610bf7565b60008167ffffffffffffffff81118015610c2457600080fd5b506040519080825280601f01601f191660200182016040528015610c4f576020820181803683370190505b5090505b8415610cce577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90910190600a850660300160f81b818381518110610c9457fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85049450610c53565b925050505b919050565b606c5481565b60735473ffffffffffffffffffffffffffffffffffffffff1681565b60716020908152600091825260409182902080548351601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018616150201909316929092049182018490048402810184019094528084529091830182828015610dab5780601f10610d8057610100808354040283529160200191610dab565b820191906000526020600020905b815481529060010190602001808311610d8e57829003601f168201915b505050505081565b610dbb61244b565b73ffffffffffffffffffffffffffffffffffffffff16610dd9611739565b73ffffffffffffffffffffffffffffffffffffffff1614610e5b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084901b16602080830191909152825180830360140181526034909201835261ffff8516600090815260718252929092208151610ec393919290910190613d28565b505050565b606d60205260009081526040902080546001820154600283015460039093015473ffffffffffffffffffffffffffffffffffffffff90921692909184565b610f0e61244b565b73ffffffffffffffffffffffffffffffffffffffff16610f2c611739565b73ffffffffffffffffffffffffffffffffffffffff1614610fae57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff919091166000908152606f6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b61100c61244b565b73ffffffffffffffffffffffffffffffffffffffff1661102a611739565b73ffffffffffffffffffffffffffffffffffffffff16146110ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6110cd73ffffffffffffffffffffffffffffffffffffffff8416838361244f565b6040805173ffffffffffffffffffffffffffffffffffffffff80861682528416602082015280820183905290517f70082d08c003c5341f2401bec1c2ae1dbcdc29ae17e9cc5633fa617caa8acd4c9181900360600190a1505050565b6000611133611901565b156111d357607260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111a057600080fd5b505afa1580156111b4573d6000803e3d6000fd5b505050506040513d60208110156111ca57600080fd5b505190506111d6565b50435b90565b606e5462010000900473ffffffffffffffffffffffffffffffffffffffff16331461124f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180613e626027913960400191505060405180910390fd5b610ec383838361125d611129565b60006124dc565b73ffffffffffffffffffffffffffffffffffffffff166000908152606f602052604090205460ff1690565b606e5462010000900473ffffffffffffffffffffffffffffffffffffffff1681565b6112b9611129565b811115611311576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180613e89602b913960400191505060405180910390fd5b61ffff84166000908152606d6020908152604091829020600281015460735484517fdd62ed3e00000000000000000000000000000000000000000000000000000000815233600482015230602482015294519294919373ffffffffffffffffffffffffffffffffffffffff9091169263dd62ed3e926044808201939291829003018186803b1580156113a257600080fd5b505afa1580156113b6573d6000803e3d6000fd5b505050506040513d60208110156113cc57600080fd5b50511015611425576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526033815260200180613f086033913960400191505060405180910390fd5b6073546002820154604080517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101929092525173ffffffffffffffffffffffffffffffffffffffff909216916323b872dd916064808201926020929091908290030181600087803b1580156114aa57600080fd5b505af11580156114be573d6000803e3d6000fd5b505050506040513d60208110156114d457600080fd5b506114e590508585858560016124dc565b5050505050565b336000908152606f602052604090205460ff1661156a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4f7261636c653a2063616c6c6572206d75737420626520617070726f76656400604482015290519081900360640190fd5b606e54604080517f704316e500000000000000000000000000000000000000000000000000000000815261ffff8716600482015260248101869052604481018590526064810184905290516201000090920473ffffffffffffffffffffffffffffffffffffffff169163704316e59160848082019260009290919082900301818387803b1580156115fa57600080fd5b505af115801561160e573d6000803e3d6000fd5b5050505050505050565b61162061244b565b73ffffffffffffffffffffffffffffffffffffffff1661163e611739565b73ffffffffffffffffffffffffffffffffffffffff16146116c057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b603a5460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603a80547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b606e5461ffff1681565b603a5473ffffffffffffffffffffffffffffffffffffffff1690565b61175d61244b565b73ffffffffffffffffffffffffffffffffffffffff1661177b611739565b73ffffffffffffffffffffffffffffffffffffffff16146117fd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b606e54604080517f22c1077600000000000000000000000000000000000000000000000000000000815260016004820152306024820181905260448201526064810184905290516201000090920473ffffffffffffffffffffffffffffffffffffffff16916322c107769160848082019260009290919082900301818387803b15801561188957600080fd5b505af11580156114e5573d6000803e3d6000fd5b6060816118de575060408051808201909152600381527f30783000000000000000000000000000000000000000000000000000000000006020820152610cd3565b8160005b81156118f75760089190911c906001016118e2565b610cce848261276e565b60004661a4b181148061191657508062066eeb145b91505090565b600082815260056020526040902054829073ffffffffffffffffffffffffffffffffffffffff16331461199a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180613f3b6028913960400191505060405180910390fd5b60008181526005602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555182917f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a91a2604080518481526020810184905281517f35b319a88b73146ae6bf1717ce61d79b09999adf3e5aacf2df3870404e6f1467929181900390910190a1505050565b611a3d61244b565b73ffffffffffffffffffffffffffffffffffffffff16611a5b611739565b73ffffffffffffffffffffffffffffffffffffffff1614611add57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b606e80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff92909216919091179055565b611b1a61244b565b73ffffffffffffffffffffffffffffffffffffffff16611b38611739565b73ffffffffffffffffffffffffffffffffffffffff1614611bba57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61ffff918216600090815260706020908152604080832095909416825293909352912055565b607060209081526000928352604080842090915290825290205481565b611c0561244b565b73ffffffffffffffffffffffffffffffffffffffff16611c23611739565b73ffffffffffffffffffffffffffffffffffffffff1614611ca557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b606e805473ffffffffffffffffffffffffffffffffffffffff90921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b611cfa61244b565b73ffffffffffffffffffffffffffffffffffffffff16611d18611739565b73ffffffffffffffffffffffffffffffffffffffff1614611d9a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b82611dbc73ffffffffffffffffffffffffffffffffffffffff82168484612bda565b50505050565b606f6020526000908152604090205460ff1681565b611ddf61244b565b73ffffffffffffffffffffffffffffffffffffffff16611dfd611739565b73ffffffffffffffffffffffffffffffffffffffff1614611e7f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116611eeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613e196026913960400191505060405180910390fd5b603a5460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000611f83612d68565b905073ffffffffffffffffffffffffffffffffffffffff8116611fdc5773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355611ffe565b3373ffffffffffffffffffffffffffffffffffffffff821614611ffe57600080fd5b600754610100900460ff16806120175750612017612d8d565b80612025575060075460ff16155b61207a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613eda602e913960400191505060405180910390fd5b600754610100900460ff161580156120e057600780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b6120e8612d9e565b6120f184612ec2565b607380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8616179055606e80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff8516179055336000908152606f6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905561219f611901565b156121d057607280547fffffffffffffffffffffffff00000000000000000000000000000000000000001660641790555b8015611dbc57600780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550505050565b61220c61244b565b73ffffffffffffffffffffffffffffffffffffffff1661222a611739565b73ffffffffffffffffffffffffffffffffffffffff16146122ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6002600654141561231e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260065560405160009073ffffffffffffffffffffffffffffffffffffffff84169083908381818185875af1925050503d806000811461237b576040519150601f19603f3d011682016040523d82523d6000602084013e612380565b606091505b50509050806123f057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f7261636c65436c69656e743a206661696c656420746f207769746864726177604482015290519081900360640190fd5b6040805173ffffffffffffffffffffffffffffffffffffffff851681526020810184905281517f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364929181900390910190a15050600160065550565b3390565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610ec3908490612f09565b61ffff85166000908152606d6020526040902081806124fe5750828160030154105b1561276657600061251b826001015430639c1b1c3660e01b612fe1565b60408051808201909152600d81527f72656d6f7465436861696e4964000000000000000000000000000000000000006020820152606e549192506125659183919061ffff16613006565b6125a9816040518060400160405280600e81526020017f6c69627261727956657273696f6e0000000000000000000000000000000000008152508861ffff16613006565b604080518082018252600f81527f636f6e747261637441646472657373000000000000000000000000000000000060208083019190915261ffff8a166000908152607182528390208054845160026001831615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190921691909104601f81018490048402820184019095528481526126a1948694939192918301828280156126975780601f1061266c57610100808354040283529160200191612697565b820191906000526020600020905b81548152906001019060200180831161267a57829003601f168201915b5050505050613024565b6126eb816040518060400160405280600d81526020017f636f6e6669726d6174696f6e73000000000000000000000000000000000000008152508767ffffffffffffffff16613006565b612733816040518060400160405280600881526020017f626c6f636b4e756d00000000000000000000000000000000000000000000000081525061272e8761189d565b613042565b8154600283015461275c9173ffffffffffffffffffffffffffffffffffffffff16908390613060565b5050600381018390555b505050505050565b606060008260020260020167ffffffffffffffff8111801561278f57600080fd5b506040519080825280601f01601f1916602001820160405280156127ba576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106127eb57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061284857fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600160028402015b6001811115612924577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106128b757fe5b1a60f81b8282815181106128c757fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0161287f565b508060028151811061293257fe5b6020910101517fff00000000000000000000000000000000000000000000000000000000000000167f30000000000000000000000000000000000000000000000000000000000000001415612b66576000600182510367ffffffffffffffff8111801561299e57600080fd5b506040519080825280601f01601f1916602001820160405280156129c9576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106129fa57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612a5757fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060035b8251811015612aef57828181518110612a9e57fe5b602001015160f81c60f81b826001830381518110612ab857fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600101612a89565b508415612b5d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015290519081900360640190fd5b9150610b909050565b8315612bd357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015290519081900360640190fd5b9392505050565b801580612c865750604080517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015612c5857600080fd5b505afa158015612c6c573d6000803e3d6000fd5b505050506040513d6020811015612c8257600080fd5b5051155b612cdb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180613fcc6036913960400191505060405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052610ec3908490612f09565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b6000612d9830613098565b15905090565b600754610100900460ff1680612db75750612db7612d8d565b80612dc5575060075460ff16155b612e1a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613eda602e913960400191505060405180910390fd5b600754610100900460ff16158015612e8057600780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b612e8861309e565b612e906131b0565b8015612ebf57600780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000612f6b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166133409092919063ffffffff16565b805190915015610ec357808060200190516020811015612f8a57600080fd5b5051610ec3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613f63602a913960400191505060405180910390fd5b612fe9613db4565b612ff1613db4565b612ffd8186868661334f565b95945050505050565b608083015161301590836133b1565b6080830151610ec390826133c8565b608083015161303390836133b1565b6080830151610ec390826133d8565b608083015161305190836133b1565b6080830151610ec390826133b1565b600061309084848460017f40429946000000000000000000000000000000000000000000000000000000006133e5565b949350505050565b3b151590565b600754610100900460ff16806130b757506130b7612d8d565b806130c5575060075460ff16155b61311a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613eda602e913960400191505060405180910390fd5b600754610100900460ff16158015612e9057600780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790558015612ebf57600780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600754610100900460ff16806131c957506131c9612d8d565b806131d7575060075460ff16155b61322c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613eda602e913960400191505060405180910390fd5b600754610100900460ff1615801561329257600780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b600061329c61244b565b603a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015612ebf57600780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b60606130908484600085613798565b613357613db4565b6133678560800151610100613952565b505091835273ffffffffffffffffffffffffffffffffffffffff1660208301527fffffffff0000000000000000000000000000000000000000000000000000000016604082015290565b6133be826003835161398c565b610ec38282613a60565b6133d48260008361398c565b5050565b6133be826002835161398c565b6004546040805130606090811b60208084019190915260348084018690528451808503909101815260549093018452825192810192909220908801939093526000838152600590915281812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8a16179055905182917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af991a2600082600080886000015189602001518a604001518b606001518a8d6080015160000151604051602401808973ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff168152602001857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561356f578181015183820152602001613557565b50505050905090810190601f16801561359c5780820380516001836020036101000a031916815260200191505b509950505050505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08887846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156136b657818101518382015260200161369e565b50505050905090810190601f1680156136e35780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561370457600080fd5b505af1158015613718573d6000803e3d6000fd5b505050506040513d602081101561372e57600080fd5b5051613785576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180613e3f6023913960400191505060405180910390fd5b5060048054600101905595945050505050565b6060824710156137f3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613eb46026913960400191505060405180910390fd5b6137fc85613098565b61386757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106138d057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613893565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613932576040519150601f19603f3d011682016040523d82523d6000602084013e613937565b606091505b5091509150613947828286613a7a565b979650505050505050565b61395a613de9565b602082061561396f5760208206602003820191505b506020828101829052604080518085526000815290920101905290565b601781116139ad576139a78360e0600585901b168317613b38565b50610ec3565b60ff81116139d7576139ca836018611fe0600586901b1617613b38565b506139a783826001613b50565b61ffff8111613a02576139f5836019611fe0600586901b1617613b38565b506139a783826002613b50565b63ffffffff8111613a2f57613a2283601a611fe0600586901b1617613b38565b506139a783826004613b50565b67ffffffffffffffff8111610ec357613a5383601b611fe0600586901b1617613b38565b50611dbc83826008613b50565b613a68613de9565b612bd383846000015151848551613b69565b60608315613a89575081612bd3565b825115613a995782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613afd578181015183820152602001613ae5565b50505050905090810190601f168015613b2a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b613b40613de9565b612bd38384600001515184613c51565b613b58613de9565b613090848560000151518585613c9c565b613b71613de9565b8251821115613b7f57600080fd5b84602001518285011115613ba957613ba985613ba18760200151878601613cfa565b600202613d11565b600080865180518760208301019350808887011115613bc85787860182525b505050602084015b60208410613c0d57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09093019260209182019101613bd0565b5181517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60208690036101000a019081169019919091161790525083949350505050565b613c59613de9565b83602001518310613c7557613c75848560200151600202613d11565b835180516020858301018481535080851415613c92576001810182525b5093949350505050565b613ca4613de9565b84602001518483011115613cc157613cc185858401600202613d11565b60006001836101000a039050855183868201018583198251161781525080518487011115613cef5783860181525b509495945050505050565b600081831115613d0b575081610b90565b50919050565b8151613d1d8383613952565b50611dbc8382613a60565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282613d5e5760008555613da4565b82601f10613d7757805160ff1916838001178555613da4565b82800160010185558215613da4579182015b82811115613da4578251825591602001919060010190613d89565b50613db0929150613e03565b5090565b6040805160a081018252600080825260208201819052918101829052606081019190915260808101613de4613de9565b905290565b604051806040016040528060608152602001600081525090565b5b80821115613db05760008155600101613e0456fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373756e61626c6520746f207472616e73666572416e6443616c6c20746f206f7261636c654f7261636c65436c69656e743a2063616c6c6572206d757374206265204c617965725a65726f2e74617267657420626c6f636b206e756d6265722063616e6e6f7420626520696e2074686520667574757265416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656473656e646572207265717569726573206d6f7265204c494e4b20616c6c6f77616e636520746f20706572666f726d2063616c6c536f75726365206d75737420626520746865206f7261636c65206f662074686520726571756573745361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564436861696e6c696e6b204f7261636c653a206e6f7420737570706f7274696e67207468652028647374436861696e2c206c69627261727956657273696f6e295361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212207cbeed6087e929b141d309e9b10aed2af8676a1bcf4f66dfc519279a409b094364736f6c63430007060033",
  "deployedBytecode": "0x6080604052600436106102025760003560e01c8063704316e51161011d578063adb86f1a116100b0578063da3e33971161007f578063f2fde38b11610064578063f2fde38b146108e1578063f39e69a414610921578063f3fef3a31461096b57610209565b8063da3e339714610851578063f136a874146108a157610209565b8063adb86f1a1461076f578063bccc96d51461079d578063c758b017146107db578063cd84b89d1461081157610209565b80638ec5656d116100ec5780638ec5656d146106d65780638fba8d5c146107005780639642c1e61461072a5780639c1b1c361461073f57610209565b8063704316e514610640578063715018a61461068057806377e20df8146106955780638da5cb5b146106c157610209565b8063421a7f561161019557806366530579116101645780636653057914610540578063673448dd146105895780636c473aff146105dd5780636e66e976146105f257610209565b8063421a7f5614610428578063575765e2146104935780635e35359e146104db5780636183e86a1461052b57610209565b80631b570c25116101d15780631b570c25146103865780631b6b6d231461039b5780631c783a81146103b05780632ca4a5b0146103de57610209565b8063059416441461020b5780630b4d5107146102615780631057d40f146102a957806313d821f4146102e757610209565b3661020957005b005b34801561021757600080fd5b506102096004803603608081101561022e57600080fd5b5061ffff8135169073ffffffffffffffffffffffffffffffffffffffff60208201351690604081013590606001356109b1565b34801561026d57600080fd5b506102976004803603604081101561028457600080fd5b5061ffff81358116916020013516610b19565b60408051918252519081900360200190f35b3480156102b557600080fd5b506102be610b96565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156102f357600080fd5b506103116004803603602081101561030a57600080fd5b5035610bb2565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561034b578181015183820152602001610333565b50505050905090810190601f1680156103785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561039257600080fd5b50610297610cd8565b3480156103a757600080fd5b506102be610cde565b3480156103bc57600080fd5b50610311600480360360208110156103d357600080fd5b503561ffff16610cfa565b3480156103ea57600080fd5b506102096004803603604081101561040157600080fd5b50803561ffff16906020013573ffffffffffffffffffffffffffffffffffffffff16610db3565b34801561043457600080fd5b506104566004803603602081101561044b57600080fd5b503561ffff16610ec8565b6040805173ffffffffffffffffffffffffffffffffffffffff90951685526020850193909352838301919091526060830152519081900360800190f35b34801561049f57600080fd5b50610209600480360360408110156104b657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515610f06565b3480156104e757600080fd5b50610209600480360360608110156104fe57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135611004565b34801561053757600080fd5b50610297611129565b34801561054c57600080fd5b506102096004803603606081101561056357600080fd5b50803561ffff908116916020810135909116906040013567ffffffffffffffff166111d9565b34801561059557600080fd5b506105c9600480360360208110156105ac57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611264565b604080519115158252519081900360200190f35b3480156105e957600080fd5b506102be61128f565b3480156105fe57600080fd5b506102096004803603608081101561061557600080fd5b5061ffff813581169160208101359091169067ffffffffffffffff60408201351690606001356112b1565b34801561064c57600080fd5b506102096004803603608081101561066357600080fd5b5061ffff81351690602081013590604081013590606001356114ec565b34801561068c57600080fd5b50610209611618565b3480156106a157600080fd5b506106aa61172f565b6040805161ffff9092168252519081900360200190f35b3480156106cd57600080fd5b506102be611739565b3480156106e257600080fd5b50610209600480360360208110156106f957600080fd5b5035611755565b34801561070c57600080fd5b506103116004803603602081101561072357600080fd5b503561189d565b34801561073657600080fd5b506105c9611901565b34801561074b57600080fd5b506102096004803603604081101561076257600080fd5b508035906020013561191c565b34801561077b57600080fd5b506102096004803603602081101561079257600080fd5b503561ffff16611a35565b3480156107a957600080fd5b50610209600480360360608110156107c057600080fd5b5061ffff813581169160208101359091169060400135611b12565b3480156107e757600080fd5b50610297600480360360408110156107fe57600080fd5b5061ffff81358116916020013516611be0565b34801561081d57600080fd5b506102096004803603602081101561083457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611bfd565b34801561085d57600080fd5b506102096004803603606081101561087457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135611cf2565b3480156108ad57600080fd5b506105c9600480360360208110156108c457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611dc2565b3480156108ed57600080fd5b506102096004803603602081101561090457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611dd7565b34801561092d57600080fd5b506102096004803603604081101561094457600080fd5b50803573ffffffffffffffffffffffffffffffffffffffff16906020013561ffff16611f79565b34801561097757600080fd5b506102096004803603604081101561098e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135612204565b6109b961244b565b73ffffffffffffffffffffffffffffffffffffffff166109d7611739565b73ffffffffffffffffffffffffffffffffffffffff1614610a5957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60405180608001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020016001610a96611129565b03905261ffff949094166000908152606d6020908152604091829020865181547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178155908601516001820155908501516002820155606090940151600390940193909355505050565b61ffff80821660009081526070602090815260408083209386168352929052205480610b90576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603f815260200180613f8d603f913960400191505060405180910390fd5b92915050565b60725473ffffffffffffffffffffffffffffffffffffffff1681565b606081610bf3575060408051808201909152600181527f30000000000000000000000000000000000000000000000000000000000000006020820152610cd3565b8160005b8115610c0b57600101600a82049150610bf7565b60008167ffffffffffffffff81118015610c2457600080fd5b506040519080825280601f01601f191660200182016040528015610c4f576020820181803683370190505b5090505b8415610cce577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90910190600a850660300160f81b818381518110610c9457fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85049450610c53565b925050505b919050565b606c5481565b60735473ffffffffffffffffffffffffffffffffffffffff1681565b60716020908152600091825260409182902080548351601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018616150201909316929092049182018490048402810184019094528084529091830182828015610dab5780601f10610d8057610100808354040283529160200191610dab565b820191906000526020600020905b815481529060010190602001808311610d8e57829003601f168201915b505050505081565b610dbb61244b565b73ffffffffffffffffffffffffffffffffffffffff16610dd9611739565b73ffffffffffffffffffffffffffffffffffffffff1614610e5b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084901b16602080830191909152825180830360140181526034909201835261ffff8516600090815260718252929092208151610ec393919290910190613d28565b505050565b606d60205260009081526040902080546001820154600283015460039093015473ffffffffffffffffffffffffffffffffffffffff90921692909184565b610f0e61244b565b73ffffffffffffffffffffffffffffffffffffffff16610f2c611739565b73ffffffffffffffffffffffffffffffffffffffff1614610fae57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff919091166000908152606f6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b61100c61244b565b73ffffffffffffffffffffffffffffffffffffffff1661102a611739565b73ffffffffffffffffffffffffffffffffffffffff16146110ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6110cd73ffffffffffffffffffffffffffffffffffffffff8416838361244f565b6040805173ffffffffffffffffffffffffffffffffffffffff80861682528416602082015280820183905290517f70082d08c003c5341f2401bec1c2ae1dbcdc29ae17e9cc5633fa617caa8acd4c9181900360600190a1505050565b6000611133611901565b156111d357607260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111a057600080fd5b505afa1580156111b4573d6000803e3d6000fd5b505050506040513d60208110156111ca57600080fd5b505190506111d6565b50435b90565b606e5462010000900473ffffffffffffffffffffffffffffffffffffffff16331461124f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180613e626027913960400191505060405180910390fd5b610ec383838361125d611129565b60006124dc565b73ffffffffffffffffffffffffffffffffffffffff166000908152606f602052604090205460ff1690565b606e5462010000900473ffffffffffffffffffffffffffffffffffffffff1681565b6112b9611129565b811115611311576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180613e89602b913960400191505060405180910390fd5b61ffff84166000908152606d6020908152604091829020600281015460735484517fdd62ed3e00000000000000000000000000000000000000000000000000000000815233600482015230602482015294519294919373ffffffffffffffffffffffffffffffffffffffff9091169263dd62ed3e926044808201939291829003018186803b1580156113a257600080fd5b505afa1580156113b6573d6000803e3d6000fd5b505050506040513d60208110156113cc57600080fd5b50511015611425576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526033815260200180613f086033913960400191505060405180910390fd5b6073546002820154604080517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101929092525173ffffffffffffffffffffffffffffffffffffffff909216916323b872dd916064808201926020929091908290030181600087803b1580156114aa57600080fd5b505af11580156114be573d6000803e3d6000fd5b505050506040513d60208110156114d457600080fd5b506114e590508585858560016124dc565b5050505050565b336000908152606f602052604090205460ff1661156a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4f7261636c653a2063616c6c6572206d75737420626520617070726f76656400604482015290519081900360640190fd5b606e54604080517f704316e500000000000000000000000000000000000000000000000000000000815261ffff8716600482015260248101869052604481018590526064810184905290516201000090920473ffffffffffffffffffffffffffffffffffffffff169163704316e59160848082019260009290919082900301818387803b1580156115fa57600080fd5b505af115801561160e573d6000803e3d6000fd5b5050505050505050565b61162061244b565b73ffffffffffffffffffffffffffffffffffffffff1661163e611739565b73ffffffffffffffffffffffffffffffffffffffff16146116c057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b603a5460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603a80547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b606e5461ffff1681565b603a5473ffffffffffffffffffffffffffffffffffffffff1690565b61175d61244b565b73ffffffffffffffffffffffffffffffffffffffff1661177b611739565b73ffffffffffffffffffffffffffffffffffffffff16146117fd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b606e54604080517f22c1077600000000000000000000000000000000000000000000000000000000815260016004820152306024820181905260448201526064810184905290516201000090920473ffffffffffffffffffffffffffffffffffffffff16916322c107769160848082019260009290919082900301818387803b15801561188957600080fd5b505af11580156114e5573d6000803e3d6000fd5b6060816118de575060408051808201909152600381527f30783000000000000000000000000000000000000000000000000000000000006020820152610cd3565b8160005b81156118f75760089190911c906001016118e2565b610cce848261276e565b60004661a4b181148061191657508062066eeb145b91505090565b600082815260056020526040902054829073ffffffffffffffffffffffffffffffffffffffff16331461199a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180613f3b6028913960400191505060405180910390fd5b60008181526005602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555182917f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a91a2604080518481526020810184905281517f35b319a88b73146ae6bf1717ce61d79b09999adf3e5aacf2df3870404e6f1467929181900390910190a1505050565b611a3d61244b565b73ffffffffffffffffffffffffffffffffffffffff16611a5b611739565b73ffffffffffffffffffffffffffffffffffffffff1614611add57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b606e80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff92909216919091179055565b611b1a61244b565b73ffffffffffffffffffffffffffffffffffffffff16611b38611739565b73ffffffffffffffffffffffffffffffffffffffff1614611bba57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61ffff918216600090815260706020908152604080832095909416825293909352912055565b607060209081526000928352604080842090915290825290205481565b611c0561244b565b73ffffffffffffffffffffffffffffffffffffffff16611c23611739565b73ffffffffffffffffffffffffffffffffffffffff1614611ca557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b606e805473ffffffffffffffffffffffffffffffffffffffff90921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b611cfa61244b565b73ffffffffffffffffffffffffffffffffffffffff16611d18611739565b73ffffffffffffffffffffffffffffffffffffffff1614611d9a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b82611dbc73ffffffffffffffffffffffffffffffffffffffff82168484612bda565b50505050565b606f6020526000908152604090205460ff1681565b611ddf61244b565b73ffffffffffffffffffffffffffffffffffffffff16611dfd611739565b73ffffffffffffffffffffffffffffffffffffffff1614611e7f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116611eeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613e196026913960400191505060405180910390fd5b603a5460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000611f83612d68565b905073ffffffffffffffffffffffffffffffffffffffff8116611fdc5773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355611ffe565b3373ffffffffffffffffffffffffffffffffffffffff821614611ffe57600080fd5b600754610100900460ff16806120175750612017612d8d565b80612025575060075460ff16155b61207a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613eda602e913960400191505060405180910390fd5b600754610100900460ff161580156120e057600780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b6120e8612d9e565b6120f184612ec2565b607380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8616179055606e80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff8516179055336000908152606f6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905561219f611901565b156121d057607280547fffffffffffffffffffffffff00000000000000000000000000000000000000001660641790555b8015611dbc57600780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550505050565b61220c61244b565b73ffffffffffffffffffffffffffffffffffffffff1661222a611739565b73ffffffffffffffffffffffffffffffffffffffff16146122ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6002600654141561231e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260065560405160009073ffffffffffffffffffffffffffffffffffffffff84169083908381818185875af1925050503d806000811461237b576040519150601f19603f3d011682016040523d82523d6000602084013e612380565b606091505b50509050806123f057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f7261636c65436c69656e743a206661696c656420746f207769746864726177604482015290519081900360640190fd5b6040805173ffffffffffffffffffffffffffffffffffffffff851681526020810184905281517f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364929181900390910190a15050600160065550565b3390565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610ec3908490612f09565b61ffff85166000908152606d6020526040902081806124fe5750828160030154105b1561276657600061251b826001015430639c1b1c3660e01b612fe1565b60408051808201909152600d81527f72656d6f7465436861696e4964000000000000000000000000000000000000006020820152606e549192506125659183919061ffff16613006565b6125a9816040518060400160405280600e81526020017f6c69627261727956657273696f6e0000000000000000000000000000000000008152508861ffff16613006565b604080518082018252600f81527f636f6e747261637441646472657373000000000000000000000000000000000060208083019190915261ffff8a166000908152607182528390208054845160026001831615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190921691909104601f81018490048402820184019095528481526126a1948694939192918301828280156126975780601f1061266c57610100808354040283529160200191612697565b820191906000526020600020905b81548152906001019060200180831161267a57829003601f168201915b5050505050613024565b6126eb816040518060400160405280600d81526020017f636f6e6669726d6174696f6e73000000000000000000000000000000000000008152508767ffffffffffffffff16613006565b612733816040518060400160405280600881526020017f626c6f636b4e756d00000000000000000000000000000000000000000000000081525061272e8761189d565b613042565b8154600283015461275c9173ffffffffffffffffffffffffffffffffffffffff16908390613060565b5050600381018390555b505050505050565b606060008260020260020167ffffffffffffffff8111801561278f57600080fd5b506040519080825280601f01601f1916602001820160405280156127ba576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106127eb57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061284857fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600160028402015b6001811115612924577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106128b757fe5b1a60f81b8282815181106128c757fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0161287f565b508060028151811061293257fe5b6020910101517fff00000000000000000000000000000000000000000000000000000000000000167f30000000000000000000000000000000000000000000000000000000000000001415612b66576000600182510367ffffffffffffffff8111801561299e57600080fd5b506040519080825280601f01601f1916602001820160405280156129c9576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106129fa57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612a5757fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060035b8251811015612aef57828181518110612a9e57fe5b602001015160f81c60f81b826001830381518110612ab857fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600101612a89565b508415612b5d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015290519081900360640190fd5b9150610b909050565b8315612bd357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015290519081900360640190fd5b9392505050565b801580612c865750604080517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015612c5857600080fd5b505afa158015612c6c573d6000803e3d6000fd5b505050506040513d6020811015612c8257600080fd5b5051155b612cdb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180613fcc6036913960400191505060405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052610ec3908490612f09565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b6000612d9830613098565b15905090565b600754610100900460ff1680612db75750612db7612d8d565b80612dc5575060075460ff16155b612e1a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613eda602e913960400191505060405180910390fd5b600754610100900460ff16158015612e8057600780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b612e8861309e565b612e906131b0565b8015612ebf57600780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000612f6b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166133409092919063ffffffff16565b805190915015610ec357808060200190516020811015612f8a57600080fd5b5051610ec3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613f63602a913960400191505060405180910390fd5b612fe9613db4565b612ff1613db4565b612ffd8186868661334f565b95945050505050565b608083015161301590836133b1565b6080830151610ec390826133c8565b608083015161303390836133b1565b6080830151610ec390826133d8565b608083015161305190836133b1565b6080830151610ec390826133b1565b600061309084848460017f40429946000000000000000000000000000000000000000000000000000000006133e5565b949350505050565b3b151590565b600754610100900460ff16806130b757506130b7612d8d565b806130c5575060075460ff16155b61311a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613eda602e913960400191505060405180910390fd5b600754610100900460ff16158015612e9057600780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790558015612ebf57600780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600754610100900460ff16806131c957506131c9612d8d565b806131d7575060075460ff16155b61322c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613eda602e913960400191505060405180910390fd5b600754610100900460ff1615801561329257600780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b600061329c61244b565b603a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015612ebf57600780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b60606130908484600085613798565b613357613db4565b6133678560800151610100613952565b505091835273ffffffffffffffffffffffffffffffffffffffff1660208301527fffffffff0000000000000000000000000000000000000000000000000000000016604082015290565b6133be826003835161398c565b610ec38282613a60565b6133d48260008361398c565b5050565b6133be826002835161398c565b6004546040805130606090811b60208084019190915260348084018690528451808503909101815260549093018452825192810192909220908801939093526000838152600590915281812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8a16179055905182917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af991a2600082600080886000015189602001518a604001518b606001518a8d6080015160000151604051602401808973ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff168152602001857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561356f578181015183820152602001613557565b50505050905090810190601f16801561359c5780820380516001836020036101000a031916815260200191505b509950505050505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08887846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156136b657818101518382015260200161369e565b50505050905090810190601f1680156136e35780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561370457600080fd5b505af1158015613718573d6000803e3d6000fd5b505050506040513d602081101561372e57600080fd5b5051613785576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180613e3f6023913960400191505060405180910390fd5b5060048054600101905595945050505050565b6060824710156137f3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613eb46026913960400191505060405180910390fd5b6137fc85613098565b61386757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106138d057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613893565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613932576040519150601f19603f3d011682016040523d82523d6000602084013e613937565b606091505b5091509150613947828286613a7a565b979650505050505050565b61395a613de9565b602082061561396f5760208206602003820191505b506020828101829052604080518085526000815290920101905290565b601781116139ad576139a78360e0600585901b168317613b38565b50610ec3565b60ff81116139d7576139ca836018611fe0600586901b1617613b38565b506139a783826001613b50565b61ffff8111613a02576139f5836019611fe0600586901b1617613b38565b506139a783826002613b50565b63ffffffff8111613a2f57613a2283601a611fe0600586901b1617613b38565b506139a783826004613b50565b67ffffffffffffffff8111610ec357613a5383601b611fe0600586901b1617613b38565b50611dbc83826008613b50565b613a68613de9565b612bd383846000015151848551613b69565b60608315613a89575081612bd3565b825115613a995782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613afd578181015183820152602001613ae5565b50505050905090810190601f168015613b2a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b613b40613de9565b612bd38384600001515184613c51565b613b58613de9565b613090848560000151518585613c9c565b613b71613de9565b8251821115613b7f57600080fd5b84602001518285011115613ba957613ba985613ba18760200151878601613cfa565b600202613d11565b600080865180518760208301019350808887011115613bc85787860182525b505050602084015b60208410613c0d57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09093019260209182019101613bd0565b5181517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60208690036101000a019081169019919091161790525083949350505050565b613c59613de9565b83602001518310613c7557613c75848560200151600202613d11565b835180516020858301018481535080851415613c92576001810182525b5093949350505050565b613ca4613de9565b84602001518483011115613cc157613cc185858401600202613d11565b60006001836101000a039050855183868201018583198251161781525080518487011115613cef5783860181525b509495945050505050565b600081831115613d0b575081610b90565b50919050565b8151613d1d8383613952565b50611dbc8382613a60565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282613d5e5760008555613da4565b82601f10613d7757805160ff1916838001178555613da4565b82800160010185558215613da4579182015b82811115613da4578251825591602001919060010190613d89565b50613db0929150613e03565b5090565b6040805160a081018252600080825260208201819052918101829052606081019190915260808101613de4613de9565b905290565b604051806040016040528060608152602001600081525090565b5b80821115613db05760008155600101613e0456fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373756e61626c6520746f207472616e73666572416e6443616c6c20746f206f7261636c654f7261636c65436c69656e743a2063616c6c6572206d757374206265204c617965725a65726f2e74617267657420626c6f636b206e756d6265722063616e6e6f7420626520696e2074686520667574757265416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656473656e646572207265717569726573206d6f7265204c494e4b20616c6c6f77616e636520746f20706572666f726d2063616c6c536f75726365206d75737420626520746865206f7261636c65206f662074686520726571756573745361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564436861696e6c696e6b204f7261636c653a206e6f7420737570706f7274696e67207468652028647374436861696e2c206c69627261727956657273696f6e295361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212207cbeed6087e929b141d309e9b10aed2af8676a1bcf4f66dfc519279a409b094364736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "int2str(uint256)": {
        "details": "Converts a `uint256` to its ASCII `string` decimal representation."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "toHexString(uint256)": {
        "details": "Converts a `uint256` to its ASCII `string` hexadecimal representation."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 306,
        "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
        "label": "ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENSInterface)888"
      },
      {
        "astId": 308,
        "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
        "label": "ensNode",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 310,
        "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
        "label": "link",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)983"
      },
      {
        "astId": 312,
        "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
        "label": "oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(OperatorInterface)1039"
      },
      {
        "astId": 315,
        "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
        "label": "requestCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 319,
        "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
        "label": "pendingRequests",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 4065,
        "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2128,
        "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
        "label": "_initialized",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 2131,
        "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
        "label": "_initializing",
        "offset": 1,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 2475,
        "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
        "label": "__gap",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2001,
        "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
        "label": "_owner",
        "offset": 0,
        "slot": "58",
        "type": "t_address"
      },
      {
        "astId": 2120,
        "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
        "label": "__gap",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12001,
        "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
        "label": "calledInBlock",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 12005,
        "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
        "label": "jobs",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_uint16,t_struct(Job)11999_storage)"
      },
      {
        "astId": 12007,
        "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
        "label": "endpointId",
        "offset": 0,
        "slot": "110",
        "type": "t_uint16"
      },
      {
        "astId": 12009,
        "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
        "label": "uln",
        "offset": 2,
        "slot": "110",
        "type": "t_contract(ILayerZeroUltraLightNodeV1)13613"
      },
      {
        "astId": 12013,
        "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
        "label": "approvedAddresses",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12019,
        "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
        "label": "chainPriceLookup",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))"
      },
      {
        "astId": 12023,
        "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
        "label": "deliveryAddressLookup",
        "offset": 0,
        "slot": "113",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 12025,
        "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
        "label": "arbSys",
        "offset": 0,
        "slot": "114",
        "type": "t_contract(ArbSys)11966"
      },
      {
        "astId": 12027,
        "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
        "label": "LINK",
        "offset": 0,
        "slot": "115",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ArbSys)11966": {
        "encoding": "inplace",
        "label": "contract ArbSys",
        "numberOfBytes": "20"
      },
      "t_contract(ENSInterface)888": {
        "encoding": "inplace",
        "label": "contract ENSInterface",
        "numberOfBytes": "20"
      },
      "t_contract(ILayerZeroUltraLightNodeV1)13613": {
        "encoding": "inplace",
        "label": "contract ILayerZeroUltraLightNodeV1",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)983": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(OperatorInterface)1039": {
        "encoding": "inplace",
        "label": "contract OperatorInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_uint256)"
      },
      "t_mapping(t_uint16,t_struct(Job)11999_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct ChainlinkOracleClient.Job)",
        "numberOfBytes": "32",
        "value": "t_struct(Job)11999_storage"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Job)11999_storage": {
        "encoding": "inplace",
        "label": "struct ChainlinkOracleClient.Job",
        "members": [
          {
            "astId": 11992,
            "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
            "label": "oracle",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11994,
            "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 11996,
            "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
            "label": "fee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11998,
            "contract": "contracts/chainlink/ChainlinkOracleClient.sol:ChainlinkOracleClient",
            "label": "calledInBlock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
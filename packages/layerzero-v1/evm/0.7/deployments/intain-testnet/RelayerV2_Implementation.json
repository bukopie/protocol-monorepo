{
  "address": "0xf320e721a969808e7339272E968De1659D9D98CE",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApproveAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalFee",
          "type": "uint256"
        }
      ],
      "name": "AssignJob",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "outboundProofType",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "dstNativeAmtCap",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "baseGas",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "gasPerByte",
          "type": "uint64"
        }
      ],
      "name": "SetDstConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "dstPriceRatio",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "dstGasPriceInWei",
          "type": "uint128"
        }
      ],
      "name": "SetDstPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "ValueTransferFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_outboundProofType",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_userApplication",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_payloadSize",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "assignJob",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "dstConfigLookup",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "dstNativeAmtCap",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "baseGas",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "gasPerByte",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "dstPriceLookup",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "dstPriceRatio",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "dstGasPriceInWei",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fpBytes",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_outboundProofType",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_userApplication",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_payloadSize",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uln",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relayerAddress",
          "type": "address"
        }
      ],
      "name": "isApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mptOverhead",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiplierBps",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "name": "onUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract ILayerZeroPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relayerAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approve",
          "type": "bool"
        }
      ],
      "name": "setApprovedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_outboundProofType",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "_dstNativeAmtCap",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "_baseGas",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_gasPerByte",
          "type": "uint64"
        }
      ],
      "name": "setDstConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "_dstPriceRatio",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_dstGasPriceInWei",
          "type": "uint128"
        }
      ],
      "name": "setDstPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "name": "setPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_multiplierBps",
          "type": "uint128"
        }
      ],
      "name": "setPriceMultiplierBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stargateAddress",
          "type": "address"
        }
      ],
      "name": "setStargateAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stargateBridgeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uln",
      "outputs": [
        {
          "internalType": "contract ILayerZeroUltraLightNodeV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validateProofBytes",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_dstAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_blockHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_transactionProof",
          "type": "bytes"
        }
      ],
      "name": "validateTransactionProofV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_dstAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_blockHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_transactionProof",
          "type": "bytes"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "validateTransactionProofV2",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x674318ac06180ae3a96025458845981b22f53f597f4c77f95b90b3413df17f66",
  "receipt": {
    "to": null,
    "from": "0xc13b65f7c53Cd6db2EA205a4b574b4a0858720A6",
    "contractAddress": "0xf320e721a969808e7339272E968De1659D9D98CE",
    "transactionIndex": 0,
    "gasUsed": "2671023",
    "logsBloom": "0x
    "blockHash": "0x365914e073620c79db7eede224b63c4df6a8564dd46f5dfa8c3facf9a3d366f4",
    "transactionHash": "0x674318ac06180ae3a96025458845981b22f53f597f4c77f95b90b3413df17f66",
    "logs": [],
    "blockNumber": 2508,
    "cumulativeGasUsed": "2671023",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "e7a06bb9d7292dca6a02044b3a7e52be",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApproveAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"name\":\"AssignJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"outboundProofType\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"dstNativeAmtCap\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"baseGas\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"gasPerByte\",\"type\":\"uint64\"}],\"name\":\"SetDstConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"dstPriceRatio\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"dstGasPriceInWei\",\"type\":\"uint128\"}],\"name\":\"SetDstPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"ValueTransferFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_outboundProofType\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_userApplication\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_payloadSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"assignJob\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"dstConfigLookup\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"dstNativeAmtCap\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"baseGas\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"gasPerByte\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"dstPriceLookup\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"dstPriceRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"dstGasPriceInWei\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fpBytes\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_outboundProofType\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_userApplication\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_payloadSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uln\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayerAddress\",\"type\":\"address\"}],\"name\":\"isApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mptOverhead\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplierBps\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"onUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract ILayerZeroPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approve\",\"type\":\"bool\"}],\"name\":\"setApprovedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_outboundProofType\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"_dstNativeAmtCap\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"_baseGas\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_gasPerByte\",\"type\":\"uint64\"}],\"name\":\"setDstConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"_dstPriceRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_dstGasPriceInWei\",\"type\":\"uint128\"}],\"name\":\"setDstPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_multiplierBps\",\"type\":\"uint128\"}],\"name\":\"setPriceMultiplierBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stargateAddress\",\"type\":\"address\"}],\"name\":\"setStargateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateBridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uln\",\"outputs\":[{\"internalType\":\"contract ILayerZeroUltraLightNodeV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validateProofBytes\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_transactionProof\",\"type\":\"bytes\"}],\"name\":\"validateTransactionProofV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_transactionProof\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"validateTransactionProofV2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RelayerV2.sol\":\"RelayerV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":30000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xba7ba5b188c0b27489bad1efee8d8b1dcebb502785192b22e3d69824a802983d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1fd568d8b8ca285c801fbd1d3f40f848434d850a682c0273786cada3e0b84057\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1153f6dd334c01566417b8c551122450542a2b75a2bbb379d59a8c320ed6da28\",\"license\":\"MIT\"},\"contracts/RelayerV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"hardhat-deploy/solc_0.7/proxy/Proxied.sol\\\";\\n\\nimport \\\"./interfaces/ILayerZeroRelayerV2.sol\\\";\\nimport \\\"./interfaces/ILayerZeroUltraLightNodeV2.sol\\\";\\nimport \\\"./interfaces/ILayerZeroPriceFeed.sol\\\";\\n\\ncontract RelayerV2 is ReentrancyGuard, OwnableUpgradeable, Proxied, ILayerZeroRelayerV2 {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint;\\n    using SafeMath for uint128;\\n    using SafeMath for uint64;\\n\\n    ILayerZeroUltraLightNodeV2 public uln;\\n    address public stargateBridgeAddress;\\n\\n    struct DstPrice {\\n        uint128 dstPriceRatio; // 10^10\\n        uint128 dstGasPriceInWei;\\n    }\\n\\n    struct DstConfig {\\n        uint128 dstNativeAmtCap;\\n        uint64 baseGas;\\n        uint64 gasPerByte;\\n    }\\n\\n    // [_chainId] => DstPriceData. change often\\n    mapping(uint16 => DstPrice) public dstPriceLookup;\\n    // [_chainId][_outboundProofType] => DstConfig. change much less often\\n    mapping(uint16 => mapping(uint16 => DstConfig)) public dstConfigLookup;\\n    mapping(address => bool) public approvedAddresses;\\n\\n    event Withdraw(address to, uint amount);\\n    event ApproveAddress(address addr, bool approved);\\n    event AssignJob(uint totalFee);\\n    event ValueTransferFailed(address indexed to, uint indexed quantity);\\n    event SetDstPrice(uint16 chainId, uint128 dstPriceRatio, uint128 dstGasPriceInWei);\\n    event SetDstConfig(uint16 chainId, uint16 outboundProofType, uint128 dstNativeAmtCap, uint64 baseGas, uint64 gasPerByte);\\n\\n    // new pauseable relayer\\n    bool public paused;\\n\\n    // Update for Price Feed\\n    ILayerZeroPriceFeed public priceFeed;\\n    // multipler\\n    uint128 public multiplierBps;\\n\\n    // PriceFeedContract Upgrade\\n    // all encoded param bytes except for proof for validateTransactionProofV1\\n    uint16 public validateProofBytes;\\n    uint16 public fpBytes;\\n    uint16 public mptOverhead;\\n\\n    // owner is always approved\\n    modifier onlyApproved() {\\n        if (owner() != msg.sender) {\\n            require(isApproved(msg.sender), \\\"Relayer: not approved\\\");\\n        }\\n        _;\\n    }\\n\\n    function initialize(address _uln, address _priceFeed) public proxied initializer {\\n        __Ownable_init();\\n        uln = ILayerZeroUltraLightNodeV2(_uln);\\n        setApprovedAddress(address(this), true);\\n        multiplierBps = 12000;\\n        priceFeed = ILayerZeroPriceFeed(_priceFeed);\\n        validateProofBytes = 164;\\n        fpBytes = 160;\\n        mptOverhead = 500;\\n    }\\n\\n    function onUpgrade(address _priceFeed) public proxied {\\n        multiplierBps = 12000;\\n        priceFeed = ILayerZeroPriceFeed(_priceFeed);\\n        validateProofBytes = 164;\\n        fpBytes = 160;\\n        mptOverhead = 500;\\n    }\\n\\n    //----------------------------------------------------------------------------------\\n    // onlyApproved\\n\\n    function setDstPrice(uint16 _chainId, uint128 _dstPriceRatio, uint128 _dstGasPriceInWei) external onlyApproved {\\n        dstPriceLookup[_chainId] = DstPrice(_dstPriceRatio, _dstGasPriceInWei);\\n        emit SetDstPrice(_chainId, _dstPriceRatio, _dstGasPriceInWei);\\n    }\\n\\n    function setPriceFeed(address _priceFeed) external onlyApproved {\\n        priceFeed = ILayerZeroPriceFeed(_priceFeed);\\n    }\\n\\n    function setPriceMultiplierBps(uint128 _multiplierBps) external onlyApproved {\\n        multiplierBps = _multiplierBps;\\n    }\\n\\n    function setDstConfig(uint16 _chainId, uint16 _outboundProofType, uint128 _dstNativeAmtCap, uint64 _baseGas, uint64 _gasPerByte) external onlyApproved {\\n        dstConfigLookup[_chainId][_outboundProofType] = DstConfig(_dstNativeAmtCap, _baseGas, _gasPerByte);\\n        emit SetDstConfig(_chainId, _outboundProofType, _dstNativeAmtCap, _baseGas, _gasPerByte);\\n    }\\n\\n    function setStargateAddress(address _stargateAddress) external onlyApproved {\\n        stargateBridgeAddress = _stargateAddress;\\n    }\\n\\n    //----------------------------------------------------------------------------------\\n    // onlyOwner\\n\\n    function setApprovedAddress(address _relayerAddress, bool _approve) public onlyOwner {\\n        approvedAddresses[_relayerAddress] = _approve;\\n        emit ApproveAddress(_relayerAddress, _approve);\\n    }\\n\\n    function setPause(bool _paused) public onlyOwner {\\n        paused = _paused;\\n    }\\n\\n    // txType 1\\n    // bytes  [2       32      ]\\n    // fields [txType  extraGas]\\n    // txType 2\\n    // bytes  [2       32        32            bytes[]         ]\\n    // fields [txType  extraGas  dstNativeAmt  dstNativeAddress]\\n    // User App Address is not used in this version\\n    function _getPrices(uint16 _dstChainId, uint16 _outboundProofType, address, uint _payloadSize, bytes memory _adapterParameters) internal view returns (uint) {\\n        require(!paused, \\\"Admin: paused\\\");\\n        // decoding the _adapterParameters - reverts if type 2 and there is no dstNativeAddress\\n        require(_adapterParameters.length == 34 || _adapterParameters.length > 66, \\\"Relayer: wrong _adapterParameters size\\\");\\n        uint16 txType;\\n        uint extraGas;\\n        assembly {\\n            txType := mload(add(_adapterParameters, 2))\\n            extraGas := mload(add(_adapterParameters, 34))\\n        }\\n        require(extraGas > 0, \\\"Relayer: gas too low\\\");\\n        require(txType == 1 || txType == 2, \\\"Relayer: unsupported txType\\\");\\n\\n        DstConfig storage dstConfig = dstConfigLookup[_dstChainId][_outboundProofType];\\n\\n        uint dstNativeAmt = 0;\\n        if (txType == 2) {\\n            assembly {\\n                dstNativeAmt := mload(add(_adapterParameters, 66))\\n            }\\n            require(dstConfig.dstNativeAmtCap >= dstNativeAmt, \\\"Relayer: dstNativeAmt too large\\\");\\n        }\\n\\n        // validateTransactionProof bytes = fixedBytes + proofBytes\\n        // V2 has an extra 32 bytes for payable address\\n        uint totalFixedBytes = txType == 2 ? uint(validateProofBytes).add(32) : validateProofBytes;\\n        uint proofBytes = _outboundProofType == 2 ? fpBytes : _payloadSize.add(mptOverhead);\\n        uint totalCallDataBytes = totalFixedBytes.add(proofBytes);\\n\\n        uint16 dstChainId = _dstChainId; // stack too deep\\n        (uint fee, uint128 priceRatio) = priceFeed.estimateFeeByChain(dstChainId, totalCallDataBytes, dstConfig.baseGas.add(extraGas));\\n        uint airdropAmount = dstNativeAmt.mul(priceRatio).div(10**10);\\n        return fee.add(airdropAmount).mul(multiplierBps).div(10000);\\n    }\\n\\n    function getFee(uint16 _dstChainId, uint16 _outboundProofType, address _userApplication, uint _payloadSize, bytes calldata _adapterParams) external view override returns (uint) {\\n        require(_payloadSize <= 10000, \\\"Relayer: _payloadSize tooooo big\\\");\\n        return _getPrices(_dstChainId, _outboundProofType, _userApplication, _payloadSize, _adapterParams);\\n    }\\n\\n    function isApproved(address _relayerAddress) public view returns (bool) {\\n        return approvedAddresses[_relayerAddress];\\n    }\\n\\n    function assignJob(uint16 _dstChainId, uint16 _outboundProofType, address _userApplication, uint _payloadSize, bytes calldata _adapterParams) external override returns (uint) {\\n        require(msg.sender == address(uln), \\\"Relayer: invalid uln\\\");\\n        require(_payloadSize <= 10000, \\\"Relayer: _payloadSize tooooo big\\\");\\n        uint fee = _getPrices(_dstChainId, _outboundProofType, _userApplication, _payloadSize, _adapterParams);\\n        emit AssignJob(fee);\\n        return fee;\\n    }\\n\\n    function withdrawFee(address payable _to, uint _amount) external override onlyApproved {\\n        uint totalFee = uln.accruedNativeFee(address(this));\\n        require(_amount <= totalFee, \\\"Relayer: not enough fee for withdrawal\\\");\\n        uln.withdrawNative(_to, _amount);\\n    }\\n\\n    function validateTransactionProofV2(uint16 _srcChainId, address _dstAddress, uint _gasLimit, bytes32 _blockHash, bytes32 _data, bytes calldata _transactionProof, address payable _to) external payable onlyApproved nonReentrant {\\n        (bool sent, ) = _to.call{value: msg.value}(\\\"\\\");\\n        //require(sent, \\\"Relayer: failed to send ether\\\");\\n        if (!sent) {\\n            emit ValueTransferFailed(_to, msg.value);\\n        }\\n        uln.validateTransactionProof(_srcChainId, _dstAddress, _gasLimit, _blockHash, _data, _transactionProof);\\n    }\\n\\n    function validateTransactionProofV1(uint16 _srcChainId, address _dstAddress, uint _gasLimit, bytes32 _blockHash, bytes32 _data, bytes calldata _transactionProof) external onlyApproved nonReentrant {\\n        uln.validateTransactionProof(_srcChainId, _dstAddress, _gasLimit, _blockHash, _data, _transactionProof);\\n    }\\n}\\n\",\"keccak256\":\"0xf8b18e3770ffe945791ac848b99df0b5bcc0d1bdd165833200a4747964ee6d28\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\ninterface ILayerZeroPriceFeed {\\n    /**\\n     * @dev\\n     * priceRatio: (USD price of 1 unit of remote native token in unit of local native token) * PRICE_RATIO_DENOMINATOR\\n     */\\n\\n    struct Price {\\n        uint128 priceRatio; // float value * 10 ^ 10, decimal awared. for aptos to evm, the basis would be (10^18 / 10^8) * 10 ^10 = 10 ^ 20.\\n        uint64 gasPriceInUnit; // for evm, it is in wei, for aptos, it is in octas.\\n        uint32 gasPerByte;\\n    }\\n\\n    struct UpdatePrice {\\n        uint16 chainId;\\n        Price price;\\n    }\\n\\n    /**\\n     * @dev\\n     *    ArbGasInfo.go:GetPricesInArbGas\\n     *\\n     */\\n    struct ArbitrumPriceExt {\\n        uint64 gasPerL2Tx; // L2 overhead\\n        uint32 gasPerL1CallDataByte;\\n    }\\n\\n    struct UpdatePriceExt {\\n        uint16 chainId;\\n        Price price;\\n        ArbitrumPriceExt extend;\\n    }\\n\\n    function getPrice(uint16 _dstChainId) external view returns (Price memory);\\n\\n    function getPriceRatioDenominator() external view returns (uint128);\\n    function estimateFeeByChain(uint16 _dstChainId, uint _callDataSize, uint _gas) external view returns (uint fee, uint128 priceRatio);\\n}\\n\",\"keccak256\":\"0xaa4cc4ded34f169c947545f51dd8599d9076a9749482a9b910edffa28ab6c82a\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroRelayerV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\n\\ninterface ILayerZeroRelayerV2 {\\n    // @notice query price and assign jobs at the same time\\n    // @param _dstChainId - the destination endpoint identifier\\n    // @param _outboundProofType - the proof type identifier to specify proof to be relayed\\n    // @param _userApplication - the source sending contract address. relayers may apply price discrimination to user apps\\n    // @param _payloadSize - the length of the payload. it is an indicator of gas usage for relaying cross-chain messages\\n    // @param _adapterParams - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function assignJob(uint16 _dstChainId, uint16 _outboundProofType, address _userApplication, uint _payloadSize, bytes calldata _adapterParams) external returns (uint price);\\n\\n    // @notice query the relayer price for relaying the payload and its proof to the destination chain\\n    // @param _dstChainId - the destination endpoint identifier\\n    // @param _outboundProofType - the proof type identifier to specify proof to be relayed\\n    // @param _userApplication - the source sending contract address. relayers may apply price discrimination to user apps\\n    // @param _payloadSize - the length of the payload. it is an indicator of gas usage for relaying cross-chain messages\\n    // @param _adapterParams - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function getFee(uint16 _dstChainId, uint16 _outboundProofType, address _userApplication, uint _payloadSize, bytes calldata _adapterParams) external view returns (uint price);\\n\\n    // @notice withdraw the accrued fee in ultra light node\\n    // @param _to - the fee receiver\\n    // @param _amount - the withdrawal amount\\n    function withdrawFee(address payable _to, uint _amount) external;\\n}\\n\",\"keccak256\":\"0x8796cf812e05333db48a49f0d397510cfa81a2bf32cb5da2b9196f5ec4471e71\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroUltraLightNodeV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\ninterface ILayerZeroUltraLightNodeV2 {\\n    // Relayer functions\\n    function validateTransactionProof(uint16 _srcChainId, address _dstAddress, uint _gasLimit, bytes32 _lookupHash, bytes32 _blockData, bytes calldata _transactionProof) external;\\n\\n    // an Oracle delivers the block data using updateHash()\\n    function updateHash(uint16 _srcChainId, bytes32 _lookupHash, uint _confirmations, bytes32 _blockData) external;\\n\\n    // can only withdraw the receivable of the msg.sender\\n    function withdrawNative(address payable _to, uint _amount) external;\\n\\n    function withdrawZRO(address _to, uint _amount) external;\\n\\n    // view functions\\n    function getAppConfig(uint16 _remoteChainId, address _userApplicationAddress) external view returns (ApplicationConfiguration memory);\\n\\n    function accruedNativeFee(address _address) external view returns (uint);\\n\\n    struct ApplicationConfiguration {\\n        uint16 inboundProofLibraryVersion;\\n        uint64 inboundBlockConfirmations;\\n        address relayer;\\n        uint16 outboundProofType;\\n        uint64 outboundBlockConfirmations;\\n        address oracle;\\n    }\\n\\n    event HashReceived(uint16 indexed srcChainId, address indexed oracle, bytes32 lookupHash, bytes32 blockData, uint confirmations);\\n    event RelayerParams(bytes adapterParams, uint16 outboundProofType);\\n    event Packet(bytes payload);\\n    event InvalidDst(uint16 indexed srcChainId, bytes srcAddress, address indexed dstAddress, uint64 nonce, bytes32 payloadHash);\\n    event PacketReceived(uint16 indexed srcChainId, bytes srcAddress, address indexed dstAddress, uint64 nonce, bytes32 payloadHash);\\n    event AppConfigUpdated(address indexed userApplication, uint indexed configType, bytes newConfig);\\n    event AddInboundProofLibraryForChain(uint16 indexed chainId, address lib);\\n    event EnableSupportedOutboundProof(uint16 indexed chainId, uint16 proofType);\\n    event SetChainAddressSize(uint16 indexed chainId, uint size);\\n    event SetDefaultConfigForChainId(uint16 indexed chainId, uint16 inboundProofLib, uint64 inboundBlockConfirm, address relayer, uint16 outboundProofType, uint64 outboundBlockConfirm, address oracle);\\n    event SetDefaultAdapterParamsForChainId(uint16 indexed chainId, uint16 indexed proofType, bytes adapterParams);\\n    event SetLayerZeroToken(address indexed tokenAddress);\\n    event SetRemoteUln(uint16 indexed chainId, bytes32 uln);\\n    event SetTreasury(address indexed treasuryAddress);\\n    event WithdrawZRO(address indexed msgSender, address indexed to, uint amount);\\n    event WithdrawNative(address indexed msgSender, address indexed to, uint amount);\\n}\\n\",\"keccak256\":\"0x16c9c5227a5ebbf52ff579f956674a25c98d149d169f6070af274c2a08276352\",\"license\":\"BUSL-1.1\"},\"hardhat-deploy/solc_0.7/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x760a00cd889372a2358732403723d8a13cb8b02bb82450a9bf5488177828aa79\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600055612f4d806100256000396000f3fe6080604052600436106101c25760003560e01c8063724e78da116100f7578063b8f8bad411610095578063f136a87411610064578063f136a874146104d5578063f2fde38b146104f5578063fa34c84e14610515578063fd9be52214610535576101c2565b8063b8f8bad414610455578063bedb86fb14610475578063c03f152914610495578063c3b04e7f146104b5576101c2565b806381ba209a116100d157806381ba209a146103f45780638da5cb5b1461040957806398dabd501461041e578063ac353e0414610433576101c2565b8063724e78da14610391578063741bef1a146103b1578063765a8a54146103c6576101c2565b80635886ea6511610164578063673448dd1161013e578063673448dd1461032557806369cf4e3a146103455780636c473aff14610367578063715018a61461037c576101c2565b80635886ea65146102b45780635c975abb146102e15780636348d26914610303576101c2565b8063252f7b01116101a0578063252f7b01146102345780633f10348714610254578063485cc95514610274578063575765e214610294576101c2565b806303343f54146101c75780630508941e146101e957806323161ff8146101fc575b600080fd5b3480156101d357600080fd5b506101e76101e236600461264f565b610555565b005b6101e76101f73660046127db565b610608565b34801561020857600080fd5b5061021c6102173660046128b8565b61083e565b60405161022b93929190612cf8565b60405180910390f35b34801561024057600080fd5b506101e761024f366004612759565b6108ac565b34801561026057600080fd5b506101e761026f366004612960565b610a28565b34801561028057600080fd5b506101e761028f366004612696565b610bda565b3480156102a057600080fd5b506101e76102af3660046126ce565b610ee0565b3480156102c057600080fd5b506102d46102cf3660046128e1565b611015565b60405161022b9190612e59565b3480156102ed57600080fd5b506102f661112e565b60405161022b9190612a74565b34801561030f57600080fd5b50610318611137565b60405161022b9190612a05565b34801561033157600080fd5b506102f661034036600461264f565b611153565b34801561035157600080fd5b5061035a611182565b60405161022b9190612d2c565b34801561037357600080fd5b506103186111a2565b34801561038857600080fd5b506101e76111be565b34801561039d57600080fd5b506101e76103ac36600461264f565b6112d5565b3480156103bd57600080fd5b50610318611384565b3480156103d257600080fd5b506103e66103e136600461273f565b6113a5565b60405161022b929190612cd5565b34801561040057600080fd5b5061035a6113e1565b34801561041557600080fd5b50610318611403565b34801561042a57600080fd5b5061035a61141f565b34801561043f57600080fd5b5061044861143d565b60405161022b9190612cb8565b34801561046157600080fd5b506101e7610470366004612870565b611455565b34801561048157600080fd5b506101e7610490366004612702565b61157d565b3480156104a157600080fd5b506102d46104b03660046128e1565b611656565b3480156104c157600080fd5b506101e76104d0366004612723565b6116e2565b3480156104e157600080fd5b506102f66104f036600461264f565b611788565b34801561050157600080fd5b506101e761051036600461264f565b61179d565b34801561052157600080fd5b506101e761053036600461264f565b61193f565b34801561054157600080fd5b506101e761055036600461266b565b611aeb565b3361055e611403565b73ffffffffffffffffffffffffffffffffffffffff16146105c15761058233611153565b6105c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612a7f565b60405180910390fd5b606780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b33610611611403565b73ffffffffffffffffffffffffffffffffffffffff161461066b5761063533611153565b61066b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612a7f565b600260005414156106dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260008190555060008173ffffffffffffffffffffffffffffffffffffffff163460405161070b90612a02565b60006040518083038185875af1925050503d8060008114610748576040519150601f19603f3d011682016040523d82523d6000602084013e61074d565b606091505b505090508061079a57604051349073ffffffffffffffffffffffffffffffffffffffff8416907f2c7a964ca3de5ec1d42d9822f9bbd0eb142a59cc9f855e9d93813b773192c7a390600090a35b6066546040517f987fa2d500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063987fa2d5906107fc908c908c908c908c908c908c908c90600401612d3b565b600060405180830381600087803b15801561081657600080fd5b505af115801561082a573d6000803e3d6000fd5b505060016000555050505050505050505050565b60696020908152600092835260408084209091529082529020546fffffffffffffffffffffffffffffffff81169067ffffffffffffffff7001000000000000000000000000000000008204811691780100000000000000000000000000000000000000000000000090041683565b336108b5611403565b73ffffffffffffffffffffffffffffffffffffffff161461090f576108d933611153565b61090f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612a7f565b6002600054141561098157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556066546040517f987fa2d500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063987fa2d5906109e8908a908a908a908a908a908a908a90600401612d3b565b600060405180830381600087803b158015610a0257600080fd5b505af1158015610a16573d6000803e3d6000fd5b50506001600055505050505050505050565b33610a31611403565b73ffffffffffffffffffffffffffffffffffffffff1614610a8b57610a5533611153565b610a8b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612a7f565b604080516060810182526fffffffffffffffffffffffffffffffff858116825267ffffffffffffffff858116602080850191825286831685870190815261ffff8c8116600090815260698452888120918d16815292529086902094518554925191517fffffffffffffffffffffffffffffffff000000000000000000000000000000009093169416939093177fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff16700100000000000000000000000000000000938316939093029290921777ffffffffffffffffffffffffffffffffffffffffffffffff1678010000000000000000000000000000000000000000000000009290911691909102179055517fd053e021dda81c7c2794ff89e320caea5379962d49ed383a3bd0a54ffc4b932f90610bcb9087908790879087908790612df3565b60405180910390a15050505050565b6000610be4611cc0565b905073ffffffffffffffffffffffffffffffffffffffff8116610c3d5773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355610c5f565b3373ffffffffffffffffffffffffffffffffffffffff821614610c5f57600080fd5b600154610100900460ff1680610c785750610c78611ce5565b80610c86575060015460ff16155b610cdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612ec9602e913960400191505060405180910390fd5b600154610100900460ff16158015610d4057600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9091166101001716811790555b610d48611cf6565b606680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8616179055610d93306001610ee0565b606c8054606b80547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff881602179055612ee07fffffffffffffffffffffffffffffffff00000000000000000000000000000000909116177fffffffffffffffffffffffffffff0000ffffffffffffffffffffffffffffffff1670a400000000000000000000000000000000177fffffffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffff1672a0000000000000000000000000000000000000177fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff167501f400000000000000000000000000000000000000001790558015610eda57600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50505050565b610ee8611e19565b73ffffffffffffffffffffffffffffffffffffffff16610f06611403565b73ffffffffffffffffffffffffffffffffffffffff1614610f8857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152606a60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016831515179055517fb10786d0bfa68fb1aa29552d9203e5f545f7c073ff0784da1de1d800986f1023906110099084908490612a4c565b60405180910390a15050565b60665460009073ffffffffffffffffffffffffffffffffffffffff163314611069576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612bdc565b6127108411156110a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612ab6565b60006110ea8888888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e1d92505050565b90507fdf21c415b78ed2552cc9971249e32a053abce6087a0ae0fbf3f78db5174a34938160405161111b9190612e59565b60405180910390a1979650505050505050565b606b5460ff1681565b60675473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff81166000908152606a602052604090205460ff165b919050565b606c547201000000000000000000000000000000000000900461ffff1681565b60665473ffffffffffffffffffffffffffffffffffffffff1681565b6111c6611e19565b73ffffffffffffffffffffffffffffffffffffffff166111e4611403565b73ffffffffffffffffffffffffffffffffffffffff161461126657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60345460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603480547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b336112de611403565b73ffffffffffffffffffffffffffffffffffffffff16146113385761130233611153565b611338576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612a7f565b606b805473ffffffffffffffffffffffffffffffffffffffff909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b606b54610100900473ffffffffffffffffffffffffffffffffffffffff1681565b6068602052600090815260409020546fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041682565b606c5474010000000000000000000000000000000000000000900461ffff1681565b60345473ffffffffffffffffffffffffffffffffffffffff1690565b606c54700100000000000000000000000000000000900461ffff1681565b606c546fffffffffffffffffffffffffffffffff1681565b3361145e611403565b73ffffffffffffffffffffffffffffffffffffffff16146114b85761148233611153565b6114b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612a7f565b6040805180820182526fffffffffffffffffffffffffffffffff8481168252838116602080840191825261ffff8816600090815260689091528490209251835491517fffffffffffffffffffffffffffffffff000000000000000000000000000000009092169083161782167001000000000000000000000000000000009190921602179055517fa812e6d95f70b4a1555cf2cfcc53d6aa10ca827ef87ce47a0e145eebc0c19a3c9061157090859085908590612dc5565b60405180910390a1505050565b611585611e19565b73ffffffffffffffffffffffffffffffffffffffff166115a3611403565b73ffffffffffffffffffffffffffffffffffffffff161461162557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b606b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6000612710841115611694576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612ab6565b6116d78787878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e1d92505050565b979650505050505050565b336116eb611403565b73ffffffffffffffffffffffffffffffffffffffff16146117455761170f33611153565b611745576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612a7f565b606c80547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055565b606a6020526000908152604090205460ff1681565b6117a5611e19565b73ffffffffffffffffffffffffffffffffffffffff166117c3611403565b73ffffffffffffffffffffffffffffffffffffffff161461184557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166118b1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180612ea36026913960400191505060405180910390fd5b60345460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000611949611cc0565b905073ffffffffffffffffffffffffffffffffffffffff81166119a25773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103556119c4565b3373ffffffffffffffffffffffffffffffffffffffff8216146119c457600080fd5b50606c8054606b80547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff959095169490940293909317909255612ee07fffffffffffffffffffffffffffffffff00000000000000000000000000000000909216919091177fffffffffffffffffffffffffffff0000ffffffffffffffffffffffffffffffff1670a400000000000000000000000000000000177fffffffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffff1672a0000000000000000000000000000000000000177fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff167501f40000000000000000000000000000000000000000179055565b33611af4611403565b73ffffffffffffffffffffffffffffffffffffffff1614611b4e57611b1833611153565b611b4e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612a7f565b6066546040517f69412bfa00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff16906369412bfa90611ba5903090600401612a05565b60206040518083038186803b158015611bbd57600080fd5b505afa158015611bd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf591906129c6565b905080821115611c31576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612b7f565b6066546040517f07b18bde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906307b18bde90611c899086908690600401612a26565b600060405180830381600087803b158015611ca357600080fd5b505af1158015611cb7573d6000803e3d6000fd5b50505050505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b6000611cf0306121b7565b15905090565b600154610100900460ff1680611d0f5750611d0f611ce5565b80611d1d575060015460ff16155b611d72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612ec9602e913960400191505060405180910390fd5b600154610100900460ff16158015611dd757600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9091166101001716811790555b611ddf6121bd565b611de76122ce565b8015611e1657600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50565b3390565b606b5460009060ff1615611e5d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612c13565b815160221480611e6e575060428251115b611ea4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612aeb565b6002820151602283015180611ee5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612c4a565b8161ffff1660011480611efc57508161ffff166002145b611f32576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612b48565b61ffff88811660009081526069602090815260408083208b85168452909152812091841660021415611fb15750604285015181546fffffffffffffffffffffffffffffffff16811115611fb1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612c81565b60008461ffff16600214611fdf57606c54700100000000000000000000000000000000900461ffff16612005565b606c5461200590700100000000000000000000000000000000900461ffff16602061245d565b905060008a61ffff1660021461204457606c5461203f908a9074010000000000000000000000000000000000000000900461ffff1661245d565b612062565b606c547201000000000000000000000000000000000000900461ffff165b90506000612070838361245d565b606b5486549192508e91600091829161010090910473ffffffffffffffffffffffffffffffffffffffff1690637bc3c9ab90859087906120ce90700100000000000000000000000000000000900467ffffffffffffffff168e61245d565b6040518463ffffffff1660e01b81526004016120ec93929190612e3d565b604080518083038186803b15801561210357600080fd5b505afa158015612117573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213b91906129de565b9092509050600061216d6402540be4006121678a6fffffffffffffffffffffffffffffffff86166124da565b9061254d565b606c549091506121a19061271090612167906fffffffffffffffffffffffffffffffff1661219b878661245d565b906124da565b9b50505050505050505050505095945050505050565b3b151590565b600154610100900460ff16806121d657506121d6611ce5565b806121e4575060015460ff16155b612239576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612ec9602e913960400191505060405180910390fd5b600154610100900460ff16158015611de757600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9091166101001716811790558015611e1657600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600154610100900460ff16806122e757506122e7611ce5565b806122f5575060015460ff16155b61234a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612ec9602e913960400191505060405180910390fd5b600154610100900460ff161580156123af57600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9091166101001716811790555b60006123b9611e19565b603480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611e1657600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b6000828201838110156124d157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000826124e9575060006124d4565b828202828482816124f657fe5b04146124d1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180612ef76021913960400191505060405180910390fd5b60008082116125bd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816125c657fe5b049392505050565b8035801515811461117d57600080fd5b60008083601f8401126125ef578182fd5b50813567ffffffffffffffff811115612606578182fd5b60208301915083602082850101111561261e57600080fd5b9250929050565b803561ffff8116811461117d57600080fd5b803567ffffffffffffffff8116811461117d57600080fd5b600060208284031215612660578081fd5b81356124d181612e62565b6000806040838503121561267d578081fd5b823561268881612e62565b946020939093013593505050565b600080604083850312156126a8578182fd5b82356126b381612e62565b915060208301356126c381612e62565b809150509250929050565b600080604083850312156126e0578182fd5b82356126eb81612e62565b91506126f9602084016125ce565b90509250929050565b600060208284031215612713578081fd5b61271c826125ce565b9392505050565b600060208284031215612734578081fd5b81356124d181612e84565b600060208284031215612750578081fd5b61271c82612625565b600080600080600080600060c0888a031215612773578283fd5b61277c88612625565b9650602088013561278c81612e62565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff8111156127bc578283fd5b6127c88a828b016125de565b989b979a50959850939692959293505050565b60008060008060008060008060e0898b0312156127f6578081fd5b6127ff89612625565b9750602089013561280f81612e62565b965060408901359550606089013594506080890135935060a089013567ffffffffffffffff81111561283f578182fd5b61284b8b828c016125de565b90945092505060c089013561285f81612e62565b809150509295985092959890939650565b600080600060608486031215612884578283fd5b61288d84612625565b9250602084013561289d81612e84565b915060408401356128ad81612e84565b809150509250925092565b600080604083850312156128ca578182fd5b6128d383612625565b91506126f960208401612625565b60008060008060008060a087890312156128f9578384fd5b61290287612625565b955061291060208801612625565b9450604087013561292081612e62565b935060608701359250608087013567ffffffffffffffff811115612942578283fd5b61294e89828a016125de565b979a9699509497509295939492505050565b600080600080600060a08688031215612977578283fd5b61298086612625565b945061298e60208701612625565b9350604086013561299e81612e84565b92506129ac60608701612637565b91506129ba60808701612637565b90509295509295909350565b6000602082840312156129d7578081fd5b5051919050565b600080604083850312156129f0578182fd5b8251915060208301516126c381612e84565b90565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9290921682521515602082015260400190565b901515815260200190565b60208082526015908201527f52656c617965723a206e6f7420617070726f7665640000000000000000000000604082015260600190565b6020808252818101527f52656c617965723a205f7061796c6f616453697a6520746f6f6f6f6f20626967604082015260600190565b60208082526026908201527f52656c617965723a2077726f6e67205f61646170746572506172616d6574657260408201527f732073697a650000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f52656c617965723a20756e737570706f72746564207478547970650000000000604082015260600190565b60208082526026908201527f52656c617965723a206e6f7420656e6f7567682066656520666f72207769746860408201527f64726177616c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f52656c617965723a20696e76616c696420756c6e000000000000000000000000604082015260600190565b6020808252600d908201527f41646d696e3a2070617573656400000000000000000000000000000000000000604082015260600190565b60208082526014908201527f52656c617965723a2067617320746f6f206c6f77000000000000000000000000604082015260600190565b6020808252601f908201527f52656c617965723a206473744e6174697665416d7420746f6f206c6172676500604082015260600190565b6fffffffffffffffffffffffffffffffff91909116815260200190565b6fffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6fffffffffffffffffffffffffffffffff93909316835267ffffffffffffffff918216602084015216604082015260600190565b61ffff91909116815260200190565b600061ffff8916825273ffffffffffffffffffffffffffffffffffffffff8816602083015286604083015285606083015284608083015260c060a08301528260c0830152828460e084013781830160e090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601019695505050505050565b61ffff9390931683526fffffffffffffffffffffffffffffffff918216602084015216604082015260600190565b61ffff95861681529390941660208401526fffffffffffffffffffffffffffffffff91909116604083015267ffffffffffffffff9081166060830152909116608082015260a00190565b61ffff9390931683526020830191909152604082015260600190565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff81168114611e1657600080fd5b6fffffffffffffffffffffffffffffffff81168114611e1657600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a264697066735822122020cf222bc5620e2b44001ee9f4bab4c168f4717ae51de3117b9aba834ed0a78564736f6c63430007060033",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c8063724e78da116100f7578063b8f8bad411610095578063f136a87411610064578063f136a874146104d5578063f2fde38b146104f5578063fa34c84e14610515578063fd9be52214610535576101c2565b8063b8f8bad414610455578063bedb86fb14610475578063c03f152914610495578063c3b04e7f146104b5576101c2565b806381ba209a116100d157806381ba209a146103f45780638da5cb5b1461040957806398dabd501461041e578063ac353e0414610433576101c2565b8063724e78da14610391578063741bef1a146103b1578063765a8a54146103c6576101c2565b80635886ea6511610164578063673448dd1161013e578063673448dd1461032557806369cf4e3a146103455780636c473aff14610367578063715018a61461037c576101c2565b80635886ea65146102b45780635c975abb146102e15780636348d26914610303576101c2565b8063252f7b01116101a0578063252f7b01146102345780633f10348714610254578063485cc95514610274578063575765e214610294576101c2565b806303343f54146101c75780630508941e146101e957806323161ff8146101fc575b600080fd5b3480156101d357600080fd5b506101e76101e236600461264f565b610555565b005b6101e76101f73660046127db565b610608565b34801561020857600080fd5b5061021c6102173660046128b8565b61083e565b60405161022b93929190612cf8565b60405180910390f35b34801561024057600080fd5b506101e761024f366004612759565b6108ac565b34801561026057600080fd5b506101e761026f366004612960565b610a28565b34801561028057600080fd5b506101e761028f366004612696565b610bda565b3480156102a057600080fd5b506101e76102af3660046126ce565b610ee0565b3480156102c057600080fd5b506102d46102cf3660046128e1565b611015565b60405161022b9190612e59565b3480156102ed57600080fd5b506102f661112e565b60405161022b9190612a74565b34801561030f57600080fd5b50610318611137565b60405161022b9190612a05565b34801561033157600080fd5b506102f661034036600461264f565b611153565b34801561035157600080fd5b5061035a611182565b60405161022b9190612d2c565b34801561037357600080fd5b506103186111a2565b34801561038857600080fd5b506101e76111be565b34801561039d57600080fd5b506101e76103ac36600461264f565b6112d5565b3480156103bd57600080fd5b50610318611384565b3480156103d257600080fd5b506103e66103e136600461273f565b6113a5565b60405161022b929190612cd5565b34801561040057600080fd5b5061035a6113e1565b34801561041557600080fd5b50610318611403565b34801561042a57600080fd5b5061035a61141f565b34801561043f57600080fd5b5061044861143d565b60405161022b9190612cb8565b34801561046157600080fd5b506101e7610470366004612870565b611455565b34801561048157600080fd5b506101e7610490366004612702565b61157d565b3480156104a157600080fd5b506102d46104b03660046128e1565b611656565b3480156104c157600080fd5b506101e76104d0366004612723565b6116e2565b3480156104e157600080fd5b506102f66104f036600461264f565b611788565b34801561050157600080fd5b506101e761051036600461264f565b61179d565b34801561052157600080fd5b506101e761053036600461264f565b61193f565b34801561054157600080fd5b506101e761055036600461266b565b611aeb565b3361055e611403565b73ffffffffffffffffffffffffffffffffffffffff16146105c15761058233611153565b6105c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612a7f565b60405180910390fd5b606780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b33610611611403565b73ffffffffffffffffffffffffffffffffffffffff161461066b5761063533611153565b61066b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612a7f565b600260005414156106dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260008190555060008173ffffffffffffffffffffffffffffffffffffffff163460405161070b90612a02565b60006040518083038185875af1925050503d8060008114610748576040519150601f19603f3d011682016040523d82523d6000602084013e61074d565b606091505b505090508061079a57604051349073ffffffffffffffffffffffffffffffffffffffff8416907f2c7a964ca3de5ec1d42d9822f9bbd0eb142a59cc9f855e9d93813b773192c7a390600090a35b6066546040517f987fa2d500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063987fa2d5906107fc908c908c908c908c908c908c908c90600401612d3b565b600060405180830381600087803b15801561081657600080fd5b505af115801561082a573d6000803e3d6000fd5b505060016000555050505050505050505050565b60696020908152600092835260408084209091529082529020546fffffffffffffffffffffffffffffffff81169067ffffffffffffffff7001000000000000000000000000000000008204811691780100000000000000000000000000000000000000000000000090041683565b336108b5611403565b73ffffffffffffffffffffffffffffffffffffffff161461090f576108d933611153565b61090f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612a7f565b6002600054141561098157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556066546040517f987fa2d500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063987fa2d5906109e8908a908a908a908a908a908a908a90600401612d3b565b600060405180830381600087803b158015610a0257600080fd5b505af1158015610a16573d6000803e3d6000fd5b50506001600055505050505050505050565b33610a31611403565b73ffffffffffffffffffffffffffffffffffffffff1614610a8b57610a5533611153565b610a8b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612a7f565b604080516060810182526fffffffffffffffffffffffffffffffff858116825267ffffffffffffffff858116602080850191825286831685870190815261ffff8c8116600090815260698452888120918d16815292529086902094518554925191517fffffffffffffffffffffffffffffffff000000000000000000000000000000009093169416939093177fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff16700100000000000000000000000000000000938316939093029290921777ffffffffffffffffffffffffffffffffffffffffffffffff1678010000000000000000000000000000000000000000000000009290911691909102179055517fd053e021dda81c7c2794ff89e320caea5379962d49ed383a3bd0a54ffc4b932f90610bcb9087908790879087908790612df3565b60405180910390a15050505050565b6000610be4611cc0565b905073ffffffffffffffffffffffffffffffffffffffff8116610c3d5773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355610c5f565b3373ffffffffffffffffffffffffffffffffffffffff821614610c5f57600080fd5b600154610100900460ff1680610c785750610c78611ce5565b80610c86575060015460ff16155b610cdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612ec9602e913960400191505060405180910390fd5b600154610100900460ff16158015610d4057600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9091166101001716811790555b610d48611cf6565b606680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8616179055610d93306001610ee0565b606c8054606b80547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff881602179055612ee07fffffffffffffffffffffffffffffffff00000000000000000000000000000000909116177fffffffffffffffffffffffffffff0000ffffffffffffffffffffffffffffffff1670a400000000000000000000000000000000177fffffffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffff1672a0000000000000000000000000000000000000177fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff167501f400000000000000000000000000000000000000001790558015610eda57600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50505050565b610ee8611e19565b73ffffffffffffffffffffffffffffffffffffffff16610f06611403565b73ffffffffffffffffffffffffffffffffffffffff1614610f8857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152606a60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016831515179055517fb10786d0bfa68fb1aa29552d9203e5f545f7c073ff0784da1de1d800986f1023906110099084908490612a4c565b60405180910390a15050565b60665460009073ffffffffffffffffffffffffffffffffffffffff163314611069576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612bdc565b6127108411156110a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612ab6565b60006110ea8888888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e1d92505050565b90507fdf21c415b78ed2552cc9971249e32a053abce6087a0ae0fbf3f78db5174a34938160405161111b9190612e59565b60405180910390a1979650505050505050565b606b5460ff1681565b60675473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff81166000908152606a602052604090205460ff165b919050565b606c547201000000000000000000000000000000000000900461ffff1681565b60665473ffffffffffffffffffffffffffffffffffffffff1681565b6111c6611e19565b73ffffffffffffffffffffffffffffffffffffffff166111e4611403565b73ffffffffffffffffffffffffffffffffffffffff161461126657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60345460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603480547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b336112de611403565b73ffffffffffffffffffffffffffffffffffffffff16146113385761130233611153565b611338576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612a7f565b606b805473ffffffffffffffffffffffffffffffffffffffff909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b606b54610100900473ffffffffffffffffffffffffffffffffffffffff1681565b6068602052600090815260409020546fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041682565b606c5474010000000000000000000000000000000000000000900461ffff1681565b60345473ffffffffffffffffffffffffffffffffffffffff1690565b606c54700100000000000000000000000000000000900461ffff1681565b606c546fffffffffffffffffffffffffffffffff1681565b3361145e611403565b73ffffffffffffffffffffffffffffffffffffffff16146114b85761148233611153565b6114b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612a7f565b6040805180820182526fffffffffffffffffffffffffffffffff8481168252838116602080840191825261ffff8816600090815260689091528490209251835491517fffffffffffffffffffffffffffffffff000000000000000000000000000000009092169083161782167001000000000000000000000000000000009190921602179055517fa812e6d95f70b4a1555cf2cfcc53d6aa10ca827ef87ce47a0e145eebc0c19a3c9061157090859085908590612dc5565b60405180910390a1505050565b611585611e19565b73ffffffffffffffffffffffffffffffffffffffff166115a3611403565b73ffffffffffffffffffffffffffffffffffffffff161461162557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b606b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6000612710841115611694576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612ab6565b6116d78787878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e1d92505050565b979650505050505050565b336116eb611403565b73ffffffffffffffffffffffffffffffffffffffff16146117455761170f33611153565b611745576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612a7f565b606c80547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055565b606a6020526000908152604090205460ff1681565b6117a5611e19565b73ffffffffffffffffffffffffffffffffffffffff166117c3611403565b73ffffffffffffffffffffffffffffffffffffffff161461184557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166118b1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180612ea36026913960400191505060405180910390fd5b60345460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000611949611cc0565b905073ffffffffffffffffffffffffffffffffffffffff81166119a25773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103556119c4565b3373ffffffffffffffffffffffffffffffffffffffff8216146119c457600080fd5b50606c8054606b80547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff959095169490940293909317909255612ee07fffffffffffffffffffffffffffffffff00000000000000000000000000000000909216919091177fffffffffffffffffffffffffffff0000ffffffffffffffffffffffffffffffff1670a400000000000000000000000000000000177fffffffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffff1672a0000000000000000000000000000000000000177fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff167501f40000000000000000000000000000000000000000179055565b33611af4611403565b73ffffffffffffffffffffffffffffffffffffffff1614611b4e57611b1833611153565b611b4e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612a7f565b6066546040517f69412bfa00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff16906369412bfa90611ba5903090600401612a05565b60206040518083038186803b158015611bbd57600080fd5b505afa158015611bd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf591906129c6565b905080821115611c31576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612b7f565b6066546040517f07b18bde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906307b18bde90611c899086908690600401612a26565b600060405180830381600087803b158015611ca357600080fd5b505af1158015611cb7573d6000803e3d6000fd5b50505050505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b6000611cf0306121b7565b15905090565b600154610100900460ff1680611d0f5750611d0f611ce5565b80611d1d575060015460ff16155b611d72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612ec9602e913960400191505060405180910390fd5b600154610100900460ff16158015611dd757600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9091166101001716811790555b611ddf6121bd565b611de76122ce565b8015611e1657600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50565b3390565b606b5460009060ff1615611e5d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612c13565b815160221480611e6e575060428251115b611ea4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612aeb565b6002820151602283015180611ee5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612c4a565b8161ffff1660011480611efc57508161ffff166002145b611f32576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612b48565b61ffff88811660009081526069602090815260408083208b85168452909152812091841660021415611fb15750604285015181546fffffffffffffffffffffffffffffffff16811115611fb1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b890612c81565b60008461ffff16600214611fdf57606c54700100000000000000000000000000000000900461ffff16612005565b606c5461200590700100000000000000000000000000000000900461ffff16602061245d565b905060008a61ffff1660021461204457606c5461203f908a9074010000000000000000000000000000000000000000900461ffff1661245d565b612062565b606c547201000000000000000000000000000000000000900461ffff165b90506000612070838361245d565b606b5486549192508e91600091829161010090910473ffffffffffffffffffffffffffffffffffffffff1690637bc3c9ab90859087906120ce90700100000000000000000000000000000000900467ffffffffffffffff168e61245d565b6040518463ffffffff1660e01b81526004016120ec93929190612e3d565b604080518083038186803b15801561210357600080fd5b505afa158015612117573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213b91906129de565b9092509050600061216d6402540be4006121678a6fffffffffffffffffffffffffffffffff86166124da565b9061254d565b606c549091506121a19061271090612167906fffffffffffffffffffffffffffffffff1661219b878661245d565b906124da565b9b50505050505050505050505095945050505050565b3b151590565b600154610100900460ff16806121d657506121d6611ce5565b806121e4575060015460ff16155b612239576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612ec9602e913960400191505060405180910390fd5b600154610100900460ff16158015611de757600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9091166101001716811790558015611e1657600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600154610100900460ff16806122e757506122e7611ce5565b806122f5575060015460ff16155b61234a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612ec9602e913960400191505060405180910390fd5b600154610100900460ff161580156123af57600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9091166101001716811790555b60006123b9611e19565b603480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611e1657600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b6000828201838110156124d157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000826124e9575060006124d4565b828202828482816124f657fe5b04146124d1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180612ef76021913960400191505060405180910390fd5b60008082116125bd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816125c657fe5b049392505050565b8035801515811461117d57600080fd5b60008083601f8401126125ef578182fd5b50813567ffffffffffffffff811115612606578182fd5b60208301915083602082850101111561261e57600080fd5b9250929050565b803561ffff8116811461117d57600080fd5b803567ffffffffffffffff8116811461117d57600080fd5b600060208284031215612660578081fd5b81356124d181612e62565b6000806040838503121561267d578081fd5b823561268881612e62565b946020939093013593505050565b600080604083850312156126a8578182fd5b82356126b381612e62565b915060208301356126c381612e62565b809150509250929050565b600080604083850312156126e0578182fd5b82356126eb81612e62565b91506126f9602084016125ce565b90509250929050565b600060208284031215612713578081fd5b61271c826125ce565b9392505050565b600060208284031215612734578081fd5b81356124d181612e84565b600060208284031215612750578081fd5b61271c82612625565b600080600080600080600060c0888a031215612773578283fd5b61277c88612625565b9650602088013561278c81612e62565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff8111156127bc578283fd5b6127c88a828b016125de565b989b979a50959850939692959293505050565b60008060008060008060008060e0898b0312156127f6578081fd5b6127ff89612625565b9750602089013561280f81612e62565b965060408901359550606089013594506080890135935060a089013567ffffffffffffffff81111561283f578182fd5b61284b8b828c016125de565b90945092505060c089013561285f81612e62565b809150509295985092959890939650565b600080600060608486031215612884578283fd5b61288d84612625565b9250602084013561289d81612e84565b915060408401356128ad81612e84565b809150509250925092565b600080604083850312156128ca578182fd5b6128d383612625565b91506126f960208401612625565b60008060008060008060a087890312156128f9578384fd5b61290287612625565b955061291060208801612625565b9450604087013561292081612e62565b935060608701359250608087013567ffffffffffffffff811115612942578283fd5b61294e89828a016125de565b979a9699509497509295939492505050565b600080600080600060a08688031215612977578283fd5b61298086612625565b945061298e60208701612625565b9350604086013561299e81612e84565b92506129ac60608701612637565b91506129ba60808701612637565b90509295509295909350565b6000602082840312156129d7578081fd5b5051919050565b600080604083850312156129f0578182fd5b8251915060208301516126c381612e84565b90565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9290921682521515602082015260400190565b901515815260200190565b60208082526015908201527f52656c617965723a206e6f7420617070726f7665640000000000000000000000604082015260600190565b6020808252818101527f52656c617965723a205f7061796c6f616453697a6520746f6f6f6f6f20626967604082015260600190565b60208082526026908201527f52656c617965723a2077726f6e67205f61646170746572506172616d6574657260408201527f732073697a650000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f52656c617965723a20756e737570706f72746564207478547970650000000000604082015260600190565b60208082526026908201527f52656c617965723a206e6f7420656e6f7567682066656520666f72207769746860408201527f64726177616c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f52656c617965723a20696e76616c696420756c6e000000000000000000000000604082015260600190565b6020808252600d908201527f41646d696e3a2070617573656400000000000000000000000000000000000000604082015260600190565b60208082526014908201527f52656c617965723a2067617320746f6f206c6f77000000000000000000000000604082015260600190565b6020808252601f908201527f52656c617965723a206473744e6174697665416d7420746f6f206c6172676500604082015260600190565b6fffffffffffffffffffffffffffffffff91909116815260200190565b6fffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6fffffffffffffffffffffffffffffffff93909316835267ffffffffffffffff918216602084015216604082015260600190565b61ffff91909116815260200190565b600061ffff8916825273ffffffffffffffffffffffffffffffffffffffff8816602083015286604083015285606083015284608083015260c060a08301528260c0830152828460e084013781830160e090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601019695505050505050565b61ffff9390931683526fffffffffffffffffffffffffffffffff918216602084015216604082015260600190565b61ffff95861681529390941660208401526fffffffffffffffffffffffffffffffff91909116604083015267ffffffffffffffff9081166060830152909116608082015260a00190565b61ffff9390931683526020830191909152604082015260600190565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff81168114611e1657600080fd5b6fffffffffffffffffffffffffffffffff81168114611e1657600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a264697066735822122020cf222bc5620e2b44001ee9f4bab4c168f4717ae51de3117b9aba834ed0a78564736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2074,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 137,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 140,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 484,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "_owner",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "__gap",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5741,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "uln",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(ILayerZeroUltraLightNodeV2)14483"
      },
      {
        "astId": 5743,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "stargateBridgeAddress",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 5759,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "dstPriceLookup",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_uint16,t_struct(DstPrice)5748_storage)"
      },
      {
        "astId": 5765,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "dstConfigLookup",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_struct(DstConfig)5755_storage))"
      },
      {
        "astId": 5769,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "approvedAddresses",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5813,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "paused",
        "offset": 0,
        "slot": "107",
        "type": "t_bool"
      },
      {
        "astId": 5815,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "priceFeed",
        "offset": 1,
        "slot": "107",
        "type": "t_contract(ILayerZeroPriceFeed)14091"
      },
      {
        "astId": 5817,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "multiplierBps",
        "offset": 0,
        "slot": "108",
        "type": "t_uint128"
      },
      {
        "astId": 5819,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "validateProofBytes",
        "offset": 16,
        "slot": "108",
        "type": "t_uint16"
      },
      {
        "astId": 5821,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "fpBytes",
        "offset": 18,
        "slot": "108",
        "type": "t_uint16"
      },
      {
        "astId": 5823,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "mptOverhead",
        "offset": 20,
        "slot": "108",
        "type": "t_uint16"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILayerZeroPriceFeed)14091": {
        "encoding": "inplace",
        "label": "contract ILayerZeroPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(ILayerZeroUltraLightNodeV2)14483": {
        "encoding": "inplace",
        "label": "contract ILayerZeroUltraLightNodeV2",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_struct(DstConfig)5755_storage))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => struct RelayerV2.DstConfig))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_struct(DstConfig)5755_storage)"
      },
      "t_mapping(t_uint16,t_struct(DstConfig)5755_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct RelayerV2.DstConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(DstConfig)5755_storage"
      },
      "t_mapping(t_uint16,t_struct(DstPrice)5748_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct RelayerV2.DstPrice)",
        "numberOfBytes": "32",
        "value": "t_struct(DstPrice)5748_storage"
      },
      "t_struct(DstConfig)5755_storage": {
        "encoding": "inplace",
        "label": "struct RelayerV2.DstConfig",
        "members": [
          {
            "astId": 5750,
            "contract": "contracts/RelayerV2.sol:RelayerV2",
            "label": "dstNativeAmtCap",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 5752,
            "contract": "contracts/RelayerV2.sol:RelayerV2",
            "label": "baseGas",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 5754,
            "contract": "contracts/RelayerV2.sol:RelayerV2",
            "label": "gasPerByte",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DstPrice)5748_storage": {
        "encoding": "inplace",
        "label": "struct RelayerV2.DstPrice",
        "members": [
          {
            "astId": 5745,
            "contract": "contracts/RelayerV2.sol:RelayerV2",
            "label": "dstPriceRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 5747,
            "contract": "contracts/RelayerV2.sol:RelayerV2",
            "label": "dstGasPriceInWei",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
{
  "address": "0xDcc1A1a26807c687300A63A72eF111F6fe994068",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ulnv2",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "feeEnabled",
          "type": "bool"
        }
      ],
      "name": "FeeEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bp",
          "type": "uint256"
        }
      ],
      "name": "NativeBP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "zroEnabled",
          "type": "bool"
        }
      ],
      "name": "ZroEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "name": "ZroFee",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "feeEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "payInZro",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "relayerFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "oracleFee",
          "type": "uint256"
        }
      ],
      "name": "getFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_feeEnabled",
          "type": "bool"
        }
      ],
      "name": "setFeeEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nativeBP",
          "type": "uint256"
        }
      ],
      "name": "setNativeBP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_zroEnabled",
          "type": "bool"
        }
      ],
      "name": "setZroEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_zroFee",
          "type": "uint256"
        }
      ],
      "name": "setZroFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uln",
      "outputs": [
        {
          "internalType": "contract ILayerZeroUltraLightNodeV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawNativeFromULN",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawZROFromULN",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zroEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zroFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ef013732e0544c58314cc9d959cac0ce05372cd947d29fd16a3b613df6c0269",
  "receipt": {
    "to": null,
    "from": "0x9F403140Bc0574D7d36eA472b82DAa1Bbd4eF327",
    "contractAddress": "0xDcc1A1a26807c687300A63A72eF111F6fe994068",
    "transactionIndex": 153,
    "gasUsed": "721180",
    "logsBloom": "0x
    "blockHash": "0x37580d9ff90beb02887c138f02729902661242a3c769daf8d9e23bb0555e7e01",
    "transactionHash": "0x4ef013732e0544c58314cc9d959cac0ce05372cd947d29fd16a3b613df6c0269",
    "logs": [
      {
        "transactionIndex": 153,
        "blockNumber": 16056652,
        "transactionHash": "0x4ef013732e0544c58314cc9d959cac0ce05372cd947d29fd16a3b613df6c0269",
        "address": "0xDcc1A1a26807c687300A63A72eF111F6fe994068",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009f403140bc0574d7d36ea472b82daa1bbd4ef327"
        ],
        "data": "0x",
        "logIndex": 367,
        "blockHash": "0x37580d9ff90beb02887c138f02729902661242a3c769daf8d9e23bb0555e7e01"
      }
    ],
    "blockNumber": 16056652,
    "cumulativeGasUsed": "16824379",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbE4fB271cfB7bcbB47EA9573321c7bfe309fc220"
  ],
  "numDeployments": 1,
  "solcInputHash": "29436b776c0d676f6ac3d2c6c69869cf",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ulnv2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"feeEnabled\",\"type\":\"bool\"}],\"name\":\"FeeEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bp\",\"type\":\"uint256\"}],\"name\":\"NativeBP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"zroEnabled\",\"type\":\"bool\"}],\"name\":\"ZroEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"name\":\"ZroFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"feeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"payInZro\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleFee\",\"type\":\"uint256\"}],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_feeEnabled\",\"type\":\"bool\"}],\"name\":\"setFeeEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nativeBP\",\"type\":\"uint256\"}],\"name\":\"setNativeBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_zroEnabled\",\"type\":\"bool\"}],\"name\":\"setZroEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_zroFee\",\"type\":\"uint256\"}],\"name\":\"setZroFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uln\",\"outputs\":[{\"internalType\":\"contract ILayerZeroUltraLightNodeV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNativeFromULN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawZROFromULN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zroEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zroFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TreasuryV2Radar.sol\":\"TreasuryV2Radar\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/TreasuryV2Radar.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./interfaces/ILayerZeroTreasury.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/ILayerZeroUltraLightNodeV2.sol\\\";\\n\\ncontract TreasuryV2Radar is ILayerZeroTreasury, Ownable {\\n    using SafeMath for uint;\\n\\n    uint public nativeBP;\\n    uint public zroFee;\\n    bool public feeEnabled;\\n    bool public zroEnabled;\\n\\n    ILayerZeroUltraLightNodeV2 public uln;\\n\\n    event NativeBP(uint bp);\\n    event ZroFee(uint zroFee);\\n    event FeeEnabled(bool feeEnabled);\\n    event ZroEnabled(bool zroEnabled);\\n\\n    constructor(address _ulnv2) {\\n        uln = ILayerZeroUltraLightNodeV2(_ulnv2);\\n    }\\n\\n    function getFees(bool payInZro, uint relayerFee, uint oracleFee) external view override returns (uint) {\\n        if (feeEnabled) {\\n            if (payInZro) {\\n                require(zroEnabled, \\\"LayerZero: ZRO is not enabled\\\");\\n                return zroFee;\\n            } else {\\n                return relayerFee.add(oracleFee).mul(nativeBP).div(10000);\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function setFeeEnabled(bool _feeEnabled) external onlyOwner {\\n        feeEnabled = _feeEnabled;\\n        emit FeeEnabled(_feeEnabled);\\n    }\\n\\n    function setZroEnabled(bool _zroEnabled) external onlyOwner {\\n        zroEnabled = _zroEnabled;\\n        emit ZroEnabled(_zroEnabled);\\n    }\\n\\n    function setNativeBP(uint _nativeBP) external onlyOwner {\\n        nativeBP = _nativeBP;\\n        emit NativeBP(_nativeBP);\\n    }\\n\\n    function setZroFee(uint _zroFee) external onlyOwner {\\n        zroFee = _zroFee;\\n        emit ZroFee(_zroFee);\\n    }\\n\\n    function withdrawZROFromULN(address _to, uint _amount) external onlyOwner {\\n        uln.withdrawZRO(_to, _amount);\\n    }\\n\\n    function withdrawNativeFromULN(address payable _to, uint _amount) external onlyOwner {\\n        uln.withdrawNative(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xdec6b7e0ca665107538d730a4f20d75750531b2adae0509d264c8cd2aac6a4a3\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroTreasury {\\n    function getFees(bool payInZro, uint relayerFee, uint oracleFee) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xf30814340363b85498937030f671adb282435ca16d350ce2210d28b75901a1e4\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroUltraLightNodeV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\ninterface ILayerZeroUltraLightNodeV2 {\\n    // Relayer functions\\n    function validateTransactionProof(uint16 _srcChainId, address _dstAddress, uint _gasLimit, bytes32 _lookupHash, bytes32 _blockData, bytes calldata _transactionProof) external;\\n\\n    // an Oracle delivers the block data using updateHash()\\n    function updateHash(uint16 _srcChainId, bytes32 _lookupHash, uint _confirmations, bytes32 _blockData) external;\\n\\n    // can only withdraw the receivable of the msg.sender\\n    function withdrawNative(address payable _to, uint _amount) external;\\n\\n    function withdrawZRO(address _to, uint _amount) external;\\n\\n    // view functions\\n    function getAppConfig(uint16 _remoteChainId, address _userApplicationAddress) external view returns (ApplicationConfiguration memory);\\n\\n    function accruedNativeFee(address _address) external view returns (uint);\\n\\n    struct ApplicationConfiguration {\\n        uint16 inboundProofLibraryVersion;\\n        uint64 inboundBlockConfirmations;\\n        address relayer;\\n        uint16 outboundProofType;\\n        uint64 outboundBlockConfirmations;\\n        address oracle;\\n    }\\n\\n    event HashReceived(uint16 indexed srcChainId, address indexed oracle, bytes32 lookupHash, bytes32 blockData, uint confirmations);\\n    event RelayerParams(bytes adapterParams, uint16 outboundProofType);\\n    event Packet(bytes payload);\\n    event InvalidDst(uint16 indexed srcChainId, bytes srcAddress, address indexed dstAddress, uint64 nonce, bytes32 payloadHash);\\n    event PacketReceived(uint16 indexed srcChainId, bytes srcAddress, address indexed dstAddress, uint64 nonce, bytes32 payloadHash);\\n    event AppConfigUpdated(address indexed userApplication, uint indexed configType, bytes newConfig);\\n    event AddInboundProofLibraryForChain(uint16 indexed chainId, address lib);\\n    event EnableSupportedOutboundProof(uint16 indexed chainId, uint16 proofType);\\n    event SetChainAddressSize(uint16 indexed chainId, uint size);\\n    event SetDefaultConfigForChainId(uint16 indexed chainId, uint16 inboundProofLib, uint64 inboundBlockConfirm, address relayer, uint16 outboundProofType, uint64 outboundBlockConfirm, address oracle);\\n    event SetDefaultAdapterParamsForChainId(uint16 indexed chainId, uint16 indexed proofType, bytes adapterParams);\\n    event SetLayerZeroToken(address indexed tokenAddress);\\n    event SetRemoteUln(uint16 indexed chainId, bytes32 uln);\\n    event SetTreasury(address indexed treasuryAddress);\\n    event WithdrawZRO(address indexed msgSender, address indexed to, uint amount);\\n    event WithdrawNative(address indexed msgSender, address indexed to, uint amount);\\n}\\n\",\"keccak256\":\"0x16c9c5227a5ebbf52ff579f956674a25c98d149d169f6070af274c2a08276352\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610bfb380380610bfb8339818101604052602081101561003357600080fd5b5051600061003f6100b6565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600380546001600160a01b03909216620100000262010000600160b01b03199092169190911790556100ba565b3390565b610b32806100c96000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063baead4cc11610066578063baead4cc1461022d578063d684b2531461024a578063d935d12314610269578063f2fde38b14610271576100f5565b80638da5cb5b146101f957806396a141a014610201578063a771ebc714610209578063af406aa514610225576100f5565b80636c473aff116100d35780636c473aff14610184578063715018a6146101a85780637ba20ccf146101b05780638c616397146101cd576100f5565b80630db474fa146100fa5780633c5ac8f71461011b5780635cbbbd7514610147575b600080fd5b6101196004803603602081101561011057600080fd5b50351515610297565b005b6101196004803603604081101561013157600080fd5b506001600160a01b038135169060200135610340565b6101726004803603606081101561015d57600080fd5b5080351515906020810135906040013561041a565b60408051918252519081900360200190f35b61018c6104d0565b604080516001600160a01b039092168252519081900360200190f35b6101196104e5565b610119600480360360208110156101c657600080fd5b5035610591565b610119600480360360408110156101e357600080fd5b506001600160a01b03813516906020013561062e565b61018c6106ec565b6101726106fb565b610211610701565b604080519115158252519081900360200190f35b61017261070a565b6101196004803603602081101561024357600080fd5b5035610710565b6101196004803603602081101561026057600080fd5b503515156107ad565b61021161085e565b6101196004803603602081101561028757600080fd5b50356001600160a01b031661086c565b61029f61096e565b6001600160a01b03166102b06106ec565b6001600160a01b0316146102f9576040805162461bcd60e51b81526020600482018190526024820152600080516020610add833981519152604482015290519081900360640190fd5b6003805482151560ff19909116811790915560408051918252517fe97fa32ceb811a18d1b14115b17ae0034db328b2e2ca987d9922cbf47b03fad69181900360200190a150565b61034861096e565b6001600160a01b03166103596106ec565b6001600160a01b0316146103a2576040805162461bcd60e51b81526020600482018190526024820152600080516020610add833981519152604482015290519081900360640190fd5b600354604080516303d8c5ef60e11b81526001600160a01b03858116600483015260248201859052915162010000909304909116916307b18bde9160448082019260009290919082900301818387803b1580156103fe57600080fd5b505af1158015610412573d6000803e3d6000fd5b505050505050565b60035460009060ff16156104c557831561049357600354610100900460ff1661048a576040805162461bcd60e51b815260206004820152601d60248201527f4c617965725a65726f3a205a524f206973206e6f7420656e61626c6564000000604482015290519081900360640190fd5b506002546104c9565b6104be6127106104b86001546104b2868861097290919063ffffffff16565b906109d5565b90610a2e565b90506104c9565b5060005b9392505050565b6003546201000090046001600160a01b031681565b6104ed61096e565b6001600160a01b03166104fe6106ec565b6001600160a01b031614610547576040805162461bcd60e51b81526020600482018190526024820152600080516020610add833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b61059961096e565b6001600160a01b03166105aa6106ec565b6001600160a01b0316146105f3576040805162461bcd60e51b81526020600482018190526024820152600080516020610add833981519152604482015290519081900360640190fd5b60028190556040805182815290517f804d99c2291bc4a6be11ff016f65cfc644f8d488ef55a5318d0217a1fdc4e9fd9181900360200190a150565b61063661096e565b6001600160a01b03166106476106ec565b6001600160a01b031614610690576040805162461bcd60e51b81526020600482018190526024820152600080516020610add833981519152604482015290519081900360640190fd5b60035460408051638525b71160e01b81526001600160a01b0385811660048301526024820185905291516201000090930490911691638525b7119160448082019260009290919082900301818387803b1580156103fe57600080fd5b6000546001600160a01b031690565b60015481565b60035460ff1681565b60025481565b61071861096e565b6001600160a01b03166107296106ec565b6001600160a01b031614610772576040805162461bcd60e51b81526020600482018190526024820152600080516020610add833981519152604482015290519081900360640190fd5b60018190556040805182815290517ff2a316ed322d32481373e7ed416bc6c1ec2afcfa3bf2f1df9eb4300e1a9620e39181900360200190a150565b6107b561096e565b6001600160a01b03166107c66106ec565b6001600160a01b03161461080f576040805162461bcd60e51b81526020600482018190526024820152600080516020610add833981519152604482015290519081900360640190fd5b60038054821515610100810261ff00199092169190911790915560408051918252517f279d3ec34d7b325d10d4b9d6c63464877a6fe6ac3997f7508bdb3b9d2d5050b39181900360200190a150565b600354610100900460ff1681565b61087461096e565b6001600160a01b03166108856106ec565b6001600160a01b0316146108ce576040805162461bcd60e51b81526020600482018190526024820152600080516020610add833981519152604482015290519081900360640190fd5b6001600160a01b0381166109135760405162461bcd60e51b8152600401808060200182810382526026815260200180610a966026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6000828201838110156109cc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000826109e4575060006109cf565b828202828482816109f157fe5b04146109cc5760405162461bcd60e51b8152600401808060200182810382526021815260200180610abc6021913960400191505060405180910390fd5b6000808211610a84576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610a8d57fe5b04939250505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220b284d18970d833b13db6c0f5bf8c212b821977482ecc710d2a7e57107861182264736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063baead4cc11610066578063baead4cc1461022d578063d684b2531461024a578063d935d12314610269578063f2fde38b14610271576100f5565b80638da5cb5b146101f957806396a141a014610201578063a771ebc714610209578063af406aa514610225576100f5565b80636c473aff116100d35780636c473aff14610184578063715018a6146101a85780637ba20ccf146101b05780638c616397146101cd576100f5565b80630db474fa146100fa5780633c5ac8f71461011b5780635cbbbd7514610147575b600080fd5b6101196004803603602081101561011057600080fd5b50351515610297565b005b6101196004803603604081101561013157600080fd5b506001600160a01b038135169060200135610340565b6101726004803603606081101561015d57600080fd5b5080351515906020810135906040013561041a565b60408051918252519081900360200190f35b61018c6104d0565b604080516001600160a01b039092168252519081900360200190f35b6101196104e5565b610119600480360360208110156101c657600080fd5b5035610591565b610119600480360360408110156101e357600080fd5b506001600160a01b03813516906020013561062e565b61018c6106ec565b6101726106fb565b610211610701565b604080519115158252519081900360200190f35b61017261070a565b6101196004803603602081101561024357600080fd5b5035610710565b6101196004803603602081101561026057600080fd5b503515156107ad565b61021161085e565b6101196004803603602081101561028757600080fd5b50356001600160a01b031661086c565b61029f61096e565b6001600160a01b03166102b06106ec565b6001600160a01b0316146102f9576040805162461bcd60e51b81526020600482018190526024820152600080516020610add833981519152604482015290519081900360640190fd5b6003805482151560ff19909116811790915560408051918252517fe97fa32ceb811a18d1b14115b17ae0034db328b2e2ca987d9922cbf47b03fad69181900360200190a150565b61034861096e565b6001600160a01b03166103596106ec565b6001600160a01b0316146103a2576040805162461bcd60e51b81526020600482018190526024820152600080516020610add833981519152604482015290519081900360640190fd5b600354604080516303d8c5ef60e11b81526001600160a01b03858116600483015260248201859052915162010000909304909116916307b18bde9160448082019260009290919082900301818387803b1580156103fe57600080fd5b505af1158015610412573d6000803e3d6000fd5b505050505050565b60035460009060ff16156104c557831561049357600354610100900460ff1661048a576040805162461bcd60e51b815260206004820152601d60248201527f4c617965725a65726f3a205a524f206973206e6f7420656e61626c6564000000604482015290519081900360640190fd5b506002546104c9565b6104be6127106104b86001546104b2868861097290919063ffffffff16565b906109d5565b90610a2e565b90506104c9565b5060005b9392505050565b6003546201000090046001600160a01b031681565b6104ed61096e565b6001600160a01b03166104fe6106ec565b6001600160a01b031614610547576040805162461bcd60e51b81526020600482018190526024820152600080516020610add833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b61059961096e565b6001600160a01b03166105aa6106ec565b6001600160a01b0316146105f3576040805162461bcd60e51b81526020600482018190526024820152600080516020610add833981519152604482015290519081900360640190fd5b60028190556040805182815290517f804d99c2291bc4a6be11ff016f65cfc644f8d488ef55a5318d0217a1fdc4e9fd9181900360200190a150565b61063661096e565b6001600160a01b03166106476106ec565b6001600160a01b031614610690576040805162461bcd60e51b81526020600482018190526024820152600080516020610add833981519152604482015290519081900360640190fd5b60035460408051638525b71160e01b81526001600160a01b0385811660048301526024820185905291516201000090930490911691638525b7119160448082019260009290919082900301818387803b1580156103fe57600080fd5b6000546001600160a01b031690565b60015481565b60035460ff1681565b60025481565b61071861096e565b6001600160a01b03166107296106ec565b6001600160a01b031614610772576040805162461bcd60e51b81526020600482018190526024820152600080516020610add833981519152604482015290519081900360640190fd5b60018190556040805182815290517ff2a316ed322d32481373e7ed416bc6c1ec2afcfa3bf2f1df9eb4300e1a9620e39181900360200190a150565b6107b561096e565b6001600160a01b03166107c66106ec565b6001600160a01b03161461080f576040805162461bcd60e51b81526020600482018190526024820152600080516020610add833981519152604482015290519081900360640190fd5b60038054821515610100810261ff00199092169190911790915560408051918252517f279d3ec34d7b325d10d4b9d6c63464877a6fe6ac3997f7508bdb3b9d2d5050b39181900360200190a150565b600354610100900460ff1681565b61087461096e565b6001600160a01b03166108856106ec565b6001600160a01b0316146108ce576040805162461bcd60e51b81526020600482018190526024820152600080516020610add833981519152604482015290519081900360640190fd5b6001600160a01b0381166109135760405162461bcd60e51b8152600401808060200182810382526026815260200180610a966026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6000828201838110156109cc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000826109e4575060006109cf565b828202828482816109f157fe5b04146109cc5760405162461bcd60e51b8152600401808060200182810382526021815260200180610abc6021913960400191505060405180910390fd5b6000808211610a84576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610a8d57fe5b04939250505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220b284d18970d833b13db6c0f5bf8c212b821977482ecc710d2a7e57107861182264736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 493,
        "contract": "contracts/TreasuryV2Radar.sol:TreasuryV2Radar",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6818,
        "contract": "contracts/TreasuryV2Radar.sol:TreasuryV2Radar",
        "label": "nativeBP",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6820,
        "contract": "contracts/TreasuryV2Radar.sol:TreasuryV2Radar",
        "label": "zroFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6822,
        "contract": "contracts/TreasuryV2Radar.sol:TreasuryV2Radar",
        "label": "feeEnabled",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 6824,
        "contract": "contracts/TreasuryV2Radar.sol:TreasuryV2Radar",
        "label": "zroEnabled",
        "offset": 1,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 6826,
        "contract": "contracts/TreasuryV2Radar.sol:TreasuryV2Radar",
        "label": "uln",
        "offset": 2,
        "slot": "3",
        "type": "t_contract(ILayerZeroUltraLightNodeV2)13665"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILayerZeroUltraLightNodeV2)13665": {
        "encoding": "inplace",
        "label": "contract ILayerZeroUltraLightNodeV2",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
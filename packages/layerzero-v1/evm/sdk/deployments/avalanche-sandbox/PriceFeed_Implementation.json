{
  "address": "0xDe0099b20F4d5596aA2C5D5a0b510abBB7a315E1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRICE_RATIO_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitrumPriceExt",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "gasPerL2Tx",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "gasPerL1CallDataByte",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "defaultModelPrice",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "priceRatio",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "gasPriceInUnit",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "gasPerByte",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_callDataSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gas",
          "type": "uint256"
        }
      ],
      "name": "estimateFeeByChain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "priceRatio",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_callDataSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gas",
          "type": "uint256"
        }
      ],
      "name": "estimateFeeWithArbitrumModel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "priceRatio",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_callDataSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gas",
          "type": "uint256"
        }
      ],
      "name": "estimateFeeWithDefaultModel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "priceRatio",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_callDataSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gas",
          "type": "uint256"
        }
      ],
      "name": "estimateFeeWithOptimismModel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "priceRatio",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "priceRatio",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "gasPriceInUnit",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "gasPerByte",
              "type": "uint32"
            }
          ],
          "internalType": "struct ILayerZeroPriceFeed.Price",
          "name": "price",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceRatioDenominator",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceUpdater",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "priceUpdater",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "chainId",
              "type": "uint16"
            },
            {
              "components": [
                {
                  "internalType": "uint128",
                  "name": "priceRatio",
                  "type": "uint128"
                },
                {
                  "internalType": "uint64",
                  "name": "gasPriceInUnit",
                  "type": "uint64"
                },
                {
                  "internalType": "uint32",
                  "name": "gasPerByte",
                  "type": "uint32"
                }
              ],
              "internalType": "struct ILayerZeroPriceFeed.Price",
              "name": "price",
              "type": "tuple"
            }
          ],
          "internalType": "struct ILayerZeroPriceFeed.UpdatePrice[]",
          "name": "_price",
          "type": "tuple[]"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "chainId",
              "type": "uint16"
            },
            {
              "components": [
                {
                  "internalType": "uint128",
                  "name": "priceRatio",
                  "type": "uint128"
                },
                {
                  "internalType": "uint64",
                  "name": "gasPriceInUnit",
                  "type": "uint64"
                },
                {
                  "internalType": "uint32",
                  "name": "gasPerByte",
                  "type": "uint32"
                }
              ],
              "internalType": "struct ILayerZeroPriceFeed.Price",
              "name": "price",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "gasPerL2Tx",
                  "type": "uint64"
                },
                {
                  "internalType": "uint32",
                  "name": "gasPerL1CallDataByte",
                  "type": "uint32"
                }
              ],
              "internalType": "struct ILayerZeroPriceFeed.ArbitrumPriceExt",
              "name": "extend",
              "type": "tuple"
            }
          ],
          "internalType": "struct ILayerZeroPriceFeed.UpdatePriceExt[]",
          "name": "_price",
          "type": "tuple[]"
        }
      ],
      "name": "setPriceForArbitrum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_denominator",
          "type": "uint128"
        }
      ],
      "name": "setPriceRatioDenominator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "setPriceUpdater",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b3ffdf515dc69cd8bf5bfa632857fcf17a6ba15ce273258b1fea04575b38956",
  "receipt": {
    "to": null,
    "from": "0x732BC218Ea380B93081c7dfeb362A13e28b7A8d6",
    "contractAddress": "0xDe0099b20F4d5596aA2C5D5a0b510abBB7a315E1",
    "transactionIndex": 0,
    "gasUsed": "1734730",
    "logsBloom": "0x
    "blockHash": "0xf0736ef5d46fe95d5bc3b8ce3ef0a6f23580530bfd91e8e52656a4d25ae9fd1c",
    "transactionHash": "0x6b3ffdf515dc69cd8bf5bfa632857fcf17a6ba15ce273258b1fea04575b38956",
    "logs": [],
    "blockNumber": 19916163,
    "cumulativeGasUsed": "1734730",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "f111316770cea15a6be35e67be40137e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRICE_RATIO_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrumPriceExt\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gasPerL2Tx\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasPerL1CallDataByte\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"defaultModelPrice\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"priceRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"gasPriceInUnit\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasPerByte\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_callDataSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"estimateFeeByChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"priceRatio\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_callDataSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"estimateFeeWithArbitrumModel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"priceRatio\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_callDataSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"estimateFeeWithDefaultModel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"priceRatio\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_callDataSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"estimateFeeWithOptimismModel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"priceRatio\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"}],\"name\":\"getPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"priceRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"gasPriceInUnit\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasPerByte\",\"type\":\"uint32\"}],\"internalType\":\"struct ILayerZeroPriceFeed.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceRatioDenominator\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceUpdater\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceUpdater\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"priceRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"gasPriceInUnit\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasPerByte\",\"type\":\"uint32\"}],\"internalType\":\"struct ILayerZeroPriceFeed.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"internalType\":\"struct ILayerZeroPriceFeed.UpdatePrice[]\",\"name\":\"_price\",\"type\":\"tuple[]\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"priceRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"gasPriceInUnit\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasPerByte\",\"type\":\"uint32\"}],\"internalType\":\"struct ILayerZeroPriceFeed.Price\",\"name\":\"price\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"gasPerL2Tx\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasPerL1CallDataByte\",\"type\":\"uint32\"}],\"internalType\":\"struct ILayerZeroPriceFeed.ArbitrumPriceExt\",\"name\":\"extend\",\"type\":\"tuple\"}],\"internalType\":\"struct ILayerZeroPriceFeed.UpdatePriceExt[]\",\"name\":\"_price\",\"type\":\"tuple[]\"}],\"name\":\"setPriceForArbitrum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_denominator\",\"type\":\"uint128\"}],\"name\":\"setPriceRatioDenominator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setPriceUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceFeed.sol\":\"PriceFeed\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":30000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xba7ba5b188c0b27489bad1efee8d8b1dcebb502785192b22e3d69824a802983d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1fd568d8b8ca285c801fbd1d3f40f848434d850a682c0273786cada3e0b84057\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"contracts/PriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"hardhat-deploy/solc_0.7/proxy/Proxied.sol\\\";\\nimport \\\"./interfaces/ILayerZeroPriceFeed.sol\\\";\\n\\n\\ncontract PriceFeed is ILayerZeroPriceFeed, OwnableUpgradeable, Proxied {\\n    using SafeMath for uint;\\n\\n    uint128 public PRICE_RATIO_DENOMINATOR;\\n\\n    // sets pricing\\n    mapping(address => bool) public priceUpdater;\\n\\n    // [_chainId]\\n    mapping(uint16 => Price) public defaultModelPrice;\\n    ArbitrumPriceExt public arbitrumPriceExt;\\n\\n    // ============================ Constructor ===================================\\n\\n    function initialize(address _priceUpdater) public proxied initializer {\\n        __Ownable_init();\\n        priceUpdater[_priceUpdater] = true;\\n        PRICE_RATIO_DENOMINATOR = 1e10;\\n    }\\n\\n    function onUpgrade() public proxied {\\n        PRICE_RATIO_DENOMINATOR = 1e10;\\n    }\\n\\n    // ============================ Modifier ======================================\\n\\n    // owner is always approved\\n    modifier onlyPriceUpdater() {\\n        if (owner() != msg.sender) {\\n            require(priceUpdater[msg.sender], \\\"PriceFeed: not price updater\\\");\\n        }\\n        _;\\n    }\\n\\n    // ============================ OnlyOwner =====================================\\n\\n    function setPriceUpdater(address _addr, bool _active) external onlyOwner {\\n        priceUpdater[_addr] = _active;\\n    }\\n\\n    function setPriceRatioDenominator(uint128 _denominator) external onlyOwner {\\n        PRICE_RATIO_DENOMINATOR = _denominator;\\n    }\\n\\n    // ============================ OnlyPriceUpdater =====================================\\n\\n    function setPrice(UpdatePrice[] calldata _price) external onlyPriceUpdater {\\n        for (uint i = 0; i < _price.length; i++) {\\n            UpdatePrice calldata _update = _price[i];\\n            _setPrice(_update.chainId, _update.price);\\n        }\\n    }\\n\\n    function setPriceForArbitrum(UpdatePriceExt[] calldata _price) external onlyPriceUpdater {\\n        for (uint i = 0; i < _price.length; i++) {\\n            UpdatePriceExt calldata _update = _price[i];\\n\\n            _setPrice(_update.chainId, _update.price);\\n\\n            uint64 gasPerL2Tx = _update.extend.gasPerL2Tx;\\n            uint32 gasPerL1CalldataByte = _update.extend.gasPerL1CallDataByte;\\n\\n            arbitrumPriceExt.gasPerL2Tx = gasPerL2Tx;\\n            arbitrumPriceExt.gasPerL1CallDataByte = gasPerL1CalldataByte;\\n        }\\n    }\\n\\n    // ============================ Internal ==========================================\\n    function _setPrice(uint16 chainId, Price memory _price) internal {\\n        uint128 priceRatio = _price.priceRatio;\\n        uint64 gasPriceInUnit = _price.gasPriceInUnit;\\n        uint32 gasPerByte = _price.gasPerByte;\\n        defaultModelPrice[chainId] = Price(priceRatio, gasPriceInUnit, gasPerByte);\\n    }\\n\\n    function _getL1LookupId(uint16 _l2ChainId) internal pure returns (uint16) {\\n        if (_l2ChainId == 110 || _l2ChainId == 111 || _l2ChainId == 151) {\\n            return 101;\\n        } else if (_l2ChainId == 10132 || _l2ChainId == 10143 || _l2ChainId == 10151) {\\n            return 10121; // ethereum-goerli\\n        } else if (_l2ChainId == 20132 || _l2ChainId == 20143 || _l2ChainId == 20151) {\\n            return 20121; // ethereum-goerli\\n        } else {\\n            revert(\\\"PriceFeed: unknown l2 chain id\\\");\\n        }\\n    }\\n\\n    // ============================ View ==========================================\\n\\n    function getPrice(uint16 _dstChainId) external view override returns (Price memory price) {\\n        price = defaultModelPrice[_dstChainId];\\n    }\\n\\n    function getPriceRatioDenominator() external view override returns (uint128) {\\n        return PRICE_RATIO_DENOMINATOR;\\n    }\\n\\n    function estimateFeeByChain(uint16 _dstChainId, uint _callDataSize, uint _gas) external view override returns (uint fee, uint128 priceRatio) {\\n        if (_dstChainId == 110 || _dstChainId == 10143 || _dstChainId == 20143) {\\n            return estimateFeeWithArbitrumModel(_dstChainId, _callDataSize, _gas);\\n        } else if (\\n            _dstChainId == 111 || _dstChainId == 10132 || _dstChainId == 20132 ||\\n            _dstChainId == 151 || _dstChainId == 10151 || _dstChainId == 20151\\n        ) {\\n            return estimateFeeWithOptimismModel(_dstChainId, _callDataSize, _gas);\\n        } else {\\n            return estimateFeeWithDefaultModel(_dstChainId, _callDataSize, _gas);\\n        }\\n    }\\n\\n    function estimateFeeWithDefaultModel(uint16 _dstChainId, uint _callDataSize, uint _gas) public view returns (uint fee, uint128 priceRatio) {\\n        Price storage remotePrice = defaultModelPrice[_dstChainId];\\n\\n        // assuming the _gas includes (1) the 21,000 overhead and (2) not the calldata gas\\n        uint gasForCallData = _callDataSize.mul(remotePrice.gasPerByte);\\n        uint remoteFee = (gasForCallData.add(_gas)).mul(remotePrice.gasPriceInUnit);\\n        return ((remoteFee.mul(remotePrice.priceRatio)).div(PRICE_RATIO_DENOMINATOR), remotePrice.priceRatio);\\n    }\\n\\n    function estimateFeeWithOptimismModel(uint16 _dstChainId, uint _callDataSize, uint _gas) public view returns (uint fee, uint128 priceRatio) {\\n        uint16 ethereumId = _getL1LookupId(_dstChainId);\\n\\n        // L1 fee\\n        Price storage ethereumPrice = defaultModelPrice[ethereumId];\\n        uint gasForL1CallData = _callDataSize.mul(ethereumPrice.gasPerByte).add(3188); // 2100 + 68 * 16\\n        uint l1Fee = gasForL1CallData.mul(ethereumPrice.gasPriceInUnit);\\n\\n        // L2 fee\\n        Price storage optimismPrice = defaultModelPrice[_dstChainId];\\n        uint gasForL2CallData = _callDataSize.mul(optimismPrice.gasPerByte);\\n        uint l2Fee = (gasForL2CallData.add(_gas)).mul(optimismPrice.gasPriceInUnit);\\n\\n        uint l1FeeInSrcPrice = l1Fee.mul(ethereumPrice.priceRatio).div(PRICE_RATIO_DENOMINATOR);\\n        uint l2FeeInSrcPrice = l2Fee.mul(optimismPrice.priceRatio).div(PRICE_RATIO_DENOMINATOR);\\n        uint gasFee = l1FeeInSrcPrice.add(l2FeeInSrcPrice);\\n        return (gasFee, optimismPrice.priceRatio);\\n    }\\n\\n    function estimateFeeWithArbitrumModel(uint16 _dstChainId, uint _callDataSize, uint _gas) public view returns (uint fee, uint128 priceRatio) {\\n        Price storage arbitrumPrice = defaultModelPrice[_dstChainId];\\n\\n        // L1 fee\\n        uint gasForL1CallData = _callDataSize.mul(arbitrumPriceExt.gasPerL1CallDataByte);\\n        // L2 Fee\\n        uint gasForL2CallData = _callDataSize.mul(arbitrumPrice.gasPerByte);\\n        uint gasFee = (_gas.add(arbitrumPriceExt.gasPerL2Tx).add(gasForL1CallData).add(gasForL2CallData)).mul(arbitrumPrice.gasPriceInUnit);\\n\\n        return ((gasFee.mul(arbitrumPrice.priceRatio)).div(PRICE_RATIO_DENOMINATOR), arbitrumPrice.priceRatio);\\n    }\\n}\\n\",\"keccak256\":\"0x92996d829aac5f5c599a9891f6258bd48e628003dcb550ce877d03e9b4d58abc\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\ninterface ILayerZeroPriceFeed {\\n    /**\\n     * @dev\\n     * priceRatio: (USD price of 1 unit of remote native token in unit of local native token) * PRICE_RATIO_DENOMINATOR\\n     */\\n\\n    struct Price {\\n        uint128 priceRatio; // float value * 10 ^ 10, decimal awared. for aptos to evm, the basis would be (10^18 / 10^8) * 10 ^10 = 10 ^ 20.\\n        uint64 gasPriceInUnit; // for evm, it is in wei, for aptos, it is in octas.\\n        uint32 gasPerByte;\\n    }\\n\\n    struct UpdatePrice {\\n        uint16 chainId;\\n        Price price;\\n    }\\n\\n    /**\\n     * @dev\\n     *    ArbGasInfo.go:GetPricesInArbGas\\n     *\\n     */\\n    struct ArbitrumPriceExt {\\n        uint64 gasPerL2Tx; // L2 overhead\\n        uint32 gasPerL1CallDataByte;\\n    }\\n\\n    struct UpdatePriceExt {\\n        uint16 chainId;\\n        Price price;\\n        ArbitrumPriceExt extend;\\n    }\\n\\n    function getPrice(uint16 _dstChainId) external view returns (Price memory);\\n\\n    function getPriceRatioDenominator() external view returns (uint128);\\n    function estimateFeeByChain(uint16 _dstChainId, uint _callDataSize, uint _gas) external view returns (uint fee, uint128 priceRatio);\\n}\\n\",\"keccak256\":\"0xaa4cc4ded34f169c947545f51dd8599d9076a9749482a9b910edffa28ab6c82a\",\"license\":\"BUSL-1.1\"},\"hardhat-deploy/solc_0.7/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x760a00cd889372a2358732403723d8a13cb8b02bb82450a9bf5488177828aa79\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611e98806100206000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c80638da5cb5b116100cd578063d350ad2511610081578063e15d16e811610066578063e15d16e8146102ae578063f2fde38b146102c1578063ff37b496146102d457610151565b8063d350ad251461027b578063e0ad121a1461028e57610151565b8063ab1518ab116100b2578063ab1518ab1461024d578063c184032714610260578063c4d66de81461026857610151565b80638da5cb5b146102165780638f7002d21461022b57610151565b806352a7251011610124578063715018a611610109578063715018a6146101cd5780637bc3c9ab146101d55780638ca2fb08146101f657610151565b806352a72510146101a7578063711746e2146101ba57610151565b806315527af6146101565780631824a46b1461016b57806336a5beba146101735780633c04741e14610192575b600080fd5b610169610164366004611aac565b6102e7565b005b610169610450565b61017b610507565b604051610189929190611dcd565b60405180910390f35b61019a61052b565b6040516101899190611d56565b6101696101b5366004611a72565b610543565b6101696101c8366004611b1c565b610641565b6101696106ea565b6101e86101e3366004611c13565b610801565b604051610189929190611dad565b610209610204366004611a51565b6108bf565b6040516101899190611c9a565b61021e6108d4565b6040516101899190611c79565b61023e610239366004611bf9565b6108f0565b60405161018993929190611d73565b6101e861025b366004611c13565b610957565b61019a610b11565b610169610276366004611a51565b610b29565b610169610289366004611bdf565b610d48565b6102a161029c366004611bf9565b610e33565b6040516101899190611d13565b6101e86102bc366004611c13565b610ec3565b6101696102cf366004611a51565b610f93565b6101e86102e2366004611c13565b611135565b336102f06108d4565b73ffffffffffffffffffffffffffffffffffffffff161461035d573360009081526066602052604090205460ff1661035d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035490611ca5565b60405180910390fd5b60005b8181101561044b573683838381811061037557fe5b60c0029190910191506103a790506103906020830183611bf9565b6103a236849003840160208501611b7a565b611242565b60006103b960a0830160808401611c5f565b905060006103cd60c0840160a08501611c45565b6068805463ffffffff90921668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff67ffffffffffffffff9095167fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009093169290921793909316179091555050600101610360565b505050565b600061045a61135e565b905073ffffffffffffffffffffffffffffffffffffffff81166104b35773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103556104d5565b3373ffffffffffffffffffffffffffffffffffffffff8216146104d557600080fd5b50606580547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166402540be400179055565b60685467ffffffffffffffff81169068010000000000000000900463ffffffff1682565b6065546fffffffffffffffffffffffffffffffff1681565b61054b611383565b73ffffffffffffffffffffffffffffffffffffffff166105696108d4565b73ffffffffffffffffffffffffffffffffffffffff16146105eb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260666020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b3361064a6108d4565b73ffffffffffffffffffffffffffffffffffffffff16146106ae573360009081526066602052604090205460ff166106ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035490611ca5565b60005b8181101561044b57368383838181106106c657fe5b6080029190910191506106e190506103906020830183611bf9565b506001016106b1565b6106f2611383565b73ffffffffffffffffffffffffffffffffffffffff166107106108d4565b73ffffffffffffffffffffffffffffffffffffffff161461079257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60335460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b6000808461ffff16606e148061081c57508461ffff1661279f145b8061082c57508461ffff16614eaf145b156108455761083c858585611135565b915091506108b7565b8461ffff16606f148061085d57508461ffff16612794145b8061086d57508461ffff16614ea4145b8061087c57508461ffff166097145b8061088c57508461ffff166127a7145b8061089c57508461ffff16614eb7145b156108ac5761083c858585610957565b61083c858585610ec3565b935093915050565b60666020526000908152604090205460ff1681565b60335473ffffffffffffffffffffffffffffffffffffffff1690565b6067602052600090815260409020546fffffffffffffffffffffffffffffffff811690700100000000000000000000000000000000810467ffffffffffffffff16907801000000000000000000000000000000000000000000000000900463ffffffff1683565b600080600061096586611387565b61ffff811660009081526067602052604081208054929350916109bd90610c74906109b7908a9063ffffffff780100000000000000000000000000000000000000000000000090910481169061146116565b906114dd565b82549091506000906109ee908390700100000000000000000000000000000000900467ffffffffffffffff16611461565b61ffff8a166000908152606760205260408120805492935091610a38908b9063ffffffff780100000000000000000000000000000000000000000000000090910481169061146116565b8254909150600090610a7290700100000000000000000000000000000000900467ffffffffffffffff16610a6c848d6114dd565b90611461565b6065548754919250600091610aa8916fffffffffffffffffffffffffffffffff90811691610aa291899116611461565b90611551565b6065548554919250600091610ad8916fffffffffffffffffffffffffffffffff90811691610aa291879116611461565b90506000610ae683836114dd565b9554959f6fffffffffffffffffffffffffffffffff9096169e50949c50505050505050505050505050565b6065546fffffffffffffffffffffffffffffffff1690565b6000610b3361135e565b905073ffffffffffffffffffffffffffffffffffffffff8116610b8c5773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355610bae565b3373ffffffffffffffffffffffffffffffffffffffff821614610bae57600080fd5b600054610100900460ff1680610bc75750610bc76115d2565b80610bd5575060005460ff16155b610c2a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180611e14602e913960400191505060405180910390fd5b600054610100900460ff16158015610c9057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b610c986115e3565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260666020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055606580547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166402540be400179055801561044b57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050565b610d50611383565b73ffffffffffffffffffffffffffffffffffffffff16610d6e6108d4565b73ffffffffffffffffffffffffffffffffffffffff1614610df057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b606580547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055565b610e3b6119af565b5061ffff16600090815260676020908152604091829020825160608101845290546fffffffffffffffffffffffffffffffff81168252700100000000000000000000000000000000810467ffffffffffffffff1692820192909252780100000000000000000000000000000000000000000000000090910463ffffffff169181019190915290565b61ffff8316600090815260676020526040812080548291908290610f0e90879063ffffffff780100000000000000000000000000000000000000000000000090910481169061146116565b8254909150600090610f4290700100000000000000000000000000000000900467ffffffffffffffff16610a6c84896114dd565b6065548454919250610f6f916fffffffffffffffffffffffffffffffff91821691610aa291859116611461565b925492986fffffffffffffffffffffffffffffffff90931697509195505050505050565b610f9b611383565b73ffffffffffffffffffffffffffffffffffffffff16610fb96108d4565b73ffffffffffffffffffffffffffffffffffffffff161461103b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166110a7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180611dee6026913960400191505060405180910390fd5b60335460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61ffff83166000908152606760205260408120606854829190829061117190879063ffffffff6801000000000000000090910481169061146116565b82549091506000906111aa90889063ffffffff780100000000000000000000000000000000000000000000000090910481169061146116565b83546068549192506000916111f09167ffffffffffffffff700100000000000000000000000000000000909104811691610a6c9186916109b791899183918f91166114dd565b606554855491925061121d916fffffffffffffffffffffffffffffffff91821691610aa291859116611461565b935493996fffffffffffffffffffffffffffffffff9094169850929650505050505050565b805160208083015160409384015184516060810186526fffffffffffffffffffffffffffffffff948516815267ffffffffffffffff92831681850190815263ffffffff92831682880190815261ffff909816600090815260679095529590932092518354955196519091167801000000000000000000000000000000000000000000000000027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff96909216700100000000000000000000000000000000027fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff919094167fffffffffffffffffffffffffffffffff0000000000000000000000000000000090951694909417939093169190911792909216179055565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b3390565b60008161ffff16606e14806113a057508161ffff16606f145b806113af57508161ffff166097145b156113bc5750606561145c565b8161ffff1661279414806113d557508161ffff1661279f145b806113e557508161ffff166127a7145b156113f3575061278961145c565b8161ffff16614ea4148061140c57508161ffff16614eaf145b8061141c57508161ffff16614eb7145b1561142a5750614e9961145c565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035490611cdc565b919050565b600082611470575060006114d7565b8282028284828161147d57fe5b04146114d4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180611e426021913960400191505060405180910390fd5b90505b92915050565b6000828201838110156114d457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008082116115c157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816115ca57fe5b049392505050565b60006115dd30611707565b15905090565b600054610100900460ff16806115fc57506115fc6115d2565b8061160a575060005460ff16155b61165f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180611e14602e913960400191505060405180910390fd5b600054610100900460ff161580156116c557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b6116cd61170d565b6116d561181f565b801561170457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50565b3b151590565b600054610100900460ff168061172657506117266115d2565b80611734575060005460ff16155b611789576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180611e14602e913960400191505060405180910390fd5b600054610100900460ff161580156116d557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff90911661010017166001179055801561170457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600054610100900460ff168061183857506118386115d2565b80611846575060005460ff16155b61189b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180611e14602e913960400191505060405180910390fd5b600054610100900460ff1615801561190157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b600061190b611383565b603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350801561170457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b604080516060810182526000808252602082018190529181019190915290565b803573ffffffffffffffffffffffffffffffffffffffff8116811461145c57600080fd5b80356fffffffffffffffffffffffffffffffff8116811461145c57600080fd5b803561ffff8116811461145c57600080fd5b803563ffffffff8116811461145c57600080fd5b803567ffffffffffffffff8116811461145c57600080fd5b600060208284031215611a62578081fd5b611a6b826119cf565b9392505050565b60008060408385031215611a84578081fd5b611a8d836119cf565b915060208301358015158114611aa1578182fd5b809150509250929050565b60008060208385031215611abe578182fd5b823567ffffffffffffffff80821115611ad5578384fd5b818501915085601f830112611ae8578384fd5b813581811115611af6578485fd5b86602060c083028501011115611b0a578485fd5b60209290920196919550909350505050565b60008060208385031215611b2e578182fd5b823567ffffffffffffffff80821115611b45578384fd5b818501915085601f830112611b58578384fd5b813581811115611b66578485fd5b866020608083028501011115611b0a578485fd5b600060608284031215611b8b578081fd5b6040516060810181811067ffffffffffffffff82111715611ba857fe5b604052611bb4836119f3565b8152611bc260208401611a39565b6020820152611bd360408401611a25565b60408201529392505050565b600060208284031215611bf0578081fd5b611a6b826119f3565b600060208284031215611c0a578081fd5b611a6b82611a13565b600080600060608486031215611c27578081fd5b611c3084611a13565b95602085013595506040909401359392505050565b600060208284031215611c56578081fd5b611a6b82611a25565b600060208284031215611c70578081fd5b611a6b82611a39565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b901515815260200190565b6020808252601c908201527f5072696365466565643a206e6f74207072696365207570646174657200000000604082015260600190565b6020808252601e908201527f5072696365466565643a20756e6b6e6f776e206c3220636861696e2069640000604082015260600190565b81516fffffffffffffffffffffffffffffffff16815260208083015167ffffffffffffffff169082015260409182015163ffffffff169181019190915260600190565b6fffffffffffffffffffffffffffffffff91909116815260200190565b6fffffffffffffffffffffffffffffffff93909316835267ffffffffffffffff91909116602083015263ffffffff16604082015260600190565b9182526fffffffffffffffffffffffffffffffff16602082015260400190565b67ffffffffffffffff92909216825263ffffffff1660208201526040019056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220f4e3ed078be4efbf632d5230bdf7b05ddda28f7c70c881e715b9e686209fa1cc64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c80638da5cb5b116100cd578063d350ad2511610081578063e15d16e811610066578063e15d16e8146102ae578063f2fde38b146102c1578063ff37b496146102d457610151565b8063d350ad251461027b578063e0ad121a1461028e57610151565b8063ab1518ab116100b2578063ab1518ab1461024d578063c184032714610260578063c4d66de81461026857610151565b80638da5cb5b146102165780638f7002d21461022b57610151565b806352a7251011610124578063715018a611610109578063715018a6146101cd5780637bc3c9ab146101d55780638ca2fb08146101f657610151565b806352a72510146101a7578063711746e2146101ba57610151565b806315527af6146101565780631824a46b1461016b57806336a5beba146101735780633c04741e14610192575b600080fd5b610169610164366004611aac565b6102e7565b005b610169610450565b61017b610507565b604051610189929190611dcd565b60405180910390f35b61019a61052b565b6040516101899190611d56565b6101696101b5366004611a72565b610543565b6101696101c8366004611b1c565b610641565b6101696106ea565b6101e86101e3366004611c13565b610801565b604051610189929190611dad565b610209610204366004611a51565b6108bf565b6040516101899190611c9a565b61021e6108d4565b6040516101899190611c79565b61023e610239366004611bf9565b6108f0565b60405161018993929190611d73565b6101e861025b366004611c13565b610957565b61019a610b11565b610169610276366004611a51565b610b29565b610169610289366004611bdf565b610d48565b6102a161029c366004611bf9565b610e33565b6040516101899190611d13565b6101e86102bc366004611c13565b610ec3565b6101696102cf366004611a51565b610f93565b6101e86102e2366004611c13565b611135565b336102f06108d4565b73ffffffffffffffffffffffffffffffffffffffff161461035d573360009081526066602052604090205460ff1661035d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035490611ca5565b60405180910390fd5b60005b8181101561044b573683838381811061037557fe5b60c0029190910191506103a790506103906020830183611bf9565b6103a236849003840160208501611b7a565b611242565b60006103b960a0830160808401611c5f565b905060006103cd60c0840160a08501611c45565b6068805463ffffffff90921668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff67ffffffffffffffff9095167fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009093169290921793909316179091555050600101610360565b505050565b600061045a61135e565b905073ffffffffffffffffffffffffffffffffffffffff81166104b35773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103556104d5565b3373ffffffffffffffffffffffffffffffffffffffff8216146104d557600080fd5b50606580547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166402540be400179055565b60685467ffffffffffffffff81169068010000000000000000900463ffffffff1682565b6065546fffffffffffffffffffffffffffffffff1681565b61054b611383565b73ffffffffffffffffffffffffffffffffffffffff166105696108d4565b73ffffffffffffffffffffffffffffffffffffffff16146105eb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260666020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b3361064a6108d4565b73ffffffffffffffffffffffffffffffffffffffff16146106ae573360009081526066602052604090205460ff166106ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035490611ca5565b60005b8181101561044b57368383838181106106c657fe5b6080029190910191506106e190506103906020830183611bf9565b506001016106b1565b6106f2611383565b73ffffffffffffffffffffffffffffffffffffffff166107106108d4565b73ffffffffffffffffffffffffffffffffffffffff161461079257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60335460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b6000808461ffff16606e148061081c57508461ffff1661279f145b8061082c57508461ffff16614eaf145b156108455761083c858585611135565b915091506108b7565b8461ffff16606f148061085d57508461ffff16612794145b8061086d57508461ffff16614ea4145b8061087c57508461ffff166097145b8061088c57508461ffff166127a7145b8061089c57508461ffff16614eb7145b156108ac5761083c858585610957565b61083c858585610ec3565b935093915050565b60666020526000908152604090205460ff1681565b60335473ffffffffffffffffffffffffffffffffffffffff1690565b6067602052600090815260409020546fffffffffffffffffffffffffffffffff811690700100000000000000000000000000000000810467ffffffffffffffff16907801000000000000000000000000000000000000000000000000900463ffffffff1683565b600080600061096586611387565b61ffff811660009081526067602052604081208054929350916109bd90610c74906109b7908a9063ffffffff780100000000000000000000000000000000000000000000000090910481169061146116565b906114dd565b82549091506000906109ee908390700100000000000000000000000000000000900467ffffffffffffffff16611461565b61ffff8a166000908152606760205260408120805492935091610a38908b9063ffffffff780100000000000000000000000000000000000000000000000090910481169061146116565b8254909150600090610a7290700100000000000000000000000000000000900467ffffffffffffffff16610a6c848d6114dd565b90611461565b6065548754919250600091610aa8916fffffffffffffffffffffffffffffffff90811691610aa291899116611461565b90611551565b6065548554919250600091610ad8916fffffffffffffffffffffffffffffffff90811691610aa291879116611461565b90506000610ae683836114dd565b9554959f6fffffffffffffffffffffffffffffffff9096169e50949c50505050505050505050505050565b6065546fffffffffffffffffffffffffffffffff1690565b6000610b3361135e565b905073ffffffffffffffffffffffffffffffffffffffff8116610b8c5773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355610bae565b3373ffffffffffffffffffffffffffffffffffffffff821614610bae57600080fd5b600054610100900460ff1680610bc75750610bc76115d2565b80610bd5575060005460ff16155b610c2a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180611e14602e913960400191505060405180910390fd5b600054610100900460ff16158015610c9057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b610c986115e3565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260666020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055606580547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166402540be400179055801561044b57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050565b610d50611383565b73ffffffffffffffffffffffffffffffffffffffff16610d6e6108d4565b73ffffffffffffffffffffffffffffffffffffffff1614610df057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b606580547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055565b610e3b6119af565b5061ffff16600090815260676020908152604091829020825160608101845290546fffffffffffffffffffffffffffffffff81168252700100000000000000000000000000000000810467ffffffffffffffff1692820192909252780100000000000000000000000000000000000000000000000090910463ffffffff169181019190915290565b61ffff8316600090815260676020526040812080548291908290610f0e90879063ffffffff780100000000000000000000000000000000000000000000000090910481169061146116565b8254909150600090610f4290700100000000000000000000000000000000900467ffffffffffffffff16610a6c84896114dd565b6065548454919250610f6f916fffffffffffffffffffffffffffffffff91821691610aa291859116611461565b925492986fffffffffffffffffffffffffffffffff90931697509195505050505050565b610f9b611383565b73ffffffffffffffffffffffffffffffffffffffff16610fb96108d4565b73ffffffffffffffffffffffffffffffffffffffff161461103b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166110a7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180611dee6026913960400191505060405180910390fd5b60335460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61ffff83166000908152606760205260408120606854829190829061117190879063ffffffff6801000000000000000090910481169061146116565b82549091506000906111aa90889063ffffffff780100000000000000000000000000000000000000000000000090910481169061146116565b83546068549192506000916111f09167ffffffffffffffff700100000000000000000000000000000000909104811691610a6c9186916109b791899183918f91166114dd565b606554855491925061121d916fffffffffffffffffffffffffffffffff91821691610aa291859116611461565b935493996fffffffffffffffffffffffffffffffff9094169850929650505050505050565b805160208083015160409384015184516060810186526fffffffffffffffffffffffffffffffff948516815267ffffffffffffffff92831681850190815263ffffffff92831682880190815261ffff909816600090815260679095529590932092518354955196519091167801000000000000000000000000000000000000000000000000027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff96909216700100000000000000000000000000000000027fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff919094167fffffffffffffffffffffffffffffffff0000000000000000000000000000000090951694909417939093169190911792909216179055565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b3390565b60008161ffff16606e14806113a057508161ffff16606f145b806113af57508161ffff166097145b156113bc5750606561145c565b8161ffff1661279414806113d557508161ffff1661279f145b806113e557508161ffff166127a7145b156113f3575061278961145c565b8161ffff16614ea4148061140c57508161ffff16614eaf145b8061141c57508161ffff16614eb7145b1561142a5750614e9961145c565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035490611cdc565b919050565b600082611470575060006114d7565b8282028284828161147d57fe5b04146114d4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180611e426021913960400191505060405180910390fd5b90505b92915050565b6000828201838110156114d457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008082116115c157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816115ca57fe5b049392505050565b60006115dd30611707565b15905090565b600054610100900460ff16806115fc57506115fc6115d2565b8061160a575060005460ff16155b61165f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180611e14602e913960400191505060405180910390fd5b600054610100900460ff161580156116c557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b6116cd61170d565b6116d561181f565b801561170457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50565b3b151590565b600054610100900460ff168061172657506117266115d2565b80611734575060005460ff16155b611789576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180611e14602e913960400191505060405180910390fd5b600054610100900460ff161580156116d557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff90911661010017166001179055801561170457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600054610100900460ff168061183857506118386115d2565b80611846575060005460ff16155b61189b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180611e14602e913960400191505060405180910390fd5b600054610100900460ff1615801561190157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b600061190b611383565b603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350801561170457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b604080516060810182526000808252602082018190529181019190915290565b803573ffffffffffffffffffffffffffffffffffffffff8116811461145c57600080fd5b80356fffffffffffffffffffffffffffffffff8116811461145c57600080fd5b803561ffff8116811461145c57600080fd5b803563ffffffff8116811461145c57600080fd5b803567ffffffffffffffff8116811461145c57600080fd5b600060208284031215611a62578081fd5b611a6b826119cf565b9392505050565b60008060408385031215611a84578081fd5b611a8d836119cf565b915060208301358015158114611aa1578182fd5b809150509250929050565b60008060208385031215611abe578182fd5b823567ffffffffffffffff80821115611ad5578384fd5b818501915085601f830112611ae8578384fd5b813581811115611af6578485fd5b86602060c083028501011115611b0a578485fd5b60209290920196919550909350505050565b60008060208385031215611b2e578182fd5b823567ffffffffffffffff80821115611b45578384fd5b818501915085601f830112611b58578384fd5b813581811115611b66578485fd5b866020608083028501011115611b0a578485fd5b600060608284031215611b8b578081fd5b6040516060810181811067ffffffffffffffff82111715611ba857fe5b604052611bb4836119f3565b8152611bc260208401611a39565b6020820152611bd360408401611a25565b60408201529392505050565b600060208284031215611bf0578081fd5b611a6b826119f3565b600060208284031215611c0a578081fd5b611a6b82611a13565b600080600060608486031215611c27578081fd5b611c3084611a13565b95602085013595506040909401359392505050565b600060208284031215611c56578081fd5b611a6b82611a25565b600060208284031215611c70578081fd5b611a6b82611a39565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b901515815260200190565b6020808252601c908201527f5072696365466565643a206e6f74207072696365207570646174657200000000604082015260600190565b6020808252601e908201527f5072696365466565643a20756e6b6e6f776e206c3220636861696e2069640000604082015260600190565b81516fffffffffffffffffffffffffffffffff16815260208083015167ffffffffffffffff169082015260409182015163ffffffff169181019190915260600190565b6fffffffffffffffffffffffffffffffff91909116815260200190565b6fffffffffffffffffffffffffffffffff93909316835267ffffffffffffffff91909116602083015263ffffffff16604082015260600190565b9182526fffffffffffffffffffffffffffffffff16602082015260400190565b67ffffffffffffffff92909216825263ffffffff1660208201526040019056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220f4e3ed078be4efbf632d5230bdf7b05ddda28f7c70c881e715b9e686209fa1cc64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 137,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 140,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 484,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4689,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "PRICE_RATIO_DENOMINATOR",
        "offset": 0,
        "slot": "101",
        "type": "t_uint128"
      },
      {
        "astId": 4693,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "priceUpdater",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4697,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "defaultModelPrice",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint16,t_struct(Price)16281_storage)"
      },
      {
        "astId": 4699,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "arbitrumPriceExt",
        "offset": 0,
        "slot": "104",
        "type": "t_struct(ArbitrumPriceExt)16291_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint16,t_struct(Price)16281_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct ILayerZeroPriceFeed.Price)",
        "numberOfBytes": "32",
        "value": "t_struct(Price)16281_storage"
      },
      "t_struct(ArbitrumPriceExt)16291_storage": {
        "encoding": "inplace",
        "label": "struct ILayerZeroPriceFeed.ArbitrumPriceExt",
        "members": [
          {
            "astId": 16288,
            "contract": "contracts/PriceFeed.sol:PriceFeed",
            "label": "gasPerL2Tx",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 16290,
            "contract": "contracts/PriceFeed.sol:PriceFeed",
            "label": "gasPerL1CallDataByte",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Price)16281_storage": {
        "encoding": "inplace",
        "label": "struct ILayerZeroPriceFeed.Price",
        "members": [
          {
            "astId": 16276,
            "contract": "contracts/PriceFeed.sol:PriceFeed",
            "label": "priceRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 16278,
            "contract": "contracts/PriceFeed.sol:PriceFeed",
            "label": "gasPriceInUnit",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 16280,
            "contract": "contracts/PriceFeed.sol:PriceFeed",
            "label": "gasPerByte",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}